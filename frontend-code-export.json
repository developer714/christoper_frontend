{
  "README.md": "This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).\n\n## Getting Started\n\nFirst, run the development server:\n\n```bash\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\nOpen [http://localhost:3000](http://localhost:3000) with your browser to see the result.\n\nYou can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.\n\nThis project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.\n\n## Learn More\n\nTo learn more about Next.js, take a look at the following resources:\n\n- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.\n- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.\n\nYou can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!\n\n## Deploy on Vercel\n\nThe easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.\n\nCheck out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.\n",
  "eslint.config.mjs": "import { dirname } from \"path\";\nimport { fileURLToPath } from \"url\";\nimport { FlatCompat } from \"@eslint/eslintrc\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nconst compat = new FlatCompat({\n  baseDirectory: __dirname,\n});\n\nconst eslintConfig = [\n  ...compat.extends(\"next/core-web-vitals\", \"next/typescript\"),\n];\n\nexport default eslintConfig;\n",
  "extract-frontend-code.js": "// extract-frontend-code.js\nconst fs = require('fs');\nconst path = require('path');\n\n// Configuration\nconst outputFile = 'frontend-code-export.json';\nconst ignoredItems = [\n  'node_modules',\n  'package-lock.json',\n  '.git',\n  'dist',\n  'build',\n  '.DS_Store'\n];\n\n// Result object to store all file contents\nconst result = {};\n\n// Recursively read directory\nfunction readDirectory(dir) {\n  try {\n    const items = fs.readdirSync(dir);\n    \n    for (const item of items) {\n      const itemPath = path.join(dir, item);\n      \n      // Skip ignored items\n      if (ignoredItems.includes(item)) {\n        continue;\n      }\n      \n      const stats = fs.statSync(itemPath);\n      \n      if (stats.isDirectory()) {\n        // Recursively process subdirectories\n        readDirectory(itemPath);\n      } else {\n        // Read file content\n        try {\n          const content = fs.readFileSync(itemPath, 'utf8');\n          result[itemPath] = content;\n        } catch (error) {\n          console.error(`Error reading file ${itemPath}:`, error.message);\n        }\n      }\n    }\n  } catch (error) {\n    console.error(`Error reading directory ${dir}:`, error.message);\n  }\n}\n\n// Start the process from the current directory\nconsole.log('Starting to extract frontend code...');\nreadDirectory('.');\n\n// Write the result to the output file\ntry {\n  fs.writeFileSync(outputFile, JSON.stringify(result, null, 2));\n  console.log(`Frontend code successfully exported to ${outputFile}`);\n} catch (error) {\n  console.error('Error writing output file:', error.message);\n}",
  "frontend-code-export.json": "{\n  \"README.md\": \"This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).\\n\\n## Getting Started\\n\\nFirst, run the development server:\\n\\n```bash\\nnpm run dev\\n# or\\nyarn dev\\n# or\\npnpm dev\\n# or\\nbun dev\\n```\\n\\nOpen [http://localhost:3000](http://localhost:3000) with your browser to see the result.\\n\\nYou can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.\\n\\nThis project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.\\n\\n## Learn More\\n\\nTo learn more about Next.js, take a look at the following resources:\\n\\n- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.\\n- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.\\n\\nYou can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!\\n\\n## Deploy on Vercel\\n\\nThe easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.\\n\\nCheck out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.\\n\",\n  \"eslint.config.mjs\": \"import { dirname } from \\\"path\\\";\\nimport { fileURLToPath } from \\\"url\\\";\\nimport { FlatCompat } from \\\"@eslint/eslintrc\\\";\\n\\nconst __filename = fileURLToPath(import.meta.url);\\nconst __dirname = dirname(__filename);\\n\\nconst compat = new FlatCompat({\\n  baseDirectory: __dirname,\\n});\\n\\nconst eslintConfig = [\\n  ...compat.extends(\\\"next/core-web-vitals\\\", \\\"next/typescript\\\"),\\n];\\n\\nexport default eslintConfig;\\n\",\n  \"extract-frontend-code.js\": \"// extract-frontend-code.js\\nconst fs = require('fs');\\nconst path = require('path');\\n\\n// Configuration\\nconst outputFile = 'frontend-code-export.json';\\nconst ignoredItems = [\\n  'node_modules',\\n  'package-lock.json',\\n  '.git',\\n  'dist',\\n  'build',\\n  '.DS_Store'\\n];\\n\\n// Result object to store all file contents\\nconst result = {};\\n\\n// Recursively read directory\\nfunction readDirectory(dir) {\\n  try {\\n    const items = fs.readdirSync(dir);\\n    \\n    for (const item of items) {\\n      const itemPath = path.join(dir, item);\\n      \\n      // Skip ignored items\\n      if (ignoredItems.includes(item)) {\\n        continue;\\n      }\\n      \\n      const stats = fs.statSync(itemPath);\\n      \\n      if (stats.isDirectory()) {\\n        // Recursively process subdirectories\\n        readDirectory(itemPath);\\n      } else {\\n        // Read file content\\n        try {\\n          const content = fs.readFileSync(itemPath, 'utf8');\\n          result[itemPath] = content;\\n        } catch (error) {\\n          console.error(`Error reading file ${itemPath}:`, error.message);\\n        }\\n      }\\n    }\\n  } catch (error) {\\n    console.error(`Error reading directory ${dir}:`, error.message);\\n  }\\n}\\n\\n// Start the process from the current directory\\nconsole.log('Starting to extract frontend code...');\\nreadDirectory('.');\\n\\n// Write the result to the output file\\ntry {\\n  fs.writeFileSync(outputFile, JSON.stringify(result, null, 2));\\n  console.log(`Frontend code successfully exported to ${outputFile}`);\\n} catch (error) {\\n  console.error('Error writing output file:', error.message);\\n}\",\n   \"/// <reference types=\\\"next\\\" />\\n/// <reference types=\\\"next/image-types/global\\\" />\\n\\n// NOTE: This file should not be edited\\n// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.\\n\",\n  \"next.config.ts\": \"import type { NextConfig } from \\\"next\\\";\\n\\nconst nextConfig: NextConfig = {\\n  /* config options here */\\n};\\n\\nexport default nextConfig;\\n\",\n  \"package.json\": \"{\\n  \\\"name\\\": \\\"hcleanz-new\\\",\\n  \\\"version\\\": \\\"0.1.0\\\",\\n  \\\"private\\\": true,\\n  \\\"scripts\\\": {\\n    \\\"dev\\\": \\\"next dev --turbopack\\\",\\n    \\\"build\\\": \\\"next build\\\",\\n    \\\"start\\\": \\\"next start\\\",\\n    \\\"lint\\\": \\\"next lint\\\"\\n  },\\n  \\\"dependencies\\\": {\\n    \\\"axios\\\": \\\"^1.8.3\\\",\\n    \\\"js-cookie\\\": \\\"^3.0.5\\\",\\n    \\\"lucide-react\\\": \\\"^0.479.0\\\",\\n    \\\"next\\\": \\\"15.2.2\\\",\\n    \\\"react\\\": \\\"^19.0.0\\\",\\n    \\\"react-dom\\\": \\\"^19.0.0\\\",\\n    \\\"zustand\\\": \\\"^5.0.3\\\"\\n  },\\n  \\\"devDependencies\\\": {\\n    \\\"@eslint/eslintrc\\\": \\\"^3\\\",\\n    \\\"@tailwindcss/postcss\\\": \\\"^4\\\",\\n    \\\"@types/js-cookie\\\": \\\"^3.0.6\\\",\\n    \\\"@types/node\\\": \\\"^20\\\",\\n    \\\"@types/react\\\": \\\"^19\\\",\\n    \\\"@types/react-dom\\\": \\\"^19\\\",\\n    \\\"eslint\\\": \\\"^9\\\",\\n    \\\"eslint-config-next\\\": \\\"15.2.2\\\",\\n    \\\"tailwindcss\\\": \\\"^4\\\",\\n    \\\"typescript\\\": \\\"^5\\\"\\n  }\\n}\\n\",\n  \"postcss.config.mjs\": \"const config = {\\n  plugins: [\\\"@tailwindcss/postcss\\\"],\\n};\\n\\nexport default config;\\n\",\n  \"public/file.svg\": \"<svg fill=\\\"none\\\" viewBox=\\\"0 0 16 16\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z\\\" clip-rule=\\\"evenodd\\\" fill=\\\"#666\\\" fill-rule=\\\"evenodd\\\"/></svg>\",\n  \"public/globe.svg\": \"<svg fill=\\\"none\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 16 16\\\"><g clip-path=\\\"url(#a)\\\"><path fill-rule=\\\"evenodd\\\" clip-rule=\\\"evenodd\\\" d=\\\"M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1\\\" fill=\\\"#666\\\"/></g><defs><clipPath id=\\\"a\\\"><path fill=\\\"#fff\\\" d=\\\"M0 0h16v16H0z\\\"/></clipPath></defs></svg>\",\n  \"public/next.svg\": \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"none\\\" viewBox=\\\"0 0 394 80\\\"><path fill=\\\"#000\\\" d=\\\"M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z\\\"/><path fill=\\\"#000\\\" d=\\\"M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z\\\"/></svg>\",\n  \"public/vercel.svg\": \"<svg fill=\\\"none\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 1155 1000\\\"><path d=\\\"m577.3 0 577.4 1000H0z\\\" fill=\\\"#fff\\\"/></svg>\",\n  \"public/window.svg\": \"<svg fill=\\\"none\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 16 16\\\"><path fill-rule=\\\"evenodd\\\" clip-rule=\\\"evenodd\\\" d=\\\"M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5\\\" fill=\\\"#666\\\"/></svg>\",\n  \"src/app/booking/address/page.tsx\": \"'use client';\\n\\nimport { useState, useEffect } from 'react';\\nimport { useRouter } from 'next/navigation';\\nimport { useAuth } from '@/contexts/AuthContext';\\nimport { addressAPI } from '@/services/api';\\nimport { ArrowLeft, Home, ChevronRight, PenLine, Plus, MapPin } from 'lucide-react';\\nimport Link from 'next/link';\\nimport LoadingOverlay from '@/components/ui/LoadingOverlay';\\n\\nexport default function AddressSelectionPage() {\\n  const { isAuthenticated, isLoading } = useAuth();\\n  const [addresses, setAddresses] = useState<any[]>([]);\\n  const [loading, setLoading] = useState(true);\\n  const [selectedAddressId, setSelectedAddressId] = useState<string | null>(null);\\n  const [showNewAddressForm, setShowNewAddressForm] = useState(false);\\n  const [formData, setFormData] = useState({\\n    name: '',\\n    streetAddress: '',\\n    city: '',\\n    state: '',\\n    zipCode: '',\\n    squareFootage: 1000,\\n    notes: ''\\n  });\\n  const [formError, setFormError] = useState<string | null>(null);\\n  const router = useRouter();\\n\\n  useEffect(() => {\\n    // Check if service is selected\\n    const serviceData = localStorage.getItem('bookingService');\\n    if (!serviceData) {\\n      // If no service is selected, go back to home\\n      router.push('/booking/new');\\n      return;\\n    }\\n\\n    if (!isLoading && !isAuthenticated) {\\n      router.push('/auth/login');\\n      return;\\n    }\\n\\n    const fetchAddresses = async () => {\\n      setLoading(true);\\n      try {\\n        // Get real addresses from the backend API\\n        const addressesData = await addressAPI.getUserAddresses();\\n        setAddresses(addressesData);\\n        \\n        // Check if there's a previously selected address\\n        const storedAddress = localStorage.getItem('bookingAddress');\\n        if (storedAddress) {\\n          try {\\n            const parsed = JSON.parse(storedAddress);\\n            setSelectedAddressId(parsed.addressId);\\n          } catch (e) {\\n            console.error('Error parsing stored address:', e);\\n          }\\n        }\\n      } catch (error) {\\n        console.error('Error fetching addresses:', error);\\n      } finally {\\n        setLoading(false);\\n      }\\n    };\\n\\n    if (isAuthenticated) {\\n      fetchAddresses();\\n    }\\n  }, [isAuthenticated, isLoading, router]);\\n\\n  const handleAddressSelect = (address: any) => {\\n    setSelectedAddressId(address._id);\\n    \\n    // Store selected address in localStorage for next booking step\\n    localStorage.setItem('bookingAddress', JSON.stringify({\\n      addressId: address._id,\\n      name: address.name,\\n      streetAddress: address.streetAddress,\\n      city: address.city,\\n      state: address.state,\\n      zipCode: address.zipCode,\\n      squareFootage: address.squareFootage,\\n      notes: address.notes || ''\\n    }));\\n  };\\n\\n  const handleContinue = () => {\\n    if (selectedAddressId) {\\n      router.push('/booking/services');\\n    } else {\\n      // Scroll to addresses section to prompt selection\\n      document.getElementById('addresses-section')?.scrollIntoView({ behavior: 'smooth' });\\n    }\\n  };\\n\\n  const handleAddNewAddressClick = () => {\\n    setShowNewAddressForm(true);\\n  };\\n\\n  const handleEditAddress = (e: React.MouseEvent, addressId: string) => {\\n    e.stopPropagation(); // Prevent selecting the address when clicking edit\\n    router.push(`/profile/addresses/edit/${addressId}`);\\n  };\\n  \\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\\n    const { name, value } = e.target;\\n    setFormData(prev => ({\\n      ...prev,\\n      [name]: name === 'squareFootage' ? parseInt(value) || 0 : value\\n    }));\\n  };\\n\\n  const handleSubmitNewAddress = async (e: React.FormEvent) => {\\n    e.preventDefault();\\n    setFormError(null);\\n    \\n    // Simple validation\\n    if (!formData.name || !formData.streetAddress || !formData.city || !formData.state || !formData.zipCode) {\\n      setFormError('Please fill in all required fields');\\n      return;\\n    }\\n    \\n    try {\\n      setLoading(true);\\n      // Save the new address via API\\n      const newAddress = await addressAPI.createAddress(formData);\\n      \\n      // Add to list and select it\\n      setAddresses(prev => [...prev, newAddress]);\\n      handleAddressSelect(newAddress);\\n      \\n      // Hide the form\\n      setShowNewAddressForm(false);\\n      setFormData({\\n        name: '',\\n        streetAddress: '',\\n        city: '',\\n        state: '',\\n        zipCode: '',\\n        squareFootage: 1000,\\n        notes: ''\\n      });\\n    } catch (error) {\\n      console.error('Error creating address:', error);\\n      setFormError('Error creating address. Please try again.');\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  const cancelNewAddress = () => {\\n    setShowNewAddressForm(false);\\n    setFormError(null);\\n  };\\n\\n  if (isLoading || loading) {\\n    return <LoadingOverlay visible={true} message=\\\"Loading addresses...\\\" />;\\n  }\\n\\n  return (\\n    <div className=\\\"min-h-screen bg-white pb-20\\\">\\n      {/* Header */}\\n      <div className=\\\"border-b border-gray-200\\\">\\n        <div className=\\\"px-4 py-4 flex items-center\\\">\\n          <Link href=\\\"/booking/new\\\" className=\\\"mr-2\\\">\\n            <ArrowLeft size={20} className=\\\"text-gray-800\\\" />\\n          </Link>\\n          <h1 className=\\\"text-lg font-semibold\\\">Select Address</h1>\\n        </div>\\n      </div>\\n      \\n      {/* Content */}\\n      <div className=\\\"px-4 pt-6 max-w-md mx-auto\\\">\\n        <h2 className=\\\"text-2xl font-bold text-gray-800 mb-1\\\">\\n          Where do you need cleaning?\\n        </h2>\\n        <p className=\\\"text-gray-500 mb-6\\\">\\n          Select an address for your cleaning service\\n        </p>\\n\\n        {/* Address Cards */}\\n        <div className=\\\"space-y-4\\\" id=\\\"addresses-section\\\">\\n          {addresses.length > 0 ? (\\n            addresses.map(address => (\\n              <div \\n                key={address._id} \\n                className={`bg-white rounded-lg border overflow-hidden transition-colors ${\\n                  selectedAddressId === address._id \\n                    ? 'border-blue-500 bg-blue-500 text-white' \\n                    : 'border-gray-200 hover:border-blue-500'\\n                }`}\\n              >\\n                <div \\n                  className=\\\"p-4 cursor-pointer flex items-start justify-between transition-colors\\\" \\n                  onClick={() => handleAddressSelect(address)}\\n                >\\n                  <div className=\\\"flex\\\">\\n                    <div className=\\\"mr-3 mt-1\\\">\\n                      <div className={`w-10 h-10 rounded-full flex items-center justify-center ${\\n                        selectedAddressId === address._id \\n                          ? 'bg-blue-500 text-white' \\n                          : 'bg-blue-100 text-blue-500'\\n                      }`}>\\n                        <Home size={20} />\\n                      </div>\\n                    </div>\\n                    <div>\\n                      <div className=\\\"font-semibold text-gray-800\\\">{address.name}</div>\\n                      <div className=\\\"text-sm text-blue-500 font-medium\\\">{address.squareFootage} sq ft</div>\\n                      <div className=\\\"text-sm mt-2 text-gray-600\\\">\\n                        {address.streetAddress}, {address.city}, {address.state} {address.zipCode}\\n                      </div>\\n                      {address.notes && (\\n                        <div className=\\\"text-sm text-gray-500 italic mt-1\\\">\\n                          Note: {address.notes}\\n                        </div>\\n                      )}\\n                    </div>\\n                  </div>\\n                  {selectedAddressId === address._id ? (\\n                    <div className=\\\"h-6 w-6 rounded-full bg-blue-500 flex items-center justify-center\\\">\\n                      <svg width=\\\"12\\\" height=\\\"9\\\" viewBox=\\\"0 0 12 9\\\" fill=\\\"none\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n                        <path d=\\\"M1 4L4.5 7.5L11 1\\\" stroke=\\\"white\\\" strokeWidth=\\\"2\\\" strokeLinecap=\\\"round\\\" strokeLinejoin=\\\"round\\\"/>\\n                      </svg>\\n                    </div>\\n                  ) : (\\n                    <ChevronRight size={20} className=\\\"text-gray-400\\\" />\\n                  )}\\n                </div>\\n                <div className=\\\"border-t border-gray-200 px-4 py-2 flex justify-end\\\">\\n                  <button \\n                    className=\\\"text-blue-500 flex items-center text-sm font-medium\\\"\\n                    onClick={(e) => handleEditAddress(e, address._id)}\\n                  >\\n                    <PenLine size={16} className=\\\"mr-1\\\" />\\n                    Edit\\n                  </button>\\n                </div>\\n              </div>\\n            ))\\n          ) : (\\n            <div className=\\\"text-center py-8 bg-gray-50 rounded-lg border border-gray-200\\\">\\n              <MapPin size={40} className=\\\"mx-auto text-gray-400 mb-3\\\" />\\n              <p className=\\\"text-gray-500 mb-2\\\">No addresses found</p>\\n              <p className=\\\"text-gray-500 text-sm mb-4\\\">Please add an address to continue</p>\\n              <button \\n                className=\\\"bg-blue-500 text-white px-4 py-2 rounded-lg text-sm font-medium cursor-pointer hover:bg-blue-600 transition-colors\\\"\\n                onClick={handleAddNewAddressClick}\\n              >\\n                Add New Address\\n              </button>\\n            </div>\\n          )}\\n        </div>\\n\\n        {/* Add New Address Button */}\\n        {addresses.length > 0 && !showNewAddressForm && (\\n          <div className=\\\"mt-6\\\">\\n            <button \\n              className=\\\"w-full border border-blue-500 text-blue-500 rounded-lg py-3 flex items-center justify-center font-medium hover:bg-blue-500 hover:text-white transition-colors cursor-pointer\\\"\\n              onClick={handleAddNewAddressClick}\\n            >\\n              <Plus size={20} className=\\\"mr-2\\\" />\\n              Add New Address\\n            </button>\\n          </div>\\n        )}\\n\\n        {/* New Address Form */}\\n        {showNewAddressForm && (\\n          <div className=\\\"mt-6 bg-white rounded-lg border border-gray-200 p-4\\\">\\n            <div className=\\\"flex items-center justify-between mb-4\\\">\\n              <h3 className=\\\"text-lg font-semibold text-gray-800\\\">Add New Address</h3>\\n              <button \\n                className=\\\"text-gray-500\\\"\\n                onClick={cancelNewAddress}\\n              >\\n                &times;\\n              </button>\\n            </div>\\n            \\n            {formError && (\\n              <div className=\\\"mb-4 p-3 bg-red-50 border border-red-200 rounded-lg text-red-600 text-sm\\\">\\n                {formError}\\n              </div>\\n            )}\\n            \\n            <form onSubmit={handleSubmitNewAddress}>\\n              <div className=\\\"space-y-4\\\">\\n                <div>\\n                  <label className=\\\"block text-sm font-medium text-gray-700 mb-1\\\">\\n                    Location Name*\\n                  </label>\\n                  <input\\n                    type=\\\"text\\\"\\n                    name=\\\"name\\\"\\n                    value={formData.name}\\n                    onChange={handleInputChange}\\n                    placeholder=\\\"Home, Office, etc.\\\"\\n                    className=\\\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\\\"\\n                    required\\n                  />\\n                </div>\\n                \\n                <div>\\n                  <label className=\\\"block text-sm font-medium text-gray-700 mb-1\\\">\\n                    Street Address*\\n                  </label>\\n                  <input\\n                    type=\\\"text\\\"\\n                    name=\\\"streetAddress\\\"\\n                    value={formData.streetAddress}\\n                    onChange={handleInputChange}\\n                    placeholder=\\\"123 Main St\\\"\\n                    className=\\\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\\\"\\n                    required\\n                  />\\n                </div>\\n                \\n                <div className=\\\"grid grid-cols-2 gap-3\\\">\\n                  <div>\\n                    <label className=\\\"block text-sm font-medium text-gray-700 mb-1\\\">\\n                      City*\\n                    </label>\\n                    <input\\n                      type=\\\"text\\\"\\n                      name=\\\"city\\\"\\n                      value={formData.city}\\n                      onChange={handleInputChange}\\n                      placeholder=\\\"City\\\"\\n                      className=\\\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\\\"\\n                      required\\n                    />\\n                  </div>\\n                  <div>\\n                    <label className=\\\"block text-sm font-medium text-gray-700 mb-1\\\">\\n                      State*\\n                    </label>\\n                    <input\\n                      type=\\\"text\\\"\\n                      name=\\\"state\\\"\\n                      value={formData.state}\\n                      onChange={handleInputChange}\\n                      placeholder=\\\"State\\\"\\n                      className=\\\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\\\"\\n                      required\\n                    />\\n                  </div>\\n                </div>\\n                \\n                <div className=\\\"grid grid-cols-2 gap-3\\\">\\n                  <div>\\n                    <label className=\\\"block text-sm font-medium text-gray-700 mb-1\\\">\\n                      ZIP Code*\\n                    </label>\\n                    <input\\n                      type=\\\"text\\\"\\n                      name=\\\"zipCode\\\"\\n                      value={formData.zipCode}\\n                      onChange={handleInputChange}\\n                      placeholder=\\\"12345\\\"\\n                      className=\\\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\\\"\\n                      required\\n                    />\\n                  </div>\\n                  <div>\\n                    <label className=\\\"block text-sm font-medium text-gray-700 mb-1\\\">\\n                      Square Footage*\\n                    </label>\\n                    <input\\n                      type=\\\"number\\\"\\n                      name=\\\"squareFootage\\\"\\n                      value={formData.squareFootage}\\n                      onChange={handleInputChange}\\n                      placeholder=\\\"1000\\\"\\n                      className=\\\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\\\"\\n                      required\\n                    />\\n                  </div>\\n                </div>\\n                \\n                <div>\\n                  <label className=\\\"block text-sm font-medium text-gray-700 mb-1\\\">\\n                    Notes (Optional)\\n                  </label>\\n                  <textarea\\n                    name=\\\"notes\\\"\\n                    value={formData.notes}\\n                    onChange={handleInputChange}\\n                    placeholder=\\\"Any special instructions for finding or accessing this location\\\"\\n                    className=\\\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 h-24\\\"\\n                  />\\n                </div>\\n                \\n                <div className=\\\"flex space-x-3 pt-2\\\">\\n                  <button\\n                    type=\\\"button\\\"\\n                    onClick={cancelNewAddress}\\n                    className=\\\"flex-1 py-3 border border-gray-300 rounded-lg font-medium text-gray-700 hover:bg-gray-50 hover:scale-105 cursor-pointer\\\"\\n                  >\\n                    Cancel\\n                  </button>\\n                  <button\\n                    type=\\\"submit\\\"\\n                    className=\\\"flex-1 py-3 bg-blue-500 text-white rounded-lg font-medium hover:bg-blue-600 hover:scale-105 cursor-pointer\\\"\\n                  >\\n                    Save Address\\n                  </button>\\n                </div>\\n              </div>\\n            </form>\\n          </div>\\n        )}\\n\\n        {/* Continue Button - Only show if we have addresses and not showing the form */}\\n        {addresses.length > 0 && !showNewAddressForm && (\\n          <div className=\\\"fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 p-4\\\">\\n            <button\\n              onClick={handleContinue}\\n              disabled={!selectedAddressId}\\n              className={`w-full py-4 rounded-lg text-white font-medium transition-colors cursor-pointer hover:scale-105 ${\\n                selectedAddressId ? 'bg-blue-500 hover:bg-blue-600' : 'bg-gray-300 cursor-not-allowed'\\n              }`}\\n            >\\n              Continue\\n            </button>\\n          </div>\\n        )}\\n      </div>\\n    </div>\\n  );\\n}\",\n  \"src/app/booking/datetime/page.tsx\": \"'use client';\\n\\nimport { useState, useEffect } from 'react';\\nimport { useRouter } from 'next/navigation';\\nimport { useAuth } from '@/contexts/AuthContext';\\nimport { bookingAPI } from '@/services/api';\\nimport LoadingOverlay from '@/components/ui/LoadingOverlay';\\nimport Button from '@/components/ui/Button';\\nimport Card from '@/components/ui/Card';\\nimport { ArrowLeft, Clock, Calendar, Check, Info, DollarSign } from 'lucide-react';\\nimport Link from 'next/link';\\nimport Cookies from 'js-cookie';\\n\\nexport default function DateTimeSelectionPage() {\\n  const [selectedDates, setSelectedDates] = useState<string[]>([]);\\n  const [selectedTimeSlots, setSelectedTimeSlots] = useState<string[]>([]);\\n  const [availableDates, setAvailableDates] = useState<{ date: Date; formatted: string; day: string; dayNum: string; month: string }[]>([]);\\n  const [availableTimeSlots, setAvailableTimeSlots] = useState<{ id: string; time: string; isSelected: boolean }[]>([]);\\n  const [loading, setLoading] = useState(true);\\n  const [cleaningTime, setCleaningTime] = useState(\\\"2 hours 36 min\\\");\\n  const [cleaningDuration, setCleaningDuration] = useState(156); // in minutes\\n  const [bookingMode, setBookingMode] = useState<'specific' | 'flexible'>('flexible');\\n  const [multipleCleanersRequired, setMultipleCleanersRequired] = useState(false);\\n  const { isAuthenticated, isLoading } = useAuth();\\n  const router = useRouter();\\n\\n  useEffect(() => {\\n    if (!isLoading && !isAuthenticated) {\\n      router.push('/login');\\n      return;\\n    }\\n\\n    // Check if we have booking service and address data\\n    const bookingService = Cookies.get('bookingService');\\n    const bookingAddress = Cookies.get('bookingAddress');\\n    if (!bookingService || !bookingAddress) {\\n      router.push('/booking/new');\\n      return;\\n    }\\n\\n    // Generate next 7 days as available dates\\n    generateDates();\\n    generateTimeSlots();\\n    \\n    // Check if multiple cleaners are needed\\n    setMultipleCleanersRequired(cleaningDuration > 360); // 6 hours in minutes\\n    \\n    setLoading(false);\\n  }, [isAuthenticated, isLoading, router, cleaningDuration]);\\n\\n  // Generate dates for the next 7 days starting from tomorrow\\n  const generateDates = () => {\\n    const dates = [];\\n    const today = new Date();\\n    const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\\n    \\n    // Start from tomorrow for 7 days\\n    for (let i = 1; i <= 7; i++) {\\n      const date = new Date();\\n      date.setDate(today.getDate() + i);\\n      \\n      dates.push({\\n        date: date,\\n        formatted: date.toISOString().split('T')[0],\\n        day: daysOfWeek[date.getDay()],\\n        dayNum: date.getDate().toString(),\\n        month: months[date.getMonth()]\\n      });\\n    }\\n    \\n    setAvailableDates(dates);\\n  };\\n\\n  // Generate time slots based on the cleaning duration and business rules\\n  const generateTimeSlots = () => {\\n    const slots = [];\\n    const startHour = 8; // 8 AM\\n    const endHour = 20; // 8 PM (cutoff time)\\n    const maxSingleCleanerDuration = 360; // 6 hours in minutes\\n\\n    // Calculate the latest possible start time\\n    const durationHours = cleaningDuration / 60;\\n    const latestStartHour = endHour - durationHours;\\n    \\n    // Generate slots from 8 AM until latest possible start time\\n    for (let hour = startHour; hour <= latestStartHour; hour += 2) {\\n      // Format the start time\\n      const startHourFormatted = hour > 12 ? hour - 12 : hour;\\n      const startAmPm = hour >= 12 ? 'PM' : 'AM';\\n      \\n      // Calculate and format the end time\\n      const endHour = hour + 2;\\n      const endHourFormatted = endHour > 12 ? endHour - 12 : endHour;\\n      const endAmPm = endHour >= 12 ? 'PM' : 'AM';\\n      \\n      // Create the time slot string\\n      const timeSlot = `${startHourFormatted}:00 ${startAmPm} - ${endHourFormatted}:00 ${endAmPm}`;\\n      \\n      slots.push({\\n        id: hour.toString(),\\n        time: timeSlot,\\n        isSelected: false\\n      });\\n    }\\n    \\n    setAvailableTimeSlots(slots);\\n  };\\n\\n  // Handle date selection logic\\n  const handleDateSelection = (formatted: string) => {\\n    if (bookingMode === 'specific' && selectedDates.length === 1 && !selectedDates.includes(formatted)) {\\n      // In specific mode, only one date can be selected\\n      setSelectedDates([formatted]);\\n      return;\\n    }\\n    \\n    const updatedSelection = [...selectedDates];\\n    const index = updatedSelection.indexOf(formatted);\\n    \\n    if (index > -1) {\\n      // Deselect the date\\n      updatedSelection.splice(index, 1);\\n    } else {\\n      // In flexible mode, allow up to 3 selections\\n      if (updatedSelection.length < 3) {\\n        updatedSelection.push(formatted);\\n      }\\n    }\\n    \\n    setSelectedDates(updatedSelection);\\n  };\\n\\n  // Handle time slot selection logic\\n  const handleTimeSlotSelection = (id: string) => {\\n    const updatedTimeSlots = [...availableTimeSlots].map(slot => {\\n      if (slot.id === id) {\\n        return {...slot, isSelected: !slot.isSelected};\\n      }\\n      \\n      // In specific mode, only allow one selection\\n      if (bookingMode === 'specific' && !slot.isSelected) {\\n        return slot;\\n      }\\n      \\n      return slot;\\n    });\\n    \\n    // Count selected time slots\\n    const selectedSlots = updatedTimeSlots.filter(slot => slot.isSelected).map(slot => slot.id);\\n    \\n    // In specific mode, ensure only one time slot is selected\\n    if (bookingMode === 'specific' && selectedSlots.length > 1) {\\n      const clickedSlot = updatedTimeSlots.find(slot => slot.id === id);\\n      updatedTimeSlots.forEach(slot => {\\n        slot.isSelected = slot.id === id ? clickedSlot!.isSelected : false;\\n      });\\n    }\\n    \\n    // In flexible mode, ensure maximum 3 selections\\n    if (bookingMode === 'flexible' && selectedSlots.length > 3) {\\n      return;\\n    }\\n    \\n    setAvailableTimeSlots(updatedTimeSlots);\\n    setSelectedTimeSlots(updatedTimeSlots.filter(slot => slot.isSelected).map(slot => slot.id));\\n  };\\n\\n  // Toggle between specific and flexible booking modes\\n  const toggleBookingMode = (mode: 'specific' | 'flexible') => {\\n    if (mode === bookingMode) return;\\n    \\n    setBookingMode(mode);\\n    \\n    // Reset selections when changing modes\\n    setSelectedDates([]);\\n    setAvailableTimeSlots(availableTimeSlots.map(slot => ({...slot, isSelected: false})));\\n    setSelectedTimeSlots([]);\\n  };\\n\\n  // Check if the discount should be applied (3 time slots selected in flexible mode)\\n  const shouldApplyDiscount = () => {\\n    return bookingMode === 'flexible' && selectedTimeSlots.length === 3;\\n  };\\n\\n  // Handle the continue button click\\n  const handleContinue = () => {\\n    console.log(\\\"handleContinue called\\\");\\n    // Validate selections - simply check that at least one date and time are selected\\n    if (selectedDates.length === 0 || selectedTimeSlots.length === 0) {\\n      console.log(\\\"Validation failed - missing dates or time slots\\\");\\n      return;\\n    }\\n\\n    console.log(\\\"Validation passed, saving to cookies\\\");\\n\\n    // Create the data object\\n    const dateTimeData = {\\n      preferredDates: selectedDates,\\n      preferredTimeSlots: selectedTimeSlots.map(id => availableTimeSlots.find(slot => slot.id === id)?.time),\\n      flexibleScheduling: bookingMode === 'flexible',\\n      discountApplied: shouldApplyDiscount()\\n    };\\n\\n    // Store date/time in cookies\\n    Cookies.set('bookingDateTime', JSON.stringify(dateTimeData), { expires: 7 });\\n\\n    console.log(\\\"About to navigate to summary page\\\");\\n\\n    setTimeout(() => {\\n      router.push('/booking/summary');\\n    }, 100);\\n  };\\n\\n  // Check if the continue button should be enabled\\n  const isContinueEnabled = () => {\\n    // Enable button as soon as at least one date and one time are selected\\n    return selectedDates.length > 0 && selectedTimeSlots.length > 0;\\n  };\\n\\n  if (isLoading || loading) {\\n    return <LoadingOverlay visible={true} message=\\\"Loading scheduling options...\\\" />;\\n  }\\n\\n  return (\\n    <div className=\\\"min-h-screen bg-white px-4 py-0\\\">\\n      <div className=\\\"max-w-md mx-auto\\\">\\n        <div className=\\\"py-4 flex items-center border-b border-gray-200\\\">\\n          <Link href=\\\"/booking/address\\\" className=\\\"mr-2\\\">\\n            <ArrowLeft size={20} className=\\\"text-gray-800\\\" />\\n          </Link>\\n          <h1 className=\\\"text-lg font-semibold\\\">Select Date & Time</h1>\\n        </div>\\n\\n        <div className=\\\"py-4\\\">\\n          <h2 className=\\\"text-2xl font-bold text-gray-800 mb-1\\\">When do you need cleaning?</h2>\\n          <p className=\\\"text-gray-500 mb-6\\\">\\n            Select your preferred dates and times for your cleaning service\\n          </p>\\n\\n          {/* Max Clean Time Section */}\\n          <div className=\\\"bg-blue-50 rounded-lg p-4 mb-6\\\">\\n            <div className=\\\"flex items-start mb-1\\\">\\n              <Clock size={20} className=\\\"text-blue-500 mr-2 mt-1\\\" />\\n              <div>\\n                <h3 className=\\\"font-semibold text-gray-800\\\">Max Clean Time</h3>\\n                <p className=\\\"text-blue-500 text-xl font-bold\\\">{cleaningTime}</p>\\n              </div>\\n            </div>\\n            <p className=\\\"text-gray-600 text-sm\\\">\\n              Based on your property size and selected services, we've calculated the maximum time needed for your cleaning.\\n            </p>\\n            <p className=\\\"text-gray-500 text-sm italic mt-2\\\">\\n              Note: All cleanings must finish by 6:00 PM, so your available time slots are limited accordingly.\\n            </p>\\n            \\n            {multipleCleanersRequired && (\\n              <div className=\\\"mt-2 p-2 bg-yellow-50 border border-yellow-200 rounded-md text-sm text-yellow-700\\\">\\n                <Info size={16} className=\\\"inline-block mr-1\\\" />\\n                This cleaning will require multiple cleaners due to its duration.\\n              </div>\\n            )}\\n          </div>\\n\\n          {/* Flexible Scheduling Section */}\\n          <div className=\\\"bg-blue-50 rounded-lg p-4 mb-6\\\">\\n            <div className=\\\"flex items-center justify-between mb-3\\\">\\n              <div className=\\\"flex items-start\\\">\\n                <Info size={20} className=\\\"text-blue-500 mr-2 mt-1\\\" />\\n                <div>\\n                  <h3 className=\\\"font-semibold text-gray-800\\\">Flexible Scheduling</h3>\\n                  <p className=\\\"text-gray-600 text-sm\\\">\\n                    Select multiple dates and times if you're flexible. You'll receive a 5% discount for flexible scheduling!\\n                  </p>\\n                </div>\\n              </div>\\n            </div>\\n            \\n            <div className=\\\"flex items-center space-x-4 mb-2\\\">\\n              <div \\n                className={`px-4 py-2 rounded-full cursor-pointer hover:scale-105 transition-colors ${\\n                  bookingMode === 'specific' \\n                    ? 'bg-blue-500 text-white' \\n                    : 'bg-gray-200 text-gray-700'\\n                }`}\\n                onClick={() => toggleBookingMode('specific')}\\n              >\\n                Specific Time\\n              </div>\\n              <div \\n                className={`px-4 py-2 rounded-full cursor-pointer hover:scale-105 transition-colors ${\\n                  bookingMode === 'flexible' \\n                    ? 'bg-blue-500 text-white' \\n                    : 'bg-gray-200 text-gray-700'\\n                }`}\\n                onClick={() => toggleBookingMode('flexible')}\\n              >\\n                Flexible Time\\n              </div>\\n            </div>\\n            \\n            {shouldApplyDiscount() && (\\n              <div className=\\\"bg-green-400 text-white text-sm font-medium rounded-full px-4 py-2 inline-flex items-center\\\">\\n                <DollarSign size={16} className=\\\"mr-1\\\" /> 5% Discount Applied\\n              </div>\\n            )}\\n          </div>\\n\\n          {/* Date Selection Section */}\\n          <div className=\\\"mb-6\\\">\\n            <div className=\\\"flex items-center justify-between mb-3\\\">\\n              <div className=\\\"flex items-center\\\">\\n                <Calendar size={18} className=\\\"text-blue-500 mr-2\\\" />\\n                <h3 className=\\\"font-semibold text-gray-800\\\">Select Date(s)</h3>\\n              </div>\\n              <span className=\\\"text-blue-500 text-sm\\\">\\n                {selectedDates.length}/{bookingMode === 'flexible' ? '3' : '1'} selected\\n              </span>\\n            </div>\\n            \\n            <div className=\\\"grid grid-cols-4 gap-2\\\">\\n              {availableDates.map((dateObj) => (\\n                <div\\n                  key={dateObj.formatted}\\n                  className={`border rounded-lg p-3 text-center cursor-pointer hover:scale-105 transition-colors ${\\n                    selectedDates.includes(dateObj.formatted)\\n                      ? 'border-blue-500 bg-blue-50'\\n                      : 'border-gray-200 hover:border-blue-300'\\n                  }`}\\n                  onClick={() => handleDateSelection(dateObj.formatted)}\\n                >\\n                  <div className=\\\"text-sm font-medium text-gray-500\\\">{dateObj.day}</div>\\n                  <div className=\\\"text-lg font-bold text-gray-800\\\">{dateObj.dayNum}</div>\\n                  <div className=\\\"text-sm text-gray-500\\\">{dateObj.month}</div>\\n                </div>\\n              ))}\\n            </div>\\n          </div>\\n\\n          {/* Time Slot Selection Section */}\\n          <div className=\\\"mb-6\\\">\\n            <div className=\\\"flex items-center justify-between mb-3\\\">\\n              <div className=\\\"flex items-center\\\">\\n                <Clock size={18} className=\\\"text-blue-500 mr-2\\\" />\\n                <h3 className=\\\"font-semibold text-gray-800\\\">Select Time(s)</h3>\\n              </div>\\n              <span className=\\\"text-blue-500 text-sm\\\">\\n                {selectedTimeSlots.length}/{bookingMode === 'flexible' ? '3' : '1'} selected\\n              </span>\\n            </div>\\n            \\n            <div className=\\\"grid grid-cols-2 gap-3\\\">\\n              {availableTimeSlots.map((slot) => (\\n                <div\\n                  key={slot.id}\\n                  className={`border rounded-lg p-3 flex justify-between items-center cursor-pointer hover:scale-105 transition-colors ${\\n                    slot.isSelected\\n                      ? 'border-blue-500 bg-blue-500 text-white'\\n                      : 'border-gray-200 hover:border-blue-300'\\n                  }`}\\n                  onClick={() => handleTimeSlotSelection(slot.id)}\\n                >\\n                  <span className=\\\"font-medium\\\">{slot.time}</span>\\n                  {slot.isSelected && (\\n                    <Check size={18} className=\\\"text-white\\\" />\\n                  )}\\n                </div>\\n              ))}\\n            </div>\\n            \\n            <p className=\\\"text-gray-500 text-sm italic mt-3\\\">\\n              Note: Available time slots are limited based on your estimated cleaning time of {cleaningTime}. All cleanings must finish by 6:00 PM.\\n            </p>\\n          </div>\\n\\n          {/* Continue Button */}\\n          <button\\n            className={`w-full py-4 rounded-lg text-center font-medium transition-colors ${\\n              isContinueEnabled()\\n                ? 'bg-blue-500 text-white hover:bg-blue-600 cursor-pointer'\\n                : 'bg-gray-200 text-gray-400 cursor-not-allowed'\\n            }`}\\n            disabled={!isContinueEnabled()}\\n            onClick={handleContinue}\\n          >\\n            Continue\\n          </button>\\n        </div>\\n      </div>\\n    </div>\\n  );\\n}\",\n  \"src/app/booking/new/page.tsx\": \"'use client';\\n\\nimport { useState, useEffect } from 'react';\\nimport { useRouter } from 'next/navigation';\\nimport { useAuth } from '@/contexts/AuthContext';\\nimport { serviceAPI } from '@/services/api';\\nimport LoadingOverlay from '@/components/ui/LoadingOverlay';\\nimport Button from '@/components/ui/Button';\\nimport { ArrowLeft, CheckSquare } from 'lucide-react';\\nimport Link from 'next/link';\\nimport useBookingStore from '@/store/bookingStore';\\n\\nexport default function ServiceSelectionPage() {\\n  // Services and cleaning types\\n  const [cleaningTypes, setCleaningTypes] = useState([\\n    { id: 'standard', name: 'Standard Clean', description: 'Basic cleaning for regular maintenance', price: 98, icon: 'standard' },\\n    { id: 'deep', name: 'Deep Clean', description: 'Thorough cleaning for neglected areas', price: 145, icon: 'deep' },\\n    { id: 'move', name: 'Move In/Out', description: 'Complete cleaning for moving', price: 165, icon: 'move' },\\n    { id: 'party', name: 'Party Clean', description: 'Quick cleanup after events', price: 120, icon: 'party' },\\n    { id: 'office', name: 'Office Clean', description: 'Professional cleaning for workspaces', price: 110, icon: 'office' }\\n  ]);\\n  const [selectedCleaningType, setSelectedCleaningType] = useState<string | null>(null);\\n  \\n  // Square footage state\\n  const [squareFootageMode, setSquareFootageMode] = useState(false);\\n  \\n  // Loading state\\n  const [loading, setLoading] = useState(true);\\n  const [error, setError] = useState<string | null>(null);\\n  \\n  const { isAuthenticated, isLoading } = useAuth();\\n  const router = useRouter();\\n  const setService = useBookingStore(state => state.setService);\\n  \\n  useEffect(() => {\\n    if (!isLoading && !isAuthenticated) {\\n      router.push('/auth/login');\\n      return;\\n    }\\n\\n    // Fetch services from API\\n    const fetchServices = async () => {\\n      try {\\n        const servicesData = await serviceAPI.getServices();\\n        if (servicesData && servicesData.length > 0) {\\n          // Map API data to our format if needed\\n          // setCleaningTypes(servicesData);\\n        }\\n      } catch (err) {\\n        console.error('Error fetching services:', err);\\n        // Continue with default data\\n      } finally {\\n        setLoading(false);\\n      }\\n    };\\n\\n    if (isAuthenticated) {\\n      fetchServices();\\n    }\\n  }, [isAuthenticated, isLoading, router]);\\n  \\n  const handleCleaningTypeSelection = (typeId: string) => {\\n    setSelectedCleaningType(typeId);\\n  };\\n  \\n  const toggleSquareFootageMode = () => {\\n    setSquareFootageMode(!squareFootageMode);\\n  };\\n  \\n  const handleContinue = () => {\\n    if (!selectedCleaningType) return;\\n    \\n    const selectedType = cleaningTypes.find(type => type.id === selectedCleaningType);\\n    \\n    if (selectedType) {\\n      // Store service info in localStorage\\n      localStorage.setItem('bookingService', JSON.stringify({\\n        serviceId: selectedType.id,\\n        serviceName: selectedType.name,\\n        serviceDescription: selectedType.description,\\n        basePrice: selectedType.price\\n      }));\\n      \\n      // Save to Zustand store\\n      setService({\\n        serviceId: selectedType.id,\\n        serviceName: selectedType.name,\\n        serviceDescription: selectedType.description,\\n        basePrice: selectedType.price\\n      });\\n      \\n      // Navigate to address selection\\n      router.push('/booking/address');\\n    }\\n  };\\n\\n  if (isLoading || loading) {\\n    return <LoadingOverlay visible={true} message=\\\"Loading services...\\\" />;\\n  }\\n\\n  return (\\n    <div className=\\\"min-h-screen bg-white\\\">\\n      <div className=\\\"max-w-md mx-auto px-4\\\">\\n        {/* Header */}\\n        <div className=\\\"py-4 flex items-center border-b border-gray-200\\\">\\n          <Link href=\\\"/\\\" className=\\\"mr-2\\\">\\n            <ArrowLeft size={20} className=\\\"text-gray-800\\\" />\\n          </Link>\\n          <h1 className=\\\"text-lg font-semibold\\\">Select Services</h1>\\n        </div>\\n        \\n        {/* Cleaning Type Selection */}\\n        <div className=\\\"py-4\\\">\\n          <div className=\\\"flex items-center mb-4\\\">\\n            <CheckSquare size={20} className=\\\"text-blue-500 mr-2\\\" />\\n            <h2 className=\\\"text-lg font-semibold\\\">Select Cleaning Type</h2>\\n          </div>\\n          \\n          <div className=\\\"grid grid-cols-2 gap-3 mb-6\\\">\\n            {cleaningTypes.slice(0, 4).map(type => (\\n              <div \\n                key={type.id}\\n                className={`border rounded-lg p-3 cursor-pointer transition-colors ${\\n                  selectedCleaningType === type.id \\n                    ? 'border-blue-500 bg-blue-500 text-white' \\n                    : 'border-gray-200 hover:border-blue-300'\\n                }`}\\n                onClick={() => handleCleaningTypeSelection(type.id)}\\n              >\\n                <h3 className=\\\"font-semibold\\\">{type.name}</h3>\\n                <p className={`text-sm ${selectedCleaningType === type.id ? 'text-white' : 'text-gray-500'}`}>\\n                  {type.description}\\n                </p>\\n                <p className={`font-semibold mt-1 ${selectedCleaningType === type.id ? 'text-white' : 'text-blue-500'}`}>\\n                  ${type.price}\\n                </p>\\n              </div>\\n            ))}\\n          </div>\\n          \\n          {/* Office Clean */}\\n          <div \\n            className={`border rounded-lg p-3 mb-6 cursor-pointer transition-colors ${\\n              selectedCleaningType === 'office' \\n                ? 'border-blue-500 bg-blue-500 text-white' \\n                : 'border-gray-200 hover:border-blue-300'\\n            }`}\\n            onClick={() => handleCleaningTypeSelection('office')}\\n          >\\n           <div className=\\\"flex items-center\\\">\\n            <div>\\n              <h3 className=\\\"font-semibold\\\">Office Clean</h3>\\n              <p className={`text-sm ${selectedCleaningType === 'office' ? 'text-white' : 'text-gray-500'}`}>\\n                Professional cleaning for workspaces\\n              </p>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n        \\n        {/* Square Footage */}\\n        <div className=\\\"py-4 border-t border-gray-200\\\">\\n          <div className=\\\"flex items-center mb-4\\\">\\n            <h2 className=\\\"text-lg font-semibold\\\">Square Footage</h2>\\n          </div>\\n          \\n          <div className=\\\"flex items-center justify-between mb-3\\\">\\n            <p className=\\\"text-gray-600\\\">Square Footage Mode</p>\\n            <div \\n              className={`w-12 h-6 flex items-center rounded-full p-1 cursor-pointer ${\\n                squareFootageMode ? 'bg-blue-500 justify-end' : 'bg-gray-300 justify-start'\\n              }`}\\n              onClick={toggleSquareFootageMode}\\n            >\\n              <div className=\\\"bg-white w-4 h-4 rounded-full shadow-md\\\"></div>\\n            </div>\\n          </div>\\n          \\n          <p className=\\\"text-gray-500 text-sm mb-4\\\">\\n            Adjust the size of your space to get an accurate price estimate.\\n          </p>\\n        </div>\\n        \\n        {/* Continue Button */}\\n        <button\\n          className={`w-full py-4 rounded-lg text-center font-medium transition-colors ${\\n            selectedCleaningType \\n              ? 'bg-blue-500 text-white hover:bg-blue-600'\\n              : 'bg-gray-200 text-gray-400 cursor-not-allowed'\\n          }`}\\n          disabled={!selectedCleaningType}\\n          onClick={handleContinue}\\n        >\\n          Continue\\n        </button>\\n        </div>\\n    </div>\\n  );\\n}\",\n  \"src/app/booking/services/page.tsx\": \"'use client';\\n\\nimport { useState, useEffect, useRef } from 'react';\\nimport { useRouter } from 'next/navigation';\\nimport { useAuth } from '@/contexts/AuthContext';\\nimport { serviceAPI } from '@/services/api';\\nimport LoadingOverlay from '@/components/ui/LoadingOverlay';\\nimport { ArrowLeft, CheckSquare, Home, Clock, Info } from 'lucide-react';\\nimport Link from 'next/link';\\nimport useBookingStore from '@/store/bookingStore';\\nimport MembershipPopup from '@/components/popups/MembershipPopup';\\nimport CleaningSuppliesModal from '@/components/ui/CleaningSuppliesModal';\\nimport FancyLoader from '@/components/ui/FancyLoader';\\n\\n\\nexport default function ServicePage() {\\n  // Services and cleaning types\\n  const [hours, setHours] = useState(2);\\n  const [cleaningTypes, setCleaningTypes] = useState([\\n    { id: 'standard', name: 'Standard Clean', description: 'Basic cleaning for regular maintenance', price: 98, icon: 'standard' },\\n    { id: 'deep', name: 'Deep Clean', description: 'Thorough cleaning for neglected areas', price: 145, icon: 'deep' },\\n    { id: 'move', name: 'Move In/Out', description: 'Complete cleaning for moving', price: 165, icon: 'move' },\\n    { id: 'party', name: 'Party Clean', description: 'Quick cleanup after events', price: 120, icon: 'party' },\\n    { id: 'office', name: 'Office Clean', description: 'Professional cleaning for workspaces', price: 110, icon: 'office' }\\n  ]);\\n  const [selectedCleaningType, setSelectedCleaningType] = useState<string | null>(null);\\n  \\n  // Hours vs Square Footage mode\\n  const [hourlyMode, setHourlyMode] = useState(false);\\n  const [squareFootage, setSquareFootage] = useState(1000);\\n  const [currentPrice, setCurrentPrice] = useState(98);\\n  \\n  // states to manage popup\\n  const [showMembershipPopup, setShowMembershipPopup] = useState(false);\\n  const [membershipFrequency, setMembershipFrequency] = useState<'weekly' | 'biweekly' | 'twice-weekly'>('weekly');\\n\\n  // states to manage cleaning supplies popup component\\n  const [showSuppliesModal, setShowSuppliesModal] = useState(false);\\n  const [suppliesOption, setSuppliesOption] = useState('bring-everything');\\n  const [selectedSupplies, setSelectedSupplies] = useState<string[]>([]);\\n  \\n\\n  // Additional tasks state\\n  const [additionalTasks, setAdditionalTasks] = useState([\\n    { id: 'oven', name: 'Inside Oven', price: 30, time: 30, count: 0, type: 'add' },\\n    { id: 'fridge', name: 'Inside Fridge', price: 30, time: 30, count: 0, type: 'add' },\\n    { id: 'cabinets', name: 'Inside Cabinets', price: 15, time: 15, count: 0, type: 'count' },\\n    { id: 'laundry', name: 'Laundry', price: 20, time: 30, count: 0, type: 'count' }\\n  ]);\\n  \\n  // Messiness scale\\n  const [messiness, setMessiness] = useState(3);\\n  \\n  // Frequency options\\n  const [frequency, setFrequency] = useState('one-time');\\n  const frequencies = [\\n    { id: 'one-time', name: 'One-time', description: 'Single cleaning service', discount: 0 },\\n    { id: 'biweekly', name: 'Biweekly', description: 'Every two weeks', discount: 10 },\\n    { id: 'weekly', name: 'Weekly', description: 'Once every week', discount: 15 },\\n    { id: 'twice-weekly', name: 'Twice a week', description: 'Two times per week', discount: 20 }\\n  ];\\n  \\n  // Pets\\n  const [pets, setPets] = useState<string[]>([]);\\n  \\n  // Special instructions\\n  const [specialInstructions, setSpecialInstructions] = useState('');\\n  \\n  // Cleaning time calculation\\n  const [cleaningTime, setCleaningTime] = useState(\\\"2 hours\\\");\\n  \\n  // Loading state\\n  const [loading, setLoading] = useState(true);\\n  const [error, setError] = useState<string | null>(null);\\n  \\n  const { isAuthenticated, isLoading } = useAuth();\\n  const router = useRouter();\\n  const setService = useBookingStore(state => state.setService);\\n  const setDetails = useBookingStore(state => state.setDetails);\\n  \\n  // Element refs for scrolling\\n  const squareFootageRef = useRef<HTMLDivElement>(null);\\n  const additionalTasksRef = useRef<HTMLDivElement>(null);\\n  const messinessRef = useRef<HTMLDivElement>(null);\\n  const frequencyRef = useRef<HTMLDivElement>(null);\\n  const petsRef = useRef<HTMLDivElement>(null);\\n  \\n  useEffect(() => {\\n    if (!isLoading && !isAuthenticated) {\\n      router.push('/auth/login');\\n      return;\\n    }\\n\\n    // Fetch services from API\\n    const fetchServices = async () => {\\n      try {\\n        const servicesData = await serviceAPI.getServices();\\n        if (servicesData && servicesData.length > 0) {\\n          // Map API data to our format if needed\\n        }\\n      } catch (err) {\\n        console.error('Error fetching services:', err);\\n        // Continue with default data\\n      } finally {\\n        setLoading(false);\\n      }\\n    };\\n\\n    if (isAuthenticated) {\\n      fetchServices();\\n    }\\n  }, [isAuthenticated, isLoading, router]);\\n  \\n  // Calculate price based on cleaning type, square footage/hours, and additional features\\n  useEffect(() => {\\n    if (!selectedCleaningType) return;\\n    \\n    let basePrice = 0;\\n    const selectedType = cleaningTypes.find(type => type.id === selectedCleaningType);\\n    \\n    if (hourlyMode) {\\n      // Hourly pricing: $50 per hour baseline\\n      basePrice = hours * 50;\\n    } else {\\n      // Square footage pricing based on equations\\n      const sqft = squareFootage;\\n      \\n      if (selectedType) {\\n        switch (selectedType.id) {\\n          case 'standard':\\n            basePrice = 37.4785 + 0.060375 * sqft;\\n            break;\\n          case 'deep':\\n          case 'party':\\n            basePrice = 48.885 + 0.09225 * sqft;\\n            break;\\n          case 'move':\\n            basePrice = 65.18 + 0.123 * sqft;\\n            break;\\n          case 'office':\\n            // Office clean is 15% more than standard\\n            basePrice = (37.4785 + 0.060375 * sqft) * 1.15;\\n            break;\\n          default:\\n            basePrice = 37.4785 + 0.060375 * sqft; // Default to standard\\n        }\\n      }\\n    }\\n    \\n    // Round to integer\\n    basePrice = Math.round(basePrice);\\n    \\n    // Add additional tasks\\n    const additionalTasksPrice = additionalTasks.reduce((sum, task) => {\\n      return sum + (task.price * (task.count > 0 ? task.count : (task.type === 'add' && task.count > 0 ? 1 : 0)));\\n    }, 0);\\n    \\n    // Apply messiness multiplier (each level above 3 adds 5% to the price)\\n    const messinessMultiplier = 1 + Math.max(0, (messiness - 3) * 0.05);\\n    \\n    // Calculate total price with messiness factor\\n    let totalPrice = (basePrice + additionalTasksPrice) * messinessMultiplier;\\n    \\n    // Apply discount based on frequency\\n    const selectedFrequency = frequencies.find(f => f.id === frequency);\\n    if (selectedFrequency && selectedFrequency.discount > 0) {\\n      totalPrice = totalPrice * (1 - selectedFrequency.discount / 100);\\n    }\\n    \\n    // Round to integer\\n    totalPrice = Math.round(totalPrice);\\n    \\n    // Update the current price\\n    setCurrentPrice(totalPrice);\\n    \\n    // Calculate cleaning time\\n    let totalMinutes = 0;\\n    \\n    if (hourlyMode) {\\n      totalMinutes = hours * 60;\\n    } else {\\n      // Base time calculation from square footage (1000 sqft ≈ 2 hours)\\n      totalMinutes = Math.round((squareFootage / 1000) * 120);\\n      \\n      // Minimum 1 hour\\n      totalMinutes = Math.max(60, totalMinutes);\\n    }\\n    \\n    // Add time for additional tasks\\n    const additionalTasksTime = additionalTasks.reduce((sum, task) => {\\n      return sum + (task.time * (task.count > 0 ? task.count : (task.type === 'add' && task.count > 0 ? 1 : 0)));\\n    }, 0);\\n    \\n    totalMinutes += additionalTasksTime;\\n    \\n    // Adjust time based on messiness (each level above 3 adds 10% to the time)\\n    const messinessTimeMultiplier = 1 + Math.max(0, (messiness - 3) * 0.1);\\n    totalMinutes = Math.round(totalMinutes * messinessTimeMultiplier);\\n    \\n    // Update the cleaning time string\\n    const hoursValue = Math.floor(totalMinutes / 60);\\n    const minutes = totalMinutes % 60;\\n    \\n    if (minutes === 0) {\\n      setCleaningTime(`${hours} hours`);\\n    } else {\\n      setCleaningTime(`${hours} hours ${minutes} min`);\\n    }\\n    \\n  }, [selectedCleaningType, squareFootage, hours, hourlyMode, additionalTasks, messiness, frequency]);\\n  \\n  const handleCleaningTypeSelection = (typeId: string) => {\\n    setSelectedCleaningType(typeId);\\n    \\n    // Scroll to square footage section\\n    setTimeout(() => {\\n      if (squareFootageRef.current) {\\n        squareFootageRef.current.scrollIntoView({ behavior: 'smooth', block: 'start' });\\n      }\\n    }, 100);\\n  };\\n  \\n  const toggleHourlyMode = () => {\\n    setHourlyMode(!hourlyMode);\\n  };\\n  \\n  const handleSquareFootageChange = (event: React.ChangeEvent<HTMLInputElement>) => {\\n    const value = parseInt(event.target.value);\\n    if (!isNaN(value)) {\\n      setSquareFootage(value);\\n    }\\n  };\\n  \\n  const handleHoursChange = (event: React.ChangeEvent<HTMLInputElement>) => {\\n    const value = parseInt(event.target.value);\\n    if (!isNaN(value)) {\\n      setHours(value);\\n    }\\n  };\\n  \\n  const handleAdditionalTaskAdd = (taskId: string) => {\\n    setAdditionalTasks(tasks => \\n      tasks.map(task => \\n        task.id === taskId && task.type === 'add' \\n          ? { ...task, count: task.count > 0 ? 0 : 1 } // Toggle on/off\\n          : task\\n      )\\n    );\\n  };\\n  \\n  const handleAdditionalTaskIncrement = (taskId: string) => {\\n    setAdditionalTasks(tasks => \\n      tasks.map(task => \\n        task.id === taskId && task.type === 'count' \\n          ? { ...task, count: task.count + 1 } \\n          : task\\n      )\\n    );\\n  };\\n  \\n  const handleAdditionalTaskDecrement = (taskId: string) => {\\n    setAdditionalTasks(tasks => \\n      tasks.map(task => \\n        task.id === taskId && task.type === 'count' && task.count > 0\\n          ? { ...task, count: task.count - 1 } \\n          : task\\n      )\\n    );\\n  };\\n  \\n  const handleMessinessChange = (level: number) => {\\n    setMessiness(level);\\n  };\\n  \\n  const handleFrequencyChange = (frequencyId: string) => {\\n    setFrequency(frequencyId);\\n     // Show membership popup for recurring plans\\n    if (frequencyId === 'weekly' || frequencyId === 'biweekly' || frequencyId === 'twice-weekly') {\\n      setMembershipFrequency(frequencyId as 'weekly' | 'biweekly' | 'twice-weekly');\\n      setShowMembershipPopup(true);\\n    }\\n  };\\n  \\n  const togglePet = (petType: string) => {\\n    if (pets.includes(petType)) {\\n      setPets(pets.filter(pet => pet !== petType));\\n    } else {\\n      setPets([...pets, petType]);\\n    }\\n  };\\n  \\n  const handleSpecialInstructionsChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\\n    setSpecialInstructions(event.target.value);\\n  };\\n\\n  const handleSaveSupplies = (option: string, supplies: string[]) => {\\n    setSuppliesOption(option);\\n    setSelectedSupplies(supplies);\\n    \\n    // Calculate the discount based on the option\\n    let suppliesDiscount = 0;\\n    if (option === 'i-have-vacuum') {\\n      suppliesDiscount = 20;\\n    } else if (option === 'i-have-all') {\\n      suppliesDiscount = 50;\\n    }\\n    \\n    // Save to state and store\\n    setDetails({\\n      suppliesOption: option,\\n      selectedSupplies: supplies,\\n      suppliesDiscount: suppliesDiscount\\n    });\\n  };\\n  \\n  const handleContinue = () => {\\n\\n    const cleaningTypeId = selectedCleaningType || 'standard';\\n    const selectedType = cleaningTypes.find(type => type.id === selectedCleaningType);\\n    \\n\\n    setService({\\n        serviceId: selectedCleaningType ? selectedCleaningType : 'standard',\\n        serviceName: selectedCleaningType ? cleaningTypes.find(type => type.id === selectedCleaningType)?.name || 'Standard Clean' : 'Standard Clean',\\n        serviceDescription: selectedCleaningType ? cleaningTypes.find(type => type.id === selectedCleaningType)?.description || '' : '',\\n        basePrice: currentPrice\\n    });\\n\\n      // Save additional details\\n      setDetails({\\n        hasPets: pets.length > 0,\\n        messiness: messiness,\\n        frequency: frequency as any, // Type casting to match the expected type\\n        notes: specialInstructions,\\n        suppliesOption: suppliesOption || 'bring-everything',\\n        selectedSupplies: selectedSupplies || []\\n      });\\n    \\n\\n      // Store cleaning time for time slot calculations\\n      localStorage.setItem('cleaningTime', cleaningTime);\\n      setShowSuppliesModal(true);\\n  };\\n\\n  if (isLoading || loading) {\\n    return <FancyLoader visible={true} message=\\\"Loading services...\\\" />;\\n  }\\n\\n  return (\\n    <div className=\\\"min-h-screen bg-white\\\">\\n      <div className=\\\"max-w-md mx-auto\\\">\\n        {/* Header */}\\n        <div className=\\\"py-4 flex items-center border-b border-gray-200 px-4\\\">\\n          <Link href=\\\"/booking/address\\\" className=\\\"mr-2\\\">\\n            <ArrowLeft size={20} className=\\\"text-gray-800\\\" />\\n          </Link>\\n          <h1 className=\\\"text-xl font-semibold\\\">Select Services</h1>\\n        </div>\\n        \\n        <div className=\\\"px-4\\\">\\n          {/* Cleaning Type Selection */}\\n          <div className=\\\"py-4\\\">\\n            <div className=\\\"flex items-center mb-4\\\">\\n              <CheckSquare className=\\\"text-blue-500 mr-2\\\" size={20} />\\n              <h2 className=\\\"text-xl font-semibold text-gray-800\\\">Select Cleaning Type</h2>\\n            </div>\\n            \\n            {/* Service Type Cards */}\\n            <div className=\\\"grid grid-cols-2 gap-3 mb-4\\\">\\n              {cleaningTypes.slice(0, 4).map(type => (\\n                <div \\n                  key={type.id}\\n                  className={`border rounded-lg p-4 cursor-pointer transition-colors ${\\n                    selectedCleaningType === type.id \\n                      ? 'border-blue-500 bg-blue-500 text-white' \\n                      : 'border-gray-200 hover:border-blue-300 hover:scale-105'\\n                  }`}\\n                  onClick={() => handleCleaningTypeSelection(type.id)}\\n                >\\n                  <h3 className=\\\"font-semibold text-lg\\\">{type.name}</h3>\\n                  <p className={`text-sm ${selectedCleaningType === type.id ? 'text-white' : 'text-gray-500'}`}>\\n                    {type.description}\\n                  </p>\\n                  <p className={`font-semibold mt-1 ${selectedCleaningType === type.id ? 'text-white' : 'text-blue-500'}`}>\\n                    ${type.price}\\n                  </p>\\n                </div>\\n              ))}\\n            </div>\\n              \\n            {/* Office Clean */}\\n            <div \\n              className={`border rounded-lg p-4 mb-6 cursor-pointer transition-colors ${\\n                selectedCleaningType === 'office' \\n                  ? 'border-blue-500 bg-blue-50' \\n                  : 'border-gray-200 hover:border-blue-300'\\n              }`}\\n              onClick={() => handleCleaningTypeSelection('office')}\\n            >\\n              <div className=\\\"flex items-start\\\">\\n                <div className=\\\"text-gray-500 mr-3 mt-1\\\">\\n                  <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" strokeWidth=\\\"2\\\" strokeLinecap=\\\"round\\\" strokeLinejoin=\\\"round\\\"><rect x=\\\"3\\\" y=\\\"3\\\" width=\\\"18\\\" height=\\\"18\\\" rx=\\\"2\\\" /><path d=\\\"M8 10a1 1 0 0 1 1-1h6a1 1 0 0 1 1 1v8H8v-8Z\\\" /><path d=\\\"M7 6h.01M11 6h.01M15 6h.01\\\" /></svg>\\n                </div>\\n                <div>\\n                  <h3 className=\\\"font-semibold text-lg\\\">Office Clean</h3>\\n                  <p className=\\\"text-sm text-gray-500\\\">Professional cleaning for workspaces</p>\\n                </div>\\n              </div>\\n            </div>\\n          </div>\\n            {/* Selected Cleaning Type Display */}\\n            {selectedCleaningType === 'office' && (\\n                <div className=\\\"py-4 border-b border-gray-100\\\">\\n                  <div className=\\\"border rounded-lg p-4 bg-blue-50 border-blue-200\\\">\\n                    <div className=\\\"flex items-start\\\">\\n                      <div className=\\\"text-blue-500 mr-3 mt-1\\\">\\n                        <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" strokeWidth=\\\"2\\\" strokeLinecap=\\\"round\\\" strokeLinejoin=\\\"round\\\"><rect x=\\\"3\\\" y=\\\"3\\\" width=\\\"18\\\" height=\\\"18\\\" rx=\\\"2\\\" /><path d=\\\"M8 10a1 1 0 0 1 1-1h6a1 1 0 0 1 1 1v8H8v-8Z\\\" /><path d=\\\"M7 6h.01M11 6h.01M15 6h.01\\\" /></svg>\\n                      </div>\\n                      <div>\\n                        <h3 className=\\\"font-semibold text-lg\\\">Office Clean</h3>\\n                        <p className=\\\"text-sm text-gray-500\\\">Professional cleaning for workspaces</p>\\n                      </div>\\n                    </div>\\n                  </div>\\n                </div>\\n              )}\\n              \\n              {/* Square Footage / Hourly Mode Selection */}\\n              <div className=\\\"py-4 border-b border-gray-100\\\" ref={squareFootageRef}>\\n                <div className=\\\"flex items-center justify-between mb-3\\\">\\n                  <span className=\\\"font-semibold text-lg text-gray-800\\\">\\n                    {hourlyMode ? \\\"Hourly Mode\\\" : \\\"Square Footage Mode\\\"}\\n                  </span>\\n                  <div \\n                    className=\\\"w-14 h-8 bg-blue-100 rounded-full p-1 cursor-pointer flex items-center\\\"\\n                    onClick={toggleHourlyMode}\\n                  >\\n                    <div \\n                      className={`w-6 h-6 rounded-full shadow-md transform transition-transform duration-300 ${\\n                        hourlyMode ? 'bg-green-500 translate-x-6' : 'bg-white'\\n                      }`}\\n                    >\\n                    </div>\\n                  </div>\\n                </div>\\n                \\n                {hourlyMode ? (\\n                  <>\\n                    <p className=\\\"text-gray-600 mb-3\\\">\\n                      Select how many hours you need for cleaning.\\n                    </p>\\n                    <div className=\\\"flex justify-between mb-2 text-sm text-gray-500\\\">\\n                      <span>2 hours</span>\\n                      <span>20 hours</span>\\n                    </div>\\n                    <input \\n                      type=\\\"range\\\" \\n                      min=\\\"2\\\" \\n                      max=\\\"20\\\" \\n                      value={hours} \\n                      onChange={handleHoursChange}\\n                      className=\\\"w-full h-2 bg-blue-100 rounded-lg appearance-none cursor-pointer mb-4\\\"\\n                    />\\n                    <div className=\\\"flex justify-between items-center\\\">\\n                      <span className=\\\"text-xl font-bold text-gray-800\\\">{hours} hours</span>\\n                      <span className=\\\"font-semibold text-gray-700\\\">Current Price: <span className=\\\"text-blue-500\\\">${currentPrice}</span></span>\\n                    </div>\\n                  </>\\n                ) : (\\n                  <>\\n                    <div className=\\\"text-gray-600 mb-3\\\">\\n                      Adjust the size of your space to get an accurate price estimate.\\n                    </div>\\n                    <div className=\\\"flex justify-between mb-2 text-sm text-gray-500\\\">\\n                      <span>100 sq ft</span>\\n                      <span>10,000 sq ft</span>\\n                    </div>\\n                    <input \\n                      type=\\\"range\\\" \\n                      min=\\\"100\\\" \\n                      max=\\\"10000\\\" \\n                      value={squareFootage} \\n                      onChange={handleSquareFootageChange}\\n                      className=\\\"w-full h-2 bg-blue-100 rounded-lg appearance-none cursor-pointer mb-4\\\"\\n                    />\\n                    <div className=\\\"flex justify-between items-center\\\">\\n                      <span className=\\\"text-xl font-bold text-gray-800\\\">{squareFootage} sq ft</span>\\n                      <span className=\\\"font-semibold text-gray-700\\\">Current Price: <span className=\\\"text-blue-500\\\">${currentPrice}</span></span>\\n                    </div>\\n                  </>\\n                )}\\n              </div>\\n              \\n              {/* Max Clean Time */}\\n              <div className=\\\"py-4 border-b border-gray-100\\\">\\n                <div className=\\\"flex items-center mb-3\\\">\\n                  <Clock size={20} className=\\\"text-blue-500 mr-2\\\" />\\n                  <h2 className=\\\"text-lg font-semibold text-gray-800\\\">Max Clean Time</h2>\\n                </div>\\n                \\n                <div className=\\\"flex items-start mb-3\\\">\\n                  <div className=\\\"bg-blue-100 p-3 rounded-full mr-3\\\">\\n                    <Clock size={24} className=\\\"text-blue-500\\\" />\\n                  </div>\\n                  <div>\\n                    <p className=\\\"text-lg font-bold text-blue-500\\\">{cleaningTime}</p>\\n                    <p className=\\\"text-gray-500 text-sm\\\">\\n                      Maximum cleaning time\\n                    </p>\\n                  </div>\\n                </div>\\n                \\n                <p className=\\\"text-gray-500 text-sm italic\\\">\\n                  Note: All cleanings must finish by 6:00 PM. This will limit your available time slots.\\n                </p>\\n              </div>\\n              \\n              {/* Additional Tasks */}\\n              <div className=\\\"py-4 border-b border-gray-100\\\" ref={additionalTasksRef}>\\n                <div className=\\\"flex items-center mb-4\\\">\\n                  <CheckSquare size={20} className=\\\"text-blue-500 mr-2\\\" />\\n                  <h2 className=\\\"text-lg font-semibold text-gray-800\\\">Additional Tasks?</h2>\\n                </div>\\n                \\n                {additionalTasks.map(task => (\\n                  <div key={task.id} className=\\\"py-3 border-b border-gray-100 last:border-b-0\\\">\\n                    <div className=\\\"flex justify-between items-center\\\">\\n                      <div>\\n                        <h3 className=\\\"font-medium text-gray-800\\\">{task.name}</h3>\\n                        <p className=\\\"text-sm text-gray-500\\\">${task.price} {task.type === 'count' ? 'each' : ''}</p>\\n                        <p className=\\\"text-sm text-blue-500\\\">+{task.time} min {task.type === 'count' ? 'each' : ''}</p>\\n                      </div>\\n                      \\n                      {task.type === 'add' ? (\\n                        <button \\n                          className={`px-4 py-2 rounded-md text-sm cursor-pointer ${\\n                            task.count > 0 \\n                              ? 'bg-blue-500 text-white' \\n                              : 'bg-gray-200 text-gray-600'\\n                          }`}\\n                          onClick={() => handleAdditionalTaskAdd(task.id)}\\n                        >\\n                          {task.count > 0 ? 'Added' : 'Add'}\\n                        </button>\\n                      ) : (\\n                        <div className=\\\"flex items-center space-x-4\\\">\\n                          <button\\n                            className=\\\"w-8 h-8 rounded-full bg-gray-200 flex items-center justify-center text-gray-600 cursor-pointer hover:bg-blue-500\\\"\\n                            onClick={() => handleAdditionalTaskDecrement(task.id)}\\n                            disabled={task.count === 0}\\n                          >\\n                            -\\n                          </button>\\n                          <span className=\\\"w-6 text-center\\\">{task.count}</span>\\n                          <button\\n                            className=\\\"w-8 h-8 rounded-full bg-gray-200 flex items-center justify-center text-gray-600 cursor-pointer hover:bg-blue-500\\\"\\n                            onClick={() => handleAdditionalTaskIncrement(task.id)}\\n                          >\\n                            +\\n                          </button>\\n                        </div>\\n                      )}\\n                    </div>\\n                  </div>\\n                ))}\\n              </div>\\n              \\n              {/* Messiness Scale */}\\n              <div className=\\\"py-4 border-b border-gray-100\\\" ref={messinessRef}>\\n                <div className=\\\"flex items-center mb-3\\\">\\n                  <Info className=\\\"text-blue-500 mr-2\\\" size={20} />\\n                  <h2 className=\\\"text-lg font-semibold text-gray-800\\\">How messy is your space?</h2>\\n                </div>\\n                \\n                <p className=\\\"text-gray-600 text-sm mb-4\\\">\\n                  This helps us prepare the right cleaning supplies and allocate enough time.\\n                </p>\\n                \\n                <div className=\\\"mb-2 flex justify-between text-sm text-gray-500\\\">\\n                  <span>Tidy</span>\\n                  <span>Very Messy</span>\\n                </div>\\n                \\n                <div className=\\\"flex justify-between mb-3\\\">\\n                  {[1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(level => {\\n                    let bgColor = '';\\n                    let textColor = '';\\n                    \\n                    if (messiness === level) {\\n                      if (level <= 3) {\\n                        bgColor = 'bg-green-500';\\n                        textColor = 'text-white';\\n                      } else if (level <= 6) {\\n                        bgColor = 'bg-orange-500';\\n                        textColor = 'text-white';\\n                      } else {\\n                        bgColor = 'bg-red-500';\\n                        textColor = 'text-white';\\n                      }\\n                    } else {\\n                      if (level <= 3) {\\n                        bgColor = 'bg-green-200';\\n                        textColor = 'text-green-800';\\n                      } else if (level <= 6) {\\n                        bgColor = 'bg-orange-200';\\n                        textColor = 'text-orange-800';\\n                      } else {\\n                        bgColor = 'bg-red-200';\\n                        textColor = 'text-red-800';\\n                      }\\n                    }\\n                    \\n                    return (\\n                      <button \\n                        key={level}\\n                        className={`w-8 h-8 rounded-full flex items-center justify-center cursor-pointer font-medium ${bgColor} ${textColor}`}\\n                        onClick={() => handleMessinessChange(level)}\\n                      >\\n                        {level}\\n                      </button>\\n                    );\\n                  })}\\n                </div>\\n                \\n                <p className=\\\"text-gray-500 text-sm italic\\\">\\n                  Standard cleaning should be sufficient.\\n                </p>\\n              </div>\\n              \\n              {/* Cleaning Frequency */}\\n              <div className=\\\"py-4 border-b border-gray-100\\\" ref={frequencyRef}>\\n                <div className=\\\"flex items-center mb-3\\\">\\n                  <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 24 24\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" strokeWidth=\\\"2\\\" strokeLinecap=\\\"round\\\" strokeLinejoin=\\\"round\\\" className=\\\"text-blue-500 mr-2\\\"><path d=\\\"M17 2v4\\\" /><path d=\\\"M7 2v4\\\" /><path d=\\\"M17 18a2 2 0 0 1-4 0\\\" /><rect x=\\\"3\\\" y=\\\"6\\\" width=\\\"18\\\" height=\\\"14\\\" rx=\\\"2\\\" /></svg>\\n                  <h2 className=\\\"text-lg font-semibold text-gray-800\\\">How often do you need cleaning?</h2>\\n                </div>\\n                \\n                <div className=\\\"grid grid-cols-2 gap-3 mb-4 \\\">\\n                  {[\\n                    { id: 'one-time', name: 'One-time', description: 'Single cleaning service', discount: 0 },\\n                    { id: 'biweekly', name: 'Biweekly', description: 'Every two weeks', discount: 10 },\\n                    { id: 'weekly', name: 'Weekly', description: 'Once every week', discount: 15 },\\n                    { id: 'twice-weekly', name: 'Twice a week', description: 'Two times per week', discount: 20 }\\n                  ].map(option => (\\n                    <div \\n                      key={option.id}\\n                      className={`border rounded-lg p-3 cursor-pointer transition-colors ${\\n                        frequency === option.id \\n                          ? 'border-blue-500 bg-blue-50' \\n                          : 'border-gray-200 hover:border-blue-300 hover:scale-105'\\n                      }`}\\n                      onClick={() => handleFrequencyChange(option.id)}\\n                    >\\n                      <h3 className={`font-semibold ${frequency === option.id && option.id === 'one-time' ? 'text-blue-500' : 'text-gray-800'}`}>\\n                        {option.name}\\n                      </h3>\\n                      {option.discount > 0 && (\\n                        <p className=\\\"text-green-500 text-sm font-medium\\\">Save {option.discount}%</p>\\n                      )}\\n                      <p className=\\\"text-sm text-gray-500\\\">{option.description}</p>\\n                    </div>\\n                  ))}\\n                </div>\\n              </div>\\n              \\n              {/* Pets */}\\n              <div className=\\\"py-4 border-b border-gray-100\\\" ref={petsRef}>\\n                <div className=\\\"flex items-center mb-3\\\">\\n                  <span className=\\\"text-blue-500 mr-2\\\">🐾</span>\\n                  <h2 className=\\\"text-lg font-semibold text-gray-800\\\">Do you have pets?</h2>\\n                </div>\\n                \\n                <div className=\\\"grid grid-cols-3 gap-3 mb-4\\\">\\n                  <div \\n                    className={`border rounded-lg p-3 text-center cursor-pointer transition-colors ${\\n                      pets.includes('dog') \\n                        ? 'border-blue-500 bg-blue-50' \\n                        : 'border-gray-200 hover:border-blue-300 hover:scale-105'\\n                    }`}\\n                    onClick={() => togglePet('dog')}\\n                  >\\n                    <span className=\\\"text-2xl\\\">🐶</span>\\n                    <p className=\\\"mt-2 text-sm font-medium text-gray-800\\\">Dog</p>\\n                  </div>\\n                  <div \\n                    className={`border rounded-lg p-3 text-center cursor-pointer transition-colors ${\\n                      pets.includes('cat') \\n                        ? 'border-blue-500 bg-blue-50' \\n                        : 'border-gray-200 hover:border-blue-300 hover:scale-105'\\n                    }`}\\n                    onClick={() => togglePet('cat')}\\n                  >\\n                    <span className=\\\"text-2xl\\\">😺</span>\\n                    <p className=\\\"mt-2 text-sm font-medium text-gray-800\\\">Cat</p>\\n                  </div>\\n                  <div \\n                    className={`border rounded-lg p-3 text-center cursor-pointer transition-colors ${\\n                      pets.includes('other') \\n                        ? 'border-blue-500 bg-blue-50' \\n                        : 'border-gray-200 hover:border-blue-300 hover:scale-105'\\n                    }`}\\n                    onClick={() => togglePet('other')}\\n                  >\\n                    <span className=\\\"text-2xl\\\">❓</span>\\n                    <p className=\\\"mt-2 text-sm font-medium text-gray-800\\\">Other</p>\\n                  </div>\\n                </div>\\n              </div>\\n              \\n              {/* Special Instructions */}\\n              <div className=\\\"py-4 border-b border-gray-100\\\">\\n                <div className=\\\"flex items-center mb-3\\\">\\n                  <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 24 24\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" strokeWidth=\\\"2\\\" strokeLinecap=\\\"round\\\" strokeLinejoin=\\\"round\\\" className=\\\"text-blue-500 mr-2\\\"><path d=\\\"M14 3v4a1 1 0 0 0 1 1h4\\\" /><path d=\\\"M17 21h-10a2 2 0 0 1 -2 -2v-14a2 2 0 0 1 2 -2h7l5 5v11a2 2 0 0 1 -2 2z\\\" /><line x1=\\\"9\\\" y1=\\\"9\\\" x2=\\\"10\\\" y2=\\\"9\\\" /><line x1=\\\"9\\\" y1=\\\"13\\\" x2=\\\"15\\\" y2=\\\"13\\\" /><line x1=\\\"9\\\" y1=\\\"17\\\" x2=\\\"15\\\" y2=\\\"17\\\" /></svg>\\n                  <h2 className=\\\"text-lg font-semibold text-gray-800\\\">Special Instructions</h2>\\n                </div>\\n                \\n                <textarea \\n                  className=\\\"w-full p-3 border border-gray-200 rounded-lg h-24 text-gray-700\\\"\\n                  placeholder=\\\"Add any special instructions or notes for the cleaner...\\\"\\n                  value={specialInstructions}\\n                  onChange={handleSpecialInstructionsChange}\\n                />\\n              </div>\\n          \\n          {/* Continue Button */}\\n          <button\\n            className=\\\"w-full py-4 bg-blue-500 text-white rounded-lg text-center font-medium my-8 transition-colors hover:bg-blue-600 hover:scale-105 cursor-pointer\\\"\\n            onClick={handleContinue}\\n          >\\n            Continue\\n          </button>\\n        </div>\\n      </div>\\n      {/* Membership Popup */}\\n      <MembershipPopup \\n        isOpen={showMembershipPopup}\\n        onClose={() => setShowMembershipPopup(false)}\\n        frequency={membershipFrequency}\\n      />\\n      <CleaningSuppliesModal\\n        isOpen={showSuppliesModal}\\n        onClose={() => setShowSuppliesModal(false)}\\n        onSave={(option, supplies) => {\\n          handleSaveSupplies(option, supplies);\\n          // Navigate to the next page after selection\\n          router.push('/booking/datetime');\\n        }}\\n      />\\n    </div>\\n  );\\n}\",\n  \"src/app/booking/summary/page.tsx\": \"'use client';\\n\\nimport { useState, useEffect } from 'react';\\nimport { useRouter } from 'next/navigation';\\nimport { useAuth } from '@/contexts/AuthContext';\\nimport { bookingAPI } from '@/services/api';\\nimport LoadingOverlay from '@/components/ui/LoadingOverlay';\\nimport FancyLoader from '@/components/ui/FancyLoader';\\nimport { ArrowLeft, MapPin, Home, Calendar, Clock, CheckSquare, Package, Info, DollarSign, ChevronRight } from 'lucide-react';\\nimport Link from 'next/link';\\nimport useBookingStore from '@/store/bookingStore';\\n\\nexport default function BookingSummaryPage() {\\n  const [loading, setLoading] = useState(true);\\n  const [processingBooking, setProcessingBooking] = useState(false);\\n  const [error, setError] = useState<string | null>(null);\\n  const { isAuthenticated, isLoading } = useAuth();\\n  const router = useRouter();\\n  \\n  // Booking data state\\n  const [address, setAddress] = useState<any>(null);\\n  const [service, setServiceData] = useState<any>(null);\\n  const [dateTime, setDateTime] = useState<any>(null);\\n  const [cleaningSupplies, setCleaningSupplies] = useState<{\\n    option: string;\\n    supplies: string[];\\n    discount: number;\\n  }>({\\n    option: 'bring-everything',\\n    supplies: [],\\n    discount: 0\\n  });\\n  const [messiness, setMessiness] = useState(3);\\n  const [totalPrice, setTotalPrice] = useState(0);\\n  const [basePrice, setBasePrice] = useState(0);\\n  const [pets, setPets] = useState<string[]>([]);\\n  const [frequency, setFrequency] = useState('one-time');\\n  const [cleaningTime, setCleaningTime] = useState(\\\"2 hours 36 min\\\");\\n  \\n  // Get booking store data\\n  const bookingState = useBookingStore();\\n  const createBooking = useBookingStore(state => state.createBooking);\\n\\n  useEffect(() => {\\n    if (!isLoading && !isAuthenticated) {\\n      router.push('/auth/login');\\n      return;\\n    }\\n\\n    // Load all the booking data from localStorage and store\\n    const loadBookingData = () => {\\n      try {\\n        // Load address\\n        const addressData = localStorage.getItem('bookingAddress');\\n        if (addressData) {\\n          setAddress(JSON.parse(addressData));\\n        } else {\\n          router.push('/booking/address');\\n          return;\\n        }\\n        \\n        // Load service\\n        const serviceData = localStorage.getItem('bookingService');\\n        if (serviceData) {\\n          setServiceData(JSON.parse(serviceData));\\n          setBasePrice(JSON.parse(serviceData).basePrice || 0);\\n        } else {\\n          router.push('/booking/services');\\n          return;\\n        }\\n        \\n        // Load date/time\\n        const dateTimeData = localStorage.getItem('bookingDateTime');\\n        if (dateTimeData) {\\n          setDateTime(JSON.parse(dateTimeData));\\n        } else {\\n          router.push('/booking/datetime');\\n          return;\\n        }\\n\\n        // Get other details from the store or defaults\\n        // Get supplies info\\n        let suppliesOption = 'bring-everything';\\n        let selectedSupplies: string[] = [];\\n        let suppliesDiscount = 0;\\n        \\n        // Try to get from store directly or via any method\\n        if (bookingState.currentBooking) {\\n          // For messiness\\n          if ('messiness' in bookingState.currentBooking) {\\n            setMessiness(bookingState.currentBooking.messiness || 3);\\n          }\\n          \\n          // For pets\\n          if ('hasPets' in bookingState.currentBooking && bookingState.currentBooking.hasPets) {\\n            setPets(['has-pets']);\\n          }\\n          \\n          // For frequency\\n          if ('frequency' in bookingState.currentBooking) {\\n            setFrequency(bookingState.currentBooking.frequency || 'one-time');\\n          }\\n          \\n          // Try to get supplies info from stored details\\n          if (bookingState.currentBooking.notes) {\\n            const notes = bookingState.currentBooking.notes;\\n            if (notes.includes('supplies:')) {\\n              const suppliesInfo = notes.split('supplies:')[1].split(';')[0].trim();\\n              if (suppliesInfo.includes('customer-provides-all')) {\\n                suppliesOption = 'i-have-all';\\n                suppliesDiscount = 50;\\n              } else if (suppliesInfo.includes('customer-provides-vacuum')) {\\n                suppliesOption = 'i-have-vacuum';\\n                suppliesDiscount = 20;\\n              }\\n            }\\n          }\\n        }\\n        \\n        setCleaningSupplies({\\n          option: suppliesOption,\\n          supplies: selectedSupplies,\\n          discount: suppliesDiscount\\n        });\\n        \\n        // Get cleaning time\\n        const storedCleaningTime = localStorage.getItem('cleaningTime');\\n        if (storedCleaningTime) {\\n          setCleaningTime(storedCleaningTime);\\n        }\\n        \\n        // Calculate total price\\n        let total = (basePrice || 0) - suppliesDiscount;\\n        setTotalPrice(Math.max(0, total));\\n      } catch (error) {\\n        console.error('Error loading booking data:', error);\\n        setError('Failed to load booking data');\\n      } finally {\\n        setLoading(false);\\n      }\\n    };\\n\\n    if (isAuthenticated) {\\n      loadBookingData();\\n    }\\n  }, [isAuthenticated, isLoading, router, bookingState, basePrice]);\\n\\n  const handleBookNow = async () => {\\n    setProcessingBooking(true);\\n    setError(null);\\n    \\n    try {\\n      // Prepare any additional booking details in a format the API expects\\n      // For example, encode supplies info in notes field\\n      let notesWithSupplies = '';\\n      if (bookingState.currentBooking && bookingState.currentBooking.notes) {\\n        notesWithSupplies = bookingState.currentBooking.notes;\\n      }\\n      \\n      if (cleaningSupplies.option !== 'bring-everything') {\\n        notesWithSupplies += `; supplies: ${cleaningSupplies.option === 'i-have-all' ? 'customer-provides-all' : 'customer-provides-vacuum'}`;\\n      }\\n      \\n      // Temporarily add the notes\\n      if (notesWithSupplies) {\\n        bookingState.setDetails({\\n          notes: notesWithSupplies\\n        });\\n      }\\n      \\n      const success = await createBooking();\\n      if (success) {\\n        // Clear the booking data from localStorage\\n        localStorage.removeItem('bookingService');\\n        localStorage.removeItem('bookingAddress');\\n        localStorage.removeItem('bookingDateTime');\\n        localStorage.removeItem('cleaningTime');\\n        \\n        // Navigate to bookings page with success message\\n        router.push('/bookings?success=true');\\n      } else {\\n        setError('Failed to create booking. Please try again.');\\n      }\\n    } catch (error) {\\n      console.error('Error creating booking:', error);\\n      setError('Failed to create booking. Please try again.');\\n    } finally {\\n      setProcessingBooking(false);\\n    }\\n  };\\n\\n  if (isLoading || loading) {\\n    return <FancyLoader visible={true} message=\\\"Loading booking details...\\\" />;\\n  }\\n\\n  if (processingBooking) {\\n    return <FancyLoader visible={true} message=\\\"Creating your booking...\\\" />;\\n  }\\n\\n  // Format preferred dates for display\\n  const formatDate = (dateString: string) => {\\n    const date = new Date(dateString);\\n    const days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\\n    \\n    return `${days[date.getDay()]}, ${months[date.getMonth()]} ${date.getDate()}`;\\n  };\\n\\n  return (\\n    <div className=\\\"min-h-screen bg-gray-50\\\">\\n      <div className=\\\"max-w-md mx-auto bg-white\\\">\\n        {/* Header */}\\n        <div className=\\\"py-4 flex items-center border-b border-gray-200 px-4\\\">\\n          <Link href=\\\"/booking/datetime\\\" className=\\\"mr-2\\\">\\n            <ArrowLeft size={20} className=\\\"text-gray-800\\\" />\\n          </Link>\\n          <h1 className=\\\"text-xl font-semibold\\\">Review & Confirm</h1>\\n        </div>\\n        \\n        <div className=\\\"px-4 py-6\\\">\\n          <h2 className=\\\"text-2xl font-bold text-gray-800 mb-1\\\">Review your booking</h2>\\n          <p className=\\\"text-gray-500 mb-6\\\">\\n            Please confirm the details of your cleaning service\\n          </p>\\n          \\n          {error && (\\n            <div className=\\\"mb-4 bg-red-50 border border-red-200 text-red-600 p-3 rounded-lg\\\">\\n              {error}\\n            </div>\\n          )}\\n          \\n          {/* Location Section */}\\n          <div className=\\\"bg-white rounded-lg p-4 mb-4 shadow-sm\\\">\\n            <div className=\\\"flex items-center mb-3\\\">\\n              <MapPin className=\\\"text-blue-500 mr-2\\\" size={20} />\\n              <h2 className=\\\"text-lg font-semibold text-gray-800\\\">Location</h2>\\n            </div>\\n            \\n            {address && (\\n              <Link href=\\\"/booking/address\\\" className=\\\"block\\\">\\n                <div className=\\\"cursor-pointer\\\">\\n                  <h3 className=\\\"font-medium text-gray-800\\\">{address.name}</h3>\\n                  <p className=\\\"text-gray-600\\\">{address.streetAddress}, {address.city}, {address.state} {address.zipCode}</p>\\n                  <p className=\\\"text-gray-600\\\">{address.squareFootage} sq ft</p>\\n                  {address.notes && (\\n                    <p className=\\\"text-gray-500 italic mt-1\\\">Note: {address.notes}</p>\\n                  )}\\n                </div>\\n              </Link>\\n            )}\\n          </div>\\n          \\n          {/* Property Details Section */}\\n          <div className=\\\"bg-white rounded-lg p-4 mb-4 shadow-sm\\\">\\n            <div className=\\\"flex items-center mb-3\\\">\\n              <Home className=\\\"text-blue-500 mr-2\\\" size={20} />\\n              <h2 className=\\\"text-lg font-semibold text-gray-800\\\">Property Details</h2>\\n            </div>\\n            \\n            <div className=\\\"flex justify-between items-center mb-2\\\">\\n              <span className=\\\"text-gray-600\\\">Square Footage:</span>\\n              <span className=\\\"font-medium text-gray-800\\\">{address ? address.squareFootage : 0} sq ft</span>\\n            </div>\\n            \\n            <div className=\\\"flex justify-between items-center\\\">\\n              <span className=\\\"text-gray-600\\\">Messiness Level:</span>\\n              <div className=\\\"flex items-center\\\">\\n                <span className=\\\"font-medium text-gray-800 mr-2\\\">{messiness}/10</span>\\n                <div className={`w-6 h-6 rounded-full flex items-center justify-center font-medium text-white\\n                  ${messiness <= 3 ? 'bg-green-500' : messiness <= 6 ? 'bg-orange-500' : 'bg-red-500'}`}\\n                >\\n                  {messiness}\\n                </div>\\n              </div>\\n            </div>\\n          </div>\\n          \\n          {/* Date & Time Section */}\\n          <div className=\\\"bg-white rounded-lg p-4 mb-4 shadow-sm\\\">\\n            <div className=\\\"flex items-center mb-3\\\">\\n              <Calendar className=\\\"text-blue-500 mr-2\\\" size={20} />\\n              <h2 className=\\\"text-lg font-semibold text-gray-800\\\">Date & Time</h2>\\n            </div>\\n            \\n            <Link href=\\\"/booking/datetime\\\" className=\\\"block\\\">\\n              <div className=\\\"cursor-pointer\\\">\\n                {dateTime && (\\n                  <>\\n                    <div className=\\\"mb-3\\\">\\n                      <p className=\\\"text-gray-600 mb-1\\\">Preferred Dates:</p>\\n                      <div className=\\\"flex items-center\\\">\\n                        <Calendar className=\\\"text-blue-500 mr-2\\\" size={16} />\\n                        <span className=\\\"text-gray-800\\\">{dateTime.preferredDates && dateTime.preferredDates.length > 0 ? formatDate(dateTime.preferredDates[0]) : 'Not specified'}</span>\\n                      </div>\\n                    </div>\\n                    \\n                    <div className=\\\"mb-2\\\">\\n                      <p className=\\\"text-gray-600 mb-1\\\">Preferred Times:</p>\\n                      <div className=\\\"flex items-center\\\">\\n                        <Clock className=\\\"text-blue-500 mr-2\\\" size={16} />\\n                        <span className=\\\"text-gray-800\\\">{dateTime.preferredTimeSlots && dateTime.preferredTimeSlots.length > 0 ? dateTime.preferredTimeSlots[0] : 'Not specified'}</span>\\n                      </div>\\n                    </div>\\n                    \\n                    <div className=\\\"flex justify-between\\\">\\n                      <span className=\\\"text-gray-600\\\">Frequency:</span>\\n                      <span className=\\\"text-gray-800\\\">\\n                        {frequency === 'one-time' ? 'One-time' : \\n                          frequency === 'weekly' ? 'Weekly' : \\n                          frequency === 'biweekly' ? 'Biweekly' : \\n                          'Twice a week'}\\n                      </span>\\n                    </div>\\n                  </>\\n                )}\\n              </div>\\n            </Link>\\n          </div>\\n          \\n          {/* Max Clean Time Section */}\\n          <div className=\\\"bg-white rounded-lg p-4 mb-4 shadow-sm\\\">\\n            <div className=\\\"flex items-center mb-3\\\">\\n              <Clock className=\\\"text-blue-500 mr-2\\\" size={20} />\\n              <h2 className=\\\"text-lg font-semibold text-gray-800\\\">Max Clean Time</h2>\\n            </div>\\n            \\n            <div className=\\\"flex items-start mb-3\\\">\\n              <div className=\\\"bg-blue-100 p-3 rounded-full mr-3\\\">\\n                <Clock size={24} className=\\\"text-blue-500\\\" />\\n              </div>\\n              <div>\\n                <p className=\\\"text-blue-500 text-xl font-bold\\\">{cleaningTime}</p>\\n                <p className=\\\"text-gray-500 text-sm\\\">\\n                  Maximum cleaning time based on your property size and selected services\\n                </p>\\n              </div>\\n            </div>\\n            \\n            <p className=\\\"text-gray-500 text-sm italic\\\">\\n              Note: All cleanings must finish by 6:00 PM. Your selected time slot has been adjusted accordingly.\\n            </p>\\n          </div>\\n          \\n          {/* Services Section */}\\n          <div className=\\\"bg-white rounded-lg p-4 mb-4 shadow-sm\\\">\\n            <div className=\\\"flex items-center mb-3\\\">\\n              <CheckSquare className=\\\"text-blue-500 mr-2\\\" size={20} />\\n              <h2 className=\\\"text-lg font-semibold text-gray-800\\\">Services</h2>\\n            </div>\\n            \\n            <Link href=\\\"/booking/services\\\" className=\\\"block\\\">\\n              <div className=\\\"cursor-pointer\\\">\\n                {service && (\\n                  <>\\n                    <div className=\\\"flex justify-between items-center\\\">\\n                      <div>\\n                        <h3 className=\\\"font-medium text-gray-800\\\">{service.serviceName}</h3>\\n                        <p className=\\\"text-gray-600\\\">{service.serviceDescription}</p>\\n                        <p className=\\\"text-gray-600\\\">{address ? address.squareFootage : 0} sq ft</p>\\n                      </div>\\n                      <span className=\\\"text-blue-500 font-semibold\\\">${basePrice}</span>\\n                    </div>\\n                    \\n                    <div className=\\\"mt-3 pt-3 border-t border-gray-100\\\">\\n                      <p className=\\\"text-gray-500 italic\\\">No additional services selected</p>\\n                    </div>\\n                  </>\\n                )}\\n              </div>\\n            </Link>\\n          </div>\\n          \\n          {/* Supplies & Equipment Section */}\\n          <div className=\\\"bg-white rounded-lg p-4 mb-4 shadow-sm\\\">\\n            <div className=\\\"flex items-center mb-3\\\">\\n              <Package className=\\\"text-blue-500 mr-2\\\" size={20} />\\n              <h2 className=\\\"text-lg font-semibold text-gray-800\\\">Supplies & Equipment</h2>\\n            </div>\\n            \\n            <Link href=\\\"/booking/services\\\" className=\\\"block\\\">\\n              <div className=\\\"cursor-pointer\\\">\\n                <p className=\\\"font-medium text-gray-800 mb-1\\\">\\n                  {cleaningSupplies.option === 'bring-everything' \\n                    ? 'Cleaners bring all supplies' \\n                    : cleaningSupplies.option === 'i-have-vacuum' \\n                      ? 'Customer provides vacuum' \\n                      : 'Customer provides all supplies'}\\n                </p>\\n                \\n                {cleaningSupplies.discount > 0 && (\\n                  <p className=\\\"text-green-500 font-medium mb-3\\\">Discount: -${cleaningSupplies.discount}</p>\\n                )}\\n                \\n                {cleaningSupplies.option === 'i-have-all' && cleaningSupplies.supplies.length > 0 && (\\n                  <>\\n                    <p className=\\\"font-medium text-gray-700 mb-2\\\">Selected Supplies:</p>\\n                    <div className=\\\"grid grid-cols-2 gap-y-2\\\">\\n                      {cleaningSupplies.supplies.map((supply, index) => (\\n                        <div key={index} className=\\\"flex items-center\\\">\\n                          <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" className=\\\"h-4 w-4 text-blue-500 mr-1\\\" viewBox=\\\"0 0 20 20\\\" fill=\\\"currentColor\\\">\\n                            <path fillRule=\\\"evenodd\\\" d=\\\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\\\" clipRule=\\\"evenodd\\\" />\\n                          </svg>\\n                          <span className=\\\"text-gray-700\\\">{supply}</span>\\n                        </div>\\n                      ))}\\n                    </div>\\n                  </>\\n                )}\\n              </div>\\n            </Link>\\n          </div>\\n          \\n          {/* Messiness Level Section */}\\n          <div className=\\\"bg-white rounded-lg p-4 mb-4 shadow-sm\\\">\\n            <div className=\\\"flex items-center mb-3\\\">\\n              <Info className=\\\"text-blue-500 mr-2\\\" size={20} />\\n              <h2 className=\\\"text-lg font-semibold text-gray-800\\\">Messiness Level</h2>\\n            </div>\\n            \\n            <div className=\\\"flex items-center\\\">\\n              <div className={`w-10 h-10 rounded-full flex items-center justify-center font-medium text-white mr-3\\n                ${messiness <= 3 ? 'bg-green-500' : messiness <= 6 ? 'bg-orange-500' : 'bg-red-500'}`}\\n              >\\n                {messiness}\\n              </div>\\n              <p className=\\\"text-gray-700\\\">\\n                Your space is relatively tidy. Standard cleaning should be sufficient.\\n              </p>\\n            </div>\\n          </div>\\n          \\n          {/* Pricing Section */}\\n          <div className=\\\"bg-white rounded-lg p-4 mb-6 shadow-sm\\\">\\n            <div className=\\\"flex items-center mb-3\\\">\\n              <DollarSign className=\\\"text-blue-500 mr-2\\\" size={20} />\\n              <h2 className=\\\"text-lg font-semibold text-gray-800\\\">Pricing</h2>\\n            </div>\\n            \\n            <div className=\\\"mb-2\\\">\\n              <div className=\\\"flex justify-between mb-2\\\">\\n                <span className=\\\"text-gray-700\\\">{service ? service.serviceName : 'Standard Clean'}</span>\\n                <span className=\\\"text-gray-800\\\">${basePrice}</span>\\n              </div>\\n              \\n              {cleaningSupplies.discount > 0 && (\\n                <div className=\\\"flex justify-between mb-2\\\">\\n                  <span className=\\\"text-gray-700\\\">Supplies & Equipment Discount</span>\\n                  <span className=\\\"text-green-500\\\">-${cleaningSupplies.discount}</span>\\n                </div>\\n              )}\\n            </div>\\n            \\n            <div className=\\\"border-t border-gray-200 pt-3 mt-3\\\">\\n              <div className=\\\"flex justify-between\\\">\\n                <span className=\\\"font-semibold text-gray-800\\\">Total</span>\\n                <span className=\\\"font-semibold text-blue-500 text-xl\\\">${totalPrice}</span>\\n              </div>\\n            </div>\\n          </div>\\n          \\n          {/* Action Buttons */}\\n          <div className=\\\"flex space-x-3 mb-8\\\">\\n            <Link href=\\\"/booking/datetime\\\" className=\\\"flex-1\\\">\\n              <button className=\\\"w-full py-4 border border-gray-300 rounded-lg text-center font-medium flex items-center justify-center text-blue-500\\\">\\n                <ArrowLeft size={18} className=\\\"mr-2\\\" /> Back\\n              </button>\\n            </Link>\\n            \\n            <button\\n              className=\\\"flex-1 py-4 bg-blue-500 text-white rounded-lg text-center font-medium transition-colors hover:bg-blue-600\\\"\\n              onClick={handleBookNow}\\n              disabled={processingBooking}\\n            >\\n              Book Now\\n            </button>\\n          </div>\\n        </div>\\n        \\n        {/* Bottom Navigation */}\\n        <div className=\\\"fixed bottom-0 left-0 right-0 h-16 bg-white border-t border-gray-200 flex items-center justify-center\\\">\\n          <Link href=\\\"/\\\" className=\\\"text-blue-500 font-medium flex items-center\\\">\\n            <Home size={18} className=\\\"mr-2\\\" /> Home\\n          </Link>\\n        </div>\\n      </div>\\n    </div>\\n  );\\n}\",\n  \"src/app/bookings/page.tsx\": \"// src/app/bookings/page.tsx\\n'use client';\\n\\nimport { useState, useEffect } from 'react';\\nimport { useRouter } from 'next/navigation';\\nimport { useAuth } from '@/contexts/AuthContext';\\nimport { bookingAPI } from '@/services/api';\\nimport LoadingOverlay from '@/components/ui/LoadingOverlay';\\nimport Button from '@/components/ui/Button';\\nimport Card from '@/components/ui/Card';\\nimport { Calendar, Clock, MapPin, Filter } from 'lucide-react';\\n\\nexport default function BookingsPage() {\\n  const [bookings, setBookings] = useState<any[]>([]);\\n  const [filteredBookings, setFilteredBookings] = useState<any[]>([]);\\n  const [activeFilter, setActiveFilter] = useState<'upcoming' | 'past'>('upcoming');\\n  const [loading, setLoading] = useState(true);\\n  const [error, setError] = useState<string | null>(null);\\n  const { isAuthenticated, isLoading } = useAuth();\\n  const router = useRouter();\\n\\n  useEffect(() => {\\n    if (!isLoading && !isAuthenticated) {\\n      router.push('/login');\\n      return;\\n    }\\n\\n    const fetchBookings = async () => {\\n      try {\\n        const bookingsData = await bookingAPI.getUserBookings();\\n        setBookings(bookingsData);\\n        filterBookings(bookingsData, activeFilter);\\n      } catch (err: any) {\\n        setError('Failed to load bookings');\\n        console.error('Error fetching bookings:', err);\\n      } finally {\\n        setLoading(false);\\n      }\\n    };\\n\\n    if (isAuthenticated) {\\n      fetchBookings();\\n    }\\n  }, [isAuthenticated, isLoading, router, activeFilter]);\\n\\n  const filterBookings = (bookings: any[], filter: 'upcoming' | 'past') => {\\n    const now = new Date();\\n    \\n    if (filter === 'upcoming') {\\n      const upcoming = bookings.filter(booking => {\\n        const bookingDate = new Date(booking.date);\\n        return bookingDate >= now || (booking.status !== 'completed' && booking.status !== 'cancelled');\\n      });\\n      setFilteredBookings(upcoming);\\n    } else {\\n      const past = bookings.filter(booking => {\\n        const bookingDate = new Date(booking.date);\\n        return bookingDate < now || booking.status === 'completed' || booking.status === 'cancelled';\\n      });\\n      setFilteredBookings(past);\\n    }\\n  };\\n\\n  const handleFilterChange = (filter: 'upcoming' | 'past') => {\\n    setActiveFilter(filter);\\n    filterBookings(bookings, filter);\\n  };\\n\\n  // Format date helper function\\n  const formatDate = (dateString: string): string => {\\n    const date = new Date(dateString);\\n    return date.toLocaleDateString('en-US', {\\n      weekday: 'short',\\n      month: 'short', \\n      day: 'numeric'\\n    });\\n  };\\n\\n  // Get status color\\n  const getStatusColor = (status: string): string => {\\n    switch (status.toLowerCase()) {\\n      case 'confirmed':\\n        return 'bg-primary text-white';\\n      case 'pending':\\n        return 'bg-warning text-white';\\n      case 'completed':\\n        return 'bg-success text-white';\\n      case 'cancelled':\\n        return 'bg-error text-white';\\n      default:\\n        return 'bg-grayLight text-text';\\n    }\\n  };\\n\\n  if (isLoading || loading) {\\n    return <LoadingOverlay visible={true} message=\\\"Loading bookings...\\\" />;\\n  }\\n\\n  return (\\n    <div className=\\\"min-h-screen bg-background px-4 py-6 sm:px-6 lg:px-8\\\">\\n      <div className=\\\"max-w-3xl mx-auto\\\">\\n        <div className=\\\"mb-6\\\">\\n          <h1 className=\\\"text-2xl font-bold text-text mb-2\\\">Bookings</h1>\\n          <p className=\\\"text-textLight\\\">View and manage your cleaning services</p>\\n        </div>\\n\\n        <div className=\\\"mb-6 flex justify-between\\\">\\n          <div className=\\\"flex space-x-2\\\">\\n            <Button\\n              title=\\\"Upcoming\\\"\\n              variant={activeFilter === 'upcoming' ? 'primary' : 'outline'}\\n              size=\\\"small\\\"\\n              onClick={() => handleFilterChange('upcoming')}\\n            />\\n            \\n            <Button\\n              title=\\\"Past\\\"\\n              variant={activeFilter === 'past' ? 'primary' : 'outline'}\\n              size=\\\"small\\\"\\n              onClick={() => handleFilterChange('past')}\\n            />\\n          </div>\\n          \\n          <Button\\n            title=\\\"Book New\\\"\\n            variant=\\\"primary\\\"\\n            icon={<Calendar size={16} />}\\n            iconPosition=\\\"left\\\"\\n            size=\\\"small\\\"\\n            onClick={() => router.push('/booking/new')}\\n          />\\n        </div>\\n\\n        {filteredBookings.length > 0 ? (\\n          <div className=\\\"space-y-4\\\">\\n            {filteredBookings.map(booking => (\\n              <Card \\n                key={booking._id} \\n                className=\\\"cursor-pointer hover:shadow-md transition-shadow\\\"\\n                onClick={() => router.push(`/bookings/${booking._id}`)}\\n              >\\n                <div className=\\\"p-4\\\">\\n                  <div className=\\\"flex justify-between items-start mb-3\\\">\\n                    <div>\\n                      <h3 className=\\\"font-semibold text-text\\\">{booking.serviceType?.name || 'Cleaning Service'}</h3>\\n                      <div className=\\\"text-sm text-textLight\\\">\\n                        ${booking.price} • {booking.squareFootage} sq ft\\n                      </div>\\n                    </div>\\n                    <div className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(booking.status)}`}>\\n                      {booking.status.charAt(0).toUpperCase() + booking.status.slice(1)}\\n                    </div>\\n                  </div>\\n                  \\n                  <div className=\\\"space-y-2\\\">\\n                    <div className=\\\"flex items-center\\\">\\n                      <Calendar size={16} className=\\\"text-primary mr-2 flex-shrink-0\\\" />\\n                      <span className=\\\"text-sm text-text\\\">{formatDate(booking.date)}</span>\\n                    </div>\\n                    \\n                    <div className=\\\"flex items-center\\\">\\n                      <Clock size={16} className=\\\"text-primary mr-2 flex-shrink-0\\\" />\\n                      <span className=\\\"text-sm text-text\\\">{booking.timeSlot}</span>\\n                    </div>\\n                    \\n                    <div className=\\\"flex items-center\\\">\\n                      <MapPin size={16} className=\\\"text-primary mr-2 flex-shrink-0\\\" />\\n                      <span className=\\\"text-sm text-text truncate\\\">\\n                        {booking.address?.streetAddress || 'Address not available'}\\n                      </span>\\n                    </div>\\n                  </div>\\n                </div>\\n              </Card>\\n            ))}\\n          </div>\\n        ) : (\\n          <Card className=\\\"p-6 text-center\\\">\\n            <p className=\\\"text-textLight mb-4\\\">\\n              {activeFilter === 'upcoming' \\n                ? \\\"You don't have any upcoming bookings.\\\"\\n                : \\\"You don't have any past bookings.\\\"\\n              }\\n            </p>\\n            {activeFilter === 'upcoming' && (\\n              <Button\\n                title=\\\"Book a Cleaning\\\"\\n                variant=\\\"primary\\\"\\n                onClick={() => router.push('/booking/new')}\\n              />\\n            )}\\n          </Card>\\n        )}\\n      </div>\\n    </div>\\n  );\\n}\",\n\n  \"src/app/globals.css\": \"@import \\\"tailwindcss\\\";\\n\\n:root {\\n  --background: #ffffff;\\n  --foreground: #171717;\\n}\\n\\n@theme inline {\\n  --color-background: var(--background);\\n  --color-foreground: var(--foreground);\\n  --font-sans: var(--font-geist-sans);\\n  --font-mono: var(--font-geist-mono);\\n}\\n\\n/* @media (prefers-color-scheme: dark) { */\\n  /* :root { */\\n    /* --background: #0a0a0a; */\\n    /* --foreground: #ededed; */\\n  /* } */\\n/* } */\\n\\nbody {\\n  background: var(--background);\\n  color: var(--foreground);\\n  font-family: Arial, Helvetica, sans-serif;\\n}\\n\",\n  \"src/app/layout.tsx\": \"// src/app/layout.tsx\\nimport { AuthProvider } from '@/contexts/AuthContext';\\nimport MainLayout from '@/components/layout/MainLayout';\\nimport './globals.css';\\n\\nexport const metadata = {\\n  title: 'HCleanz - Cleaning Services',\\n  description: 'Book professional cleaning services on demand',\\n}\\n\\nexport default function RootLayout({\\n  children,\\n}: {\\n  children: React.ReactNode;\\n}) {\\n  return (\\n    <html lang=\\\"en\\\">\\n      <body>\\n        <AuthProvider>\\n          <MainLayout>{children}</MainLayout>\\n        </AuthProvider>\\n      </body>\\n    </html>\\n  );\\n}\",\n  \"src/app/login/page.tsx\": \"// src/app/login/page.tsx\\n'use client';\\n\\nimport { useState, useEffect } from 'react';\\nimport { useRouter } from 'next/navigation';\\nimport Link from 'next/link';\\nimport { Mail, Lock } from 'lucide-react';\\nimport { useAuth } from '@/contexts/AuthContext';\\nimport Input from '@/components/ui/Input';\\nimport Button from '@/components/ui/Button';\\nimport Card from '@/components/ui/Card';\\nimport LoadingOverlay from '@/components/ui/LoadingOverlay';\\n\\nexport default function LoginPage() {\\n  const [email, setEmail] = useState('');\\n  const [password, setPassword] = useState('');\\n  const [error, setError] = useState<string | null>(null);\\n  const [isSubmitting, setIsSubmitting] = useState(false);\\n  const { login, isLoading } = useAuth();\\n  const router = useRouter();\\n\\n  const handleSubmit = async (e: React.FormEvent) => {\\n    e.preventDefault();\\n    setError(null);\\n    setIsSubmitting(true);\\n\\n    // Simple validation\\n    if (!email || !password) {\\n      setError('Please enter both email and password');\\n      setIsSubmitting(false);\\n      return;\\n    }\\n\\n    try {\\n      await login(email, password);\\n      router.push('/');\\n    } catch (err: any) {\\n      setError(err.response?.data?.message || 'Failed to login. Please check your credentials.');\\n    } finally {\\n      setIsSubmitting(false);\\n    }\\n  };\\n\\n  useEffect(() => {\\n    // Check if there's an auth message to display\\n    const authMessage = sessionStorage.getItem('authMessage');\\n    if (authMessage) {\\n      setError(authMessage);\\n      // Clear the message so it doesn't show again on refresh\\n      sessionStorage.removeItem('authMessage');\\n    }\\n  }, []);\\n\\n  return (\\n    <div className=\\\"min-h-screen bg-background flex items-center justify-center px-4\\\">\\n      <LoadingOverlay visible={isLoading} />\\n      \\n      <Card className=\\\"w-full max-w-md p-6\\\">\\n        <div className=\\\"mb-6 text-center\\\">\\n          <h1 className=\\\"text-2xl font-bold text-text mb-2\\\">Welcome Back</h1>\\n          <p className=\\\"text-textLight\\\">Sign in to your account</p>\\n        </div>\\n        \\n        <form onSubmit={handleSubmit}>\\n          <Input \\n            type=\\\"email\\\"\\n            label=\\\"Email\\\"\\n            placeholder=\\\"Enter your email\\\"\\n            value={email}\\n            onChange={(e) => setEmail(e.target.value)}\\n            leftIcon={<Mail size={20} className=\\\"text-textLight\\\" />}\\n            required\\n          />\\n          \\n          <Input \\n            type=\\\"password\\\"\\n            label=\\\"Password\\\"\\n            placeholder=\\\"Enter your password\\\"\\n            value={password}\\n            onChange={(e) => setPassword(e.target.value)}\\n            leftIcon={<Lock size={20} className=\\\"text-textLight\\\" />}\\n            required\\n          />\\n          \\n          {error && (\\n            <div className=\\\"mb-4 p-3 bg-error bg-opacity-10 text-error rounded-lg text-sm\\\">\\n              {error}\\n            </div>\\n          )}\\n          \\n          <Button \\n            title=\\\"Login\\\" \\n            type=\\\"submit\\\" \\n            variant=\\\"primary\\\" \\n            fullWidth \\n            loading={isSubmitting}\\n            className=\\\"mb-4\\\"\\n          />\\n\\n          <div className=\\\"text-center text-sm text-textLight\\\">\\n            Don&apos;t have an account?{' '}\\n            <Link href=\\\"/register\\\" className=\\\"text-primary hover:underline\\\">\\n              Create Account\\n            </Link>\\n          </div>\\n        </form>\\n      </Card>\\n    </div>\\n  );\\n}\",\n  \"src/app/page.tsx\": \"// src/app/page.tsx\\nimport ProtectedRoute from '@/components/auth/ProtectedRoute';\\nimport Dashboard from '@/components/home/Dashboard';\\n\\nexport default function Home() {\\n  return (\\n    <ProtectedRoute>\\n      <Dashboard />\\n    </ProtectedRoute>\\n  );\\n}\",\n  \"src/app/profile/addresses/edit/[id]/page.tsx\": \"// src/app/profile/addresses/edit/[id]/page.tsx\\n'use client';\\n\\nimport { useState, useEffect } from 'react';\\nimport { useRouter, useParams } from 'next/navigation';\\nimport { addressAPI } from '@/services/api';\\nimport { ArrowLeft } from 'lucide-react';\\nimport Link from 'next/link';\\nimport LoadingOverlay from '@/components/ui/LoadingOverlay';\\n\\nexport default function EditAddressPage() {\\n  const params = useParams();\\n  const addressId = params.id as string;\\n  const router = useRouter();\\n  const [loading, setLoading] = useState(true);\\n  const [error, setError] = useState<string | null>(null);\\n  const [formData, setFormData] = useState({\\n    name: '',\\n    streetAddress: '',\\n    city: '',\\n    state: '',\\n    zipCode: '',\\n    squareFootage: 0,\\n    notes: '',\\n    isDefault: false\\n  });\\n\\n  useEffect(() => {\\n    const fetchAddress = async () => {\\n      try {\\n        setLoading(true);\\n        const addresses = await addressAPI.getUserAddresses();\\n        const address = addresses.find((a: any) => a._id === addressId);\\n        \\n        if (!address) {\\n          setError('Address not found');\\n          return;\\n        }\\n        \\n        setFormData({\\n          name: address.name,\\n          streetAddress: address.streetAddress,\\n          city: address.city,\\n          state: address.state,\\n          zipCode: address.zipCode,\\n          squareFootage: address.squareFootage,\\n          notes: address.notes || '',\\n          isDefault: address.isDefault || false\\n        });\\n      } catch (err) {\\n        console.error('Error fetching address:', err);\\n        setError('Failed to load address details');\\n      } finally {\\n        setLoading(false);\\n      }\\n    };\\n    \\n    fetchAddress();\\n  }, [addressId]);\\n\\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\\n    const { name, value, type } = e.target as HTMLInputElement;\\n    \\n    setFormData(prev => ({\\n      ...prev,\\n      [name]: type === 'checkbox' \\n        ? (e.target as HTMLInputElement).checked \\n        : name === 'squareFootage' \\n          ? parseInt(value) || 0 \\n          : value\\n    }));\\n  };\\n\\n  const handleSubmit = async (e: React.FormEvent) => {\\n    e.preventDefault();\\n    setError(null);\\n    \\n    try {\\n      setLoading(true);\\n      await addressAPI.updateAddress(addressId, formData);\\n      router.push('/booking/address');\\n    } catch (err) {\\n      console.error('Error updating address:', err);\\n      setError('Failed to update address');\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  if (loading) {\\n    return <LoadingOverlay visible={true} message=\\\"Loading address...\\\" />;\\n  }\\n\\n  return (\\n    <div className=\\\"min-h-screen bg-white pb-20\\\">\\n      {/* Header */}\\n      <div className=\\\"border-b border-gray-200\\\">\\n        <div className=\\\"px-4 py-4 flex items-center\\\">\\n          <Link href=\\\"/booking/address\\\" className=\\\"mr-2\\\">\\n            <ArrowLeft size={20} className=\\\"text-gray-800\\\" />\\n          </Link>\\n          <h1 className=\\\"text-lg font-semibold\\\">Edit Address</h1>\\n        </div>\\n      </div>\\n      \\n      {/* Content */}\\n      <div className=\\\"px-4 pt-6 max-w-md mx-auto\\\">\\n        <h2 className=\\\"text-2xl font-bold text-gray-800 mb-6\\\">\\n          Edit Address\\n        </h2>\\n\\n        {error && (\\n          <div className=\\\"mb-4 p-3 bg-red-50 border border-red-200 rounded-lg text-red-600 text-sm\\\">\\n            {error}\\n          </div>\\n        )}\\n        \\n        <form onSubmit={handleSubmit}>\\n          <div className=\\\"space-y-4\\\">\\n            {/* Form fields similar to your Add New Address form */}\\n            <div>\\n              <label className=\\\"block text-sm font-medium text-gray-700 mb-1\\\">\\n                Location Name*\\n              </label>\\n              <input\\n                type=\\\"text\\\"\\n                name=\\\"name\\\"\\n                value={formData.name}\\n                onChange={handleInputChange}\\n                placeholder=\\\"Home, Office, etc.\\\"\\n                className=\\\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\\\"\\n                required\\n              />\\n            </div>\\n            \\n            <div>\\n              <label className=\\\"block text-sm font-medium text-gray-700 mb-1\\\">\\n                Street Address*\\n              </label>\\n              <input\\n                type=\\\"text\\\"\\n                name=\\\"streetAddress\\\"\\n                value={formData.streetAddress}\\n                onChange={handleInputChange}\\n                placeholder=\\\"123 Main St\\\"\\n                className=\\\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\\\"\\n                required\\n              />\\n            </div>\\n            \\n            <div className=\\\"grid grid-cols-2 gap-3\\\">\\n              <div>\\n                <label className=\\\"block text-sm font-medium text-gray-700 mb-1\\\">\\n                  City*\\n                </label>\\n                <input\\n                  type=\\\"text\\\"\\n                  name=\\\"city\\\"\\n                  value={formData.city}\\n                  onChange={handleInputChange}\\n                  placeholder=\\\"City\\\"\\n                  className=\\\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\\\"\\n                  required\\n                />\\n              </div>\\n              <div>\\n                <label className=\\\"block text-sm font-medium text-gray-700 mb-1\\\">\\n                  State*\\n                </label>\\n                <input\\n                  type=\\\"text\\\"\\n                  name=\\\"state\\\"\\n                  value={formData.state}\\n                  onChange={handleInputChange}\\n                  placeholder=\\\"State\\\"\\n                  className=\\\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\\\"\\n                  required\\n                />\\n              </div>\\n            </div>\\n            \\n            <div className=\\\"grid grid-cols-2 gap-3\\\">\\n              <div>\\n                <label className=\\\"block text-sm font-medium text-gray-700 mb-1\\\">\\n                  ZIP Code*\\n                </label>\\n                <input\\n                  type=\\\"text\\\"\\n                  name=\\\"zipCode\\\"\\n                  value={formData.zipCode}\\n                  onChange={handleInputChange}\\n                  placeholder=\\\"12345\\\"\\n                  className=\\\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\\\"\\n                  required\\n                />\\n              </div>\\n              <div>\\n                <label className=\\\"block text-sm font-medium text-gray-700 mb-1\\\">\\n                  Square Footage*\\n                </label>\\n                <input\\n                  type=\\\"number\\\"\\n                  name=\\\"squareFootage\\\"\\n                  value={formData.squareFootage}\\n                  onChange={handleInputChange}\\n                  placeholder=\\\"1000\\\"\\n                  className=\\\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\\\"\\n                  required\\n                />\\n              </div>\\n            </div>\\n            \\n            <div>\\n              <label className=\\\"block text-sm font-medium text-gray-700 mb-1\\\">\\n                Notes (Optional)\\n              </label>\\n              <textarea\\n                name=\\\"notes\\\"\\n                value={formData.notes}\\n                onChange={handleInputChange}\\n                placeholder=\\\"Any special instructions for finding or accessing this location\\\"\\n                className=\\\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 h-24\\\"\\n              />\\n            </div>\\n            \\n            <div className=\\\"flex items-center\\\">\\n              <input\\n                type=\\\"checkbox\\\"\\n                id=\\\"isDefault\\\"\\n                name=\\\"isDefault\\\"\\n                checked={formData.isDefault}\\n                onChange={handleInputChange}\\n                className=\\\"w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500\\\"\\n              />\\n              <label htmlFor=\\\"isDefault\\\" className=\\\"ml-2 block text-sm text-gray-700\\\">\\n                Set as default address\\n              </label>\\n            </div>\\n            \\n            <div className=\\\"flex space-x-3 pt-4\\\">\\n              <button\\n                type=\\\"button\\\"\\n                onClick={() => router.push('/booking/address')}\\n                className=\\\"flex-1 py-3 border border-gray-300 rounded-lg font-medium text-gray-700 hover:bg-gray-50 cursor-pointer\\\"\\n              >\\n                Cancel\\n              </button>\\n              <button\\n                type=\\\"submit\\\"\\n                className=\\\"flex-1 py-3 bg-blue-500 text-white rounded-lg font-medium hover:bg-blue-600 cursor-pointer\\\"\\n              >\\n                Save Changes\\n              </button>\\n            </div>\\n          </div>\\n        </form>\\n      </div>\\n    </div>\\n  );\\n}\",\n  \"src/app/profile/addresses/page.tsx\": \"// src/app/profile/addresses/page.tsx\\n'use client';\\n\\nimport { useState, useEffect } from 'react';\\nimport { useRouter } from 'next/navigation';\\nimport { useAuth } from '@/contexts/AuthContext';\\nimport { addressAPI } from '@/services/api';\\nimport LoadingOverlay from '@/components/ui/LoadingOverlay';\\nimport Button from '@/components/ui/Button';\\nimport AddressCard from '@/components/ui/AddressCard';\\nimport { Plus } from 'lucide-react';\\n\\nexport default function AddressesPage() {\\n  const [addresses, setAddresses] = useState<any[]>([]);\\n  const [loading, setLoading] = useState(true);\\n  const [error, setError] = useState<string | null>(null);\\n  const { isAuthenticated, isLoading } = useAuth();\\n  const router = useRouter();\\n\\n  useEffect(() => {\\n    if (!isLoading && !isAuthenticated) {\\n      router.push('/login');\\n      return;\\n    }\\n\\n    const fetchAddresses = async () => {\\n      try {\\n        const addressesData = await addressAPI.getUserAddresses();\\n        setAddresses(addressesData);\\n      } catch (err: any) {\\n        setError('Failed to load addresses');\\n        console.error('Error fetching addresses:', err);\\n      } finally {\\n        setLoading(false);\\n      }\\n    };\\n\\n    if (isAuthenticated) {\\n      fetchAddresses();\\n    }\\n  }, [isAuthenticated, isLoading, router]);\\n\\n  const handleEditAddress = (addressId: string) => {\\n    router.push(`/profile/addresses/edit/${addressId}`);\\n  };\\n\\n  const handleDeleteAddress = async (addressId: string) => {\\n    if (!window.confirm('Are you sure you want to delete this address?')) {\\n      return;\\n    }\\n\\n    try {\\n      await addressAPI.deleteAddress(addressId);\\n      setAddresses(addresses.filter(address => address._id !== addressId));\\n    } catch (err: any) {\\n      setError('Failed to delete address');\\n      console.error('Error deleting address:', err);\\n    }\\n  };\\n\\n  if (isLoading || loading) {\\n    return <LoadingOverlay visible={true} message=\\\"Loading addresses...\\\" />;\\n  }\\n\\n  return (\\n    <div className=\\\"min-h-screen bg-background px-4 py-6 sm:px-6 lg:px-8\\\">\\n      <div className=\\\"max-w-3xl mx-auto\\\">\\n        <div className=\\\"mb-6\\\">\\n          <h1 className=\\\"text-2xl font-bold text-text mb-2\\\">My Addresses</h1>\\n          <p className=\\\"text-textLight\\\">Manage your saved addresses</p>\\n        </div>\\n\\n        <div className=\\\"mb-6\\\">\\n          <Button\\n            title=\\\"Add New Address\\\"\\n            variant=\\\"primary\\\"\\n            icon={<Plus size={18} />}\\n            iconPosition=\\\"left\\\"\\n            onClick={() => router.push('/profile/addresses/new')}\\n            fullWidth\\n          />\\n        </div>\\n\\n        {error && (\\n          <div className=\\\"mb-4 p-3 bg-error bg-opacity-10 text-error rounded-lg text-sm\\\">\\n            {error}\\n          </div>\\n        )}\\n\\n        {addresses.length > 0 ? (\\n          <div className=\\\"space-y-4\\\">\\n            {addresses.map(address => (\\n              <AddressCard\\n                key={address._id}\\n                address={address}\\n                onEdit={() => handleEditAddress(address._id)}\\n                onDelete={() => handleDeleteAddress(address._id)}\\n              />\\n            ))}\\n          </div>\\n        ) : (\\n          <div className=\\\"text-center p-6 bg-white rounded-lg shadow\\\">\\n            <p className=\\\"text-textLight mb-4\\\">You don't have any saved addresses yet.</p>\\n          </div>\\n        )}\\n      </div>\\n    </div>\\n  );\\n}\",\n  \"src/app/profile/page.tsx\": \"// src/app/profile/page.tsx\\n'use client';\\n\\nimport { useRouter } from 'next/navigation';\\nimport { useAuth } from '@/contexts/AuthContext';\\nimport LoadingOverlay from '@/components/ui/LoadingOverlay';\\nimport Button from '@/components/ui/Button';\\nimport Card from '@/components/ui/Card';\\nimport { User, MapPin, CreditCard, Settings, LogOut } from 'lucide-react';\\n\\nexport default function ProfilePage() {\\n  const { user, isLoading, isAuthenticated, logout } = useAuth();\\n  const router = useRouter();\\n\\n  if (isLoading) {\\n    return <LoadingOverlay visible={true} message=\\\"Loading profile...\\\" />;\\n  }\\n\\n  if (!isAuthenticated) {\\n    router.push('/login');\\n    return null;\\n  }\\n\\n  const handleLogout = () => {\\n    logout();\\n    router.push('/login');\\n  };\\n\\n  return (\\n    <div className=\\\"min-h-screen bg-background px-4 py-6 sm:px-6 lg:px-8\\\">\\n      <div className=\\\"max-w-3xl mx-auto\\\">\\n        <div className=\\\"mb-6\\\">\\n          <h1 className=\\\"text-2xl font-bold text-text mb-2\\\">Profile</h1>\\n          <p className=\\\"text-textLight\\\">Manage your account</p>\\n        </div>\\n\\n        <Card className=\\\"mb-6 p-6\\\">\\n          <div className=\\\"flex items-center mb-4\\\">\\n            <div className=\\\"w-16 h-16 rounded-full bg-primary bg-opacity-10 flex items-center justify-center mr-4\\\">\\n              <span className=\\\"text-xl font-bold text-primary\\\">\\n                {user?.firstName?.charAt(0)}{user?.lastName?.charAt(0)}\\n              </span>\\n            </div>\\n            \\n            <div>\\n              <h2 className=\\\"text-xl font-semibold text-text\\\">\\n                {user?.firstName} {user?.lastName}\\n              </h2>\\n              <p className=\\\"text-textLight\\\">{user?.email}</p>\\n              {user?.phone && <p className=\\\"text-textLight\\\">{user?.phone}</p>}\\n            </div>\\n          </div>\\n          \\n          <Button\\n            title=\\\"Edit Profile\\\"\\n            variant=\\\"outline\\\"\\n            icon={<Settings size={16} />}\\n            iconPosition=\\\"left\\\"\\n            onClick={() => router.push('/profile/edit')}\\n            fullWidth\\n          />\\n        </Card>\\n\\n        <div className=\\\"space-y-4 mb-6\\\">\\n          <Card \\n            className=\\\"p-4 flex items-center cursor-pointer hover:shadow-md transition-shadow\\\"\\n            onClick={() => router.push('/profile/addresses')}\\n          >\\n            <div className=\\\"w-10 h-10 rounded-full bg-primary bg-opacity-10 flex items-center justify-center mr-4\\\">\\n              <MapPin size={20} className=\\\"text-primary\\\" />\\n            </div>\\n            <div>\\n              <h3 className=\\\"font-medium text-text\\\">My Addresses</h3>\\n              <p className=\\\"text-sm text-textLight\\\">Manage your addresses</p>\\n            </div>\\n          </Card>\\n          \\n          <Card \\n            className=\\\"p-4 flex items-center cursor-pointer hover:shadow-md transition-shadow\\\"\\n            onClick={() => router.push('/profile/payment')}\\n          >\\n            <div className=\\\"w-10 h-10 rounded-full bg-primary bg-opacity-10 flex items-center justify-center mr-4\\\">\\n              <CreditCard size={20} className=\\\"text-primary\\\" />\\n            </div>\\n            <div>\\n              <h3 className=\\\"font-medium text-text\\\">Payment Methods</h3>\\n              <p className=\\\"text-sm text-textLight\\\">Manage your payment options</p>\\n            </div>\\n          </Card>\\n        </div>\\n\\n        <Button\\n          title=\\\"Log Out\\\"\\n          variant=\\\"ghost\\\"\\n          icon={<LogOut size={16} />}\\n          iconPosition=\\\"left\\\"\\n          onClick={handleLogout}\\n          fullWidth\\n          className=\\\"text-error hover:text-error\\\"\\n        />\\n      </div>\\n    </div>\\n  );\\n}\",\n  \"src/app/register/page.tsx\": \"// src/app/register/page.tsx\\n'use client';\\n\\nimport { useState } from 'react';\\nimport { useRouter } from 'next/navigation';\\nimport Link from 'next/link';\\nimport { Mail, Lock, User, Phone, Sparkles } from 'lucide-react';\\nimport { useAuth } from '@/contexts/AuthContext';\\nimport Input from '@/components/ui/Input';\\nimport Button from '@/components/ui/Button';\\nimport Card from '@/components/ui/Card';\\nimport LoadingOverlay from '@/components/ui/LoadingOverlay';\\n\\nexport default function RegisterPage() {\\n  const [firstName, setFirstName] = useState('');\\n  const [lastName, setLastName] = useState('');\\n  const [email, setEmail] = useState('');\\n  const [phone, setPhone] = useState('');\\n  const [password, setPassword] = useState('');\\n  const [confirmPassword, setConfirmPassword] = useState('');\\n  const [role, setRole] = useState<'customer' | 'cleaner'>('customer');\\n  const [error, setError] = useState<string | null>(null);\\n  const [isSubmitting, setIsSubmitting] = useState(false);\\n  const { register, isLoading } = useAuth();\\n  const router = useRouter();\\n\\n  const handleSubmit = async (e: React.FormEvent) => {\\n    e.preventDefault();\\n    setError(null);\\n    setIsSubmitting(true);\\n\\n    // Simple validation\\n    if (!firstName || !lastName || !email || !password) {\\n      setError('Please fill in all required fields');\\n      setIsSubmitting(false);\\n      return;\\n    }\\n\\n    if (password !== confirmPassword) {\\n      setError('Passwords do not match');\\n      setIsSubmitting(false);\\n      return;\\n    }\\n\\n    try {\\n      await register({ firstName, lastName, email, phone, password, role });\\n      router.push('/');\\n    } catch (err: any) {\\n      setError(err.response?.data?.message || 'Failed to register. Please try again.');\\n    } finally {\\n      setIsSubmitting(false);\\n    }\\n  };\\n\\n  return (\\n    <div className=\\\"min-h-screen bg-background flex items-center justify-center px-4 py-8\\\">\\n      <LoadingOverlay visible={isLoading} />\\n      \\n      <Card className=\\\"w-full max-w-md p-6\\\">\\n        <div className=\\\"mb-6 text-center\\\">\\n          <h1 className=\\\"text-2xl font-bold text-text mb-2\\\">Create Account</h1>\\n          <p className=\\\"text-textLight\\\">Sign up to get started</p>\\n        </div>\\n        \\n        <form onSubmit={handleSubmit}>\\n          <div className=\\\"grid grid-cols-2 gap-4\\\">\\n            <Input \\n              type=\\\"text\\\"\\n              label=\\\"First Name\\\"\\n              placeholder=\\\"Enter first name\\\"\\n              value={firstName}\\n              onChange={(e) => setFirstName(e.target.value)}\\n              leftIcon={<User size={20} className=\\\"text-textLight\\\" />}\\n              required\\n            />\\n            \\n            <Input \\n              type=\\\"text\\\"\\n              label=\\\"Last Name\\\"\\n              placeholder=\\\"Enter last name\\\"\\n              value={lastName}\\n              onChange={(e) => setLastName(e.target.value)}\\n              leftIcon={<User size={20} className=\\\"text-textLight\\\" />}\\n              required\\n            />\\n          </div>\\n          \\n          <Input \\n            type=\\\"email\\\"\\n            label=\\\"Email\\\"\\n            placeholder=\\\"Enter your email\\\"\\n            value={email}\\n            onChange={(e) => setEmail(e.target.value)}\\n            leftIcon={<Mail size={20} className=\\\"text-textLight\\\" />}\\n            required\\n          />\\n          \\n          <Input \\n            type=\\\"tel\\\"\\n            label=\\\"Phone (optional)\\\"\\n            placeholder=\\\"Enter your phone number\\\"\\n            value={phone}\\n            onChange={(e) => setPhone(e.target.value)}\\n            leftIcon={<Phone size={20} className=\\\"text-textLight\\\" />}\\n          />\\n          \\n          <Input \\n            type=\\\"password\\\"\\n            label=\\\"Password\\\"\\n            placeholder=\\\"Create a password\\\"\\n            value={password}\\n            onChange={(e) => setPassword(e.target.value)}\\n            leftIcon={<Lock size={20} className=\\\"text-textLight\\\" />}\\n            required\\n          />\\n          \\n          <Input \\n            type=\\\"password\\\"\\n            label=\\\"Confirm Password\\\"\\n            placeholder=\\\"Confirm your password\\\"\\n            value={confirmPassword}\\n            onChange={(e) => setConfirmPassword(e.target.value)}\\n            leftIcon={<Lock size={20} className=\\\"text-textLight\\\" />}\\n            required\\n          />\\n          \\n          <div className=\\\"mb-4\\\">\\n            <label className=\\\"block text-sm font-medium text-text mb-2\\\">I am a:</label>\\n            <div className=\\\"flex space-x-4\\\">\\n              <div \\n                className={`flex-1 p-3 border rounded-lg cursor-pointer transition-colors ${\\n                  role === 'customer' \\n                    ? 'border-primary bg-primary bg-opacity-5' \\n                    : 'border-border'\\n                }`}\\n                onClick={() => setRole('customer')}\\n              >\\n                <div className=\\\"text-center\\\">\\n                  <User size={24} className=\\\"mx-auto mb-2 text-primary\\\" />\\n                  <span className={role === 'customer' ? 'text-primary font-medium' : 'text-text'}>\\n                    Customer\\n                  </span>\\n                </div>\\n              </div>\\n              \\n              <div \\n                className={`flex-1 p-3 border rounded-lg cursor-pointer transition-colors ${\\n                  role === 'cleaner' \\n                    ? 'border-primary bg-primary bg-opacity-5' \\n                    : 'border-border'\\n                }`}\\n                onClick={() => setRole('cleaner')}\\n              >\\n                <div className=\\\"text-center\\\">\\n                  <Sparkles size={24} className=\\\"mx-auto mb-2 text-primary\\\" />\\n                  <span className={role === 'cleaner' ? 'text-primary font-medium' : 'text-text'}>\\n                    Cleaner\\n                  </span>\\n                </div>\\n              </div>\\n            </div>\\n          </div>\\n          \\n          {error && (\\n            <div className=\\\"mb-4 p-3 bg-error bg-opacity-10 text-error rounded-lg text-sm\\\">\\n              {error}\\n            </div>\\n          )}\\n          \\n          <Button \\n            title=\\\"Create Account\\\" \\n            type=\\\"submit\\\" \\n            variant=\\\"primary\\\" \\n            fullWidth \\n            loading={isSubmitting}\\n            className=\\\"mb-4\\\"\\n          />\\n\\n          <div className=\\\"text-center text-sm text-textLight\\\">\\n            Already have an account?{' '}\\n            <Link href=\\\"/login\\\" className=\\\"text-primary hover:underline\\\">\\n              Sign In\\n            </Link>\\n          </div>\\n        </form>\\n      </Card>\\n    </div>\\n  );\\n}\",\n  \"src/components/auth/ProtectedRoute.tsx\": \"// src/components/auth/ProtectedRoute.tsx\\n'use client';\\n\\nimport { useEffect } from 'react';\\nimport { useRouter } from 'next/navigation';\\nimport { useAuth } from '@/contexts/AuthContext';\\n\\nexport default function ProtectedRoute({ children }: { children: React.ReactNode }) {\\n  const { isAuthenticated, isLoading } = useAuth();\\n  const router = useRouter();\\n\\n  useEffect(() => {\\n    if (!isLoading && !isAuthenticated) {\\n      router.push('/login');\\n    }\\n  }, [isAuthenticated, isLoading, router]);\\n\\n  if (isLoading) {\\n    return (\\n      <div className=\\\"fixed inset-0 bg-white flex items-center justify-center z-50\\\">\\n        <div className=\\\"w-12 h-12 border-4 border-primary border-t-transparent rounded-full animate-spin\\\"></div>\\n      </div>\\n    );\\n  }\\n\\n  if (!isAuthenticated) {\\n    return null; // Will redirect in useEffect\\n  }\\n\\n  return <>{children}</>;\\n}\",\n  \"src/components/home/Dashboard.tsx\": \"// src/components/home/Dashboard.tsx\\n'use client';\\n\\nimport { useState, useEffect, useRef } from 'react';\\nimport { useRouter } from 'next/navigation';\\nimport Link from 'next/link';\\nimport { useAuth } from '@/contexts/AuthContext';\\nimport { bookingAPI, serviceAPI } from '@/services/api';\\nimport { \\n  Home, \\n  Plus, \\n  Sparkles, \\n  Briefcase, \\n  PartyPopper,\\n  ChevronLeft,\\n  ChevronRight\\n} from 'lucide-react';\\n\\nexport default function Dashboard() {\\n  const { isAuthenticated, isLoading, user } = useAuth();\\n  const [bookings, setBookings] = useState<any[]>([]);\\n  const [services, setServices] = useState<any[]>([]);\\n  const [loading, setLoading] = useState(true);\\n  const [selectedServiceId, setSelectedServiceId] = useState<string | null>(null);\\n  const [autoScrollEnabled, setAutoScrollEnabled] = useState(true);\\n  const carouselRef = useRef<HTMLDivElement>(null);\\n  const autoScrollTimerRef = useRef<NodeJS.Timeout | null>(null);\\n  const router = useRouter();\\n\\n  useEffect(() => {\\n    if (!isLoading && !isAuthenticated) {\\n      router.push('/login');\\n      return;\\n    }\\n\\n    const fetchData = async () => {\\n      if (!isAuthenticated) return;\\n      \\n      setLoading(true);\\n      try {\\n        // Fetch real bookings from API\\n        const bookingsData = await bookingAPI.getUserBookings();\\n        setBookings(bookingsData);\\n        \\n        // Fetch real services from API\\n        const servicesData = await serviceAPI.getServices();\\n        setServices(servicesData);\\n      } catch (err) {\\n        console.error('Error fetching data:', err);\\n      } finally {\\n        setLoading(false);\\n      }\\n    };\\n\\n    if (isAuthenticated) {\\n      fetchData();\\n    }\\n  }, [isAuthenticated, isLoading, router]);\\n\\n  // Auto-scrolling functionality\\n  useEffect(() => {\\n    if (!autoScrollEnabled || !carouselRef.current || services.length <= 2) return;\\n\\n    const scrollRight = () => {\\n      if (!carouselRef.current) return;\\n      \\n      const { scrollLeft, scrollWidth, clientWidth } = carouselRef.current;\\n      const newScrollLeft = scrollLeft + 300;\\n      \\n      if (scrollLeft + clientWidth >= scrollWidth - 10) {\\n        // If we're at the end, scroll back to the beginning\\n        carouselRef.current.scrollTo({ left: 0, behavior: 'smooth' });\\n      } else {\\n        // Otherwise, continue scrolling right\\n        carouselRef.current.scrollTo({ left: newScrollLeft, behavior: 'smooth' });\\n      }\\n    };\\n\\n    // Set up the auto-scroll timer\\n    autoScrollTimerRef.current = setInterval(scrollRight, 3000);\\n\\n    return () => {\\n      if (autoScrollTimerRef.current) {\\n        clearInterval(autoScrollTimerRef.current);\\n      }\\n    };\\n  }, [autoScrollEnabled, services.length]);\\n\\n  // Handle manual scrolling - pause auto-scroll when user interacts\\n  const handleManualScroll = () => {\\n    setAutoScrollEnabled(false);\\n    \\n    // Resume auto-scroll after 8 seconds of inactivity\\n    if (autoScrollTimerRef.current) {\\n      clearTimeout(autoScrollTimerRef.current);\\n    }\\n    \\n    autoScrollTimerRef.current = setTimeout(() => {\\n      setAutoScrollEnabled(true);\\n    }, 8000);\\n  };\\n\\n  // Scroll control functions\\n  const scrollLeft = () => {\\n    if (!carouselRef.current) return;\\n    const newScrollLeft = carouselRef.current.scrollLeft - 300;\\n    carouselRef.current.scrollTo({ left: newScrollLeft, behavior: 'smooth' });\\n    handleManualScroll();\\n  };\\n\\n  const scrollRight = () => {\\n    if (!carouselRef.current) return;\\n    const newScrollLeft = carouselRef.current.scrollLeft + 300;\\n    carouselRef.current.scrollTo({ left: newScrollLeft, behavior: 'smooth' });\\n    handleManualScroll();\\n  };\\n\\n  // Handle loading state\\n  if (isLoading || loading) {\\n    return (\\n      <div className=\\\"fixed inset-0 bg-white flex items-center justify-center z-50\\\">\\n        <div className=\\\"w-12 h-12 border-4 border-primary border-t-transparent rounded-full animate-spin\\\"></div>\\n      </div>\\n    );\\n  }\\n\\n  if (!isAuthenticated) {\\n    return null; // Will redirect in useEffect\\n  }\\n\\n  // Filter upcoming bookings\\n  const upcomingBookings = bookings.filter(booking => \\n    booking.status === 'confirmed' || booking.status === 'pending'\\n  );\\n\\n  // Get service color based on service name or icon property\\n  const getServiceColor = (service: any) => {\\n    if (service.icon === 'sparkles' || service.name.includes('Deep')) \\n      return 'bg-blue-500';\\n    if (service.icon === 'briefcase' || service.name.includes('Move')) \\n      return 'bg-purple-500';\\n    if (service.icon === 'party' || service.name.includes('Party')) \\n      return 'bg-pink-500';\\n    return 'bg-green-500';\\n  };\\n\\n  // Get icon based on service name or icon property\\n  const getServiceIcon = (service: any) => {\\n    if (service.icon === 'sparkles' || service.name.includes('Deep')) \\n      return <Sparkles size={32} className=\\\"text-white\\\" />;\\n    if (service.icon === 'briefcase' || service.name.includes('Move')) \\n      return <Briefcase size={32} className=\\\"text-white\\\" />;\\n    if (service.icon === 'party' || service.name.includes('Party')) \\n      return <PartyPopper size={32} className=\\\"text-white\\\" />;\\n    return <Home size={32} className=\\\"text-white\\\" />;\\n  };\\n\\n  const handleServiceSelect = (service: any) => {\\n    setSelectedServiceId(service._id);\\n    \\n    // Store the selected service in localStorage\\n    localStorage.setItem('bookingService', JSON.stringify({\\n      serviceId: service._id,\\n      serviceName: service.name,\\n      serviceDescription: service.description || '',\\n      basePrice: service.basePrice || 120,\\n      estimatedPrice: service.basePrice || 120\\n    }));\\n  };\\n\\n  const handleContinueToAddress = () => {\\n    if (selectedServiceId) {\\n      // Navigate to address selection\\n      router.push('/booking/address');\\n    } else if (services.length > 0) {\\n      // If no service selected, select the first one and continue\\n      handleServiceSelect(services[0]);\\n      router.push('/booking/address');\\n    } else {\\n      // If no services available, go to service selection page\\n      router.push('/booking/services');\\n    }\\n  };\\n\\n  return (\\n    <div>\\n      {/* Header */}\\n      <div className=\\\"border-b\\\">\\n        <div className=\\\"px-4 py-3\\\">\\n          <h1 className=\\\"text-lg font-medium\\\">Home</h1>\\n        </div>\\n      </div>\\n      \\n      {/* Welcome Section */}\\n      <div className=\\\"px-4 pt-4 pb-3\\\">\\n        <h2 className=\\\"text-xl font-bold text-gray-800\\\">\\n          Hello, {user?.firstName || 'test'}!\\n        </h2>\\n        <p className=\\\"text-gray-500 mt-1\\\">Ready to book a cleaning service?</p>\\n      </div>\\n\\n      {/* Book a Cleaning Button - Always enabled */}\\n      <div className=\\\"px-4 pb-6\\\">\\n        <button \\n          className=\\\"w-full bg-[#3498db] text-white rounded-md py-3 px-4 flex items-center justify-center font-medium hover:bg-blue-600 transition-colors cursor-pointer\\\"\\n          onClick={handleContinueToAddress}\\n        >\\n          <Plus size={20} className=\\\"mr-2\\\" />\\n          Book a Cleaning Service\\n        </button>\\n      </div>\\n\\n      {/* Cleaning Services Carousel Section */}\\n      <div className=\\\"px-4 pb-6\\\">\\n        <div className=\\\"flex items-center justify-between mb-4\\\">\\n          <h3 className=\\\"text-lg font-semibold\\\">Cleaning Services</h3>\\n          <div className=\\\"flex space-x-2\\\">\\n            <button \\n              onClick={scrollLeft} \\n              className=\\\"bg-gray-100 hover:bg-gray-200 p-1.5 rounded-full transition-colors\\\"\\n            >\\n              <ChevronLeft size={18} />\\n            </button>\\n            <button \\n              onClick={scrollRight} \\n              className=\\\"bg-gray-100 hover:bg-gray-200 p-1.5 rounded-full transition-colors\\\"\\n            >\\n              <ChevronRight size={18} />\\n            </button>\\n          </div>\\n        </div>\\n        \\n        {services.length > 0 ? (\\n          <div className=\\\"relative\\\">\\n            <div \\n              ref={carouselRef}\\n              className=\\\"flex overflow-x-auto scrollbar-hide snap-x snap-mandatory py-2 -mx-1 px-1 space-x-4\\\"\\n              style={{ scrollbarWidth: 'none', msOverflowStyle: 'none' }}\\n              onScroll={handleManualScroll}\\n            >\\n              {services.map((service) => (\\n                <div \\n                  key={service._id}\\n                  className={`snap-center flex-shrink-0 w-64 h-36 rounded-xl shadow-md overflow-hidden cursor-pointer transition-transform transform hover:scale-105 ${\\n                    selectedServiceId === service._id ? 'ring-3 ring-blue-400' : ''\\n                  }`}\\n                  onClick={() => handleServiceSelect(service)}\\n                >\\n                  <div className={`h-full w-full p-4 flex flex-col justify-between ${getServiceColor(service)} text-white`}>\\n                    <div className=\\\"bg-white/20 rounded-full p-2 w-fit\\\">\\n                      {getServiceIcon(service)}\\n                    </div>\\n                    <div>\\n                      <h3 className=\\\"text-lg font-bold mb-1\\\">{service.name}</h3>\\n                      <p className=\\\"text-sm opacity-90 line-clamp-2\\\">{service.description || 'Professional cleaning service'}</p>\\n                      <div className=\\\"mt-1 font-bold\\\">${service.basePrice || 120}</div>\\n                    </div>\\n                  </div>\\n                </div>\\n              ))}\\n            </div>\\n          </div>\\n        ) : (\\n          <div className=\\\"py-4 text-center text-gray-500\\\">\\n            Loading services...\\n          </div>\\n        )}\\n        \\n        {/* Add this to your global CSS */}\\n        <style jsx global>{`\\n          .scrollbar-hide::-webkit-scrollbar {\\n            display: none;\\n          }\\n          .scrollbar-hide {\\n            -ms-overflow-style: none;\\n            scrollbar-width: none;\\n          }\\n          .line-clamp-2 {\\n            display: -webkit-box;\\n            -webkit-line-clamp: 2;\\n            -webkit-box-orient: vertical;\\n            overflow: hidden;\\n          }\\n        `}</style>\\n      </div>\\n\\n      {/* Upcoming Bookings Section */}\\n      <div className=\\\"px-4 pb-16\\\">\\n        <div className=\\\"flex items-center justify-between mb-4\\\">\\n          <h3 className=\\\"text-lg font-semibold\\\">Upcoming Bookings</h3>\\n          <Link href=\\\"/bookings\\\" className=\\\"text-sm font-medium text-[#3498db]\\\">\\n            View All\\n          </Link>\\n        </div>\\n\\n        {upcomingBookings.length > 0 ? (\\n          <div>\\n            {/* Render actual bookings here */}\\n          </div>\\n        ) : (\\n          <div className=\\\"bg-white p-6 rounded-lg border border-gray-100 text-center\\\">\\n            <p className=\\\"text-gray-500\\\">\\n              You don't have any upcoming bookings.\\n            </p>\\n            <p className=\\\"text-gray-500 mt-2\\\">\\n              Book a cleaning service to get started!\\n            </p>\\n          </div>\\n        )}\\n      </div>\\n    </div>\\n  );\\n}\",\n  \"src/components/layout/BottomNavigation.tsx\": \"'use client';\\n\\nimport { usePathname, useRouter } from 'next/navigation';\\nimport Link from 'next/link';\\nimport { Home, Calendar, MessageSquare, User } from 'lucide-react';\\n\\nexport const BottomNavigation = () => {\\n  const pathname = usePathname();\\n  \\n  const isActive = (path: string) => {\\n    return pathname === path;\\n  };\\n\\n  const navItems = [\\n    {\\n      icon: Home,\\n      label: 'Home',\\n      path: '/',\\n    },\\n    {\\n      icon: Calendar,\\n      label: 'Bookings',\\n      path: '/bookings',\\n    },\\n    {\\n      icon: MessageSquare,\\n      label: 'Messages',\\n      path: '/messages',\\n    },\\n    {\\n      icon: User,\\n      label: 'Profile',\\n      path: '/profile',\\n    },\\n  ];\\n\\n  return (\\n    <div className=\\\"fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 sm:hidden z-10\\\">\\n      <div className=\\\"flex justify-around items-center h-16\\\">\\n        {navItems.map((item) => (\\n          <Link\\n            key={item.path}\\n            href={item.path}\\n            className=\\\"flex flex-col items-center justify-center w-full h-full\\\"\\n          >\\n            <item.icon\\n              size={24}\\n              className={isActive(item.path) ? 'text-primary' : 'text-gray-500'}\\n            />\\n            <span\\n              className={`text-xs mt-1 ${\\n                isActive(item.path) ? 'text-primary' : 'text-gray-500'\\n              }`}\\n            >\\n              {item.label}\\n            </span>\\n          </Link>\\n        ))}\\n      </div>\\n    </div>\\n  );\\n};\\n\\nexport default BottomNavigation;\",\n  \"src/components/layout/MainLayout.tsx\": \"// src/components/layout/MainLayout.tsx\\n'use client';\\n\\nimport { useAuth } from '@/contexts/AuthContext';\\nimport BottomNavigation from './BottomNavigation';\\nimport { usePathname } from 'next/navigation';\\n\\ninterface MainLayoutProps {\\n  children: React.ReactNode;\\n}\\n\\nexport const MainLayout = ({ children }: MainLayoutProps) => {\\n  const { isAuthenticated } = useAuth();\\n  const pathname = usePathname();\\n  \\n  // Check if the current page is an auth page\\n  const isAuthPage = pathname?.includes('/login') || pathname?.includes('/register');\\n  \\n  // Only show navigation for authenticated users and non-auth pages\\n  const showNavigation = isAuthenticated && !isAuthPage;\\n\\n  return (\\n    <div className=\\\"flex flex-col min-h-screen\\\">\\n      <main className={`flex-grow ${showNavigation ? 'pb-16 sm:pb-0' : ''}`}>\\n        {children}\\n      </main>\\n      \\n      {showNavigation && <BottomNavigation />}\\n    </div>\\n  );\\n};\\n\\nexport default MainLayout;\",\n  \"src/components/popups/MembershipPopup.tsx\": \"import React, { useState, useEffect } from 'react';\\nimport { Sparkles } from 'lucide-react';\\n\\ninterface MembershipPopupProps {\\n  isOpen: boolean;\\n  onClose: () => void;\\n  frequency: 'weekly' | 'biweekly' | 'twice-weekly';\\n}\\n\\nconst MembershipPopup: React.FC<MembershipPopupProps> = ({ isOpen, onClose, frequency }) => {\\n  const [isVisible, setIsVisible] = useState(false);\\n\\n  useEffect(() => {\\n    if (isOpen) {\\n      setIsVisible(true);\\n    } else {\\n      const timeout = setTimeout(() => {\\n        setIsVisible(false);\\n      }, 300);\\n      return () => clearTimeout(timeout);\\n    }\\n  }, [isOpen]);\\n\\n  if (!isVisible) return null;\\n\\n  const planTitle = frequency === 'weekly' \\n    ? 'Weekly Plan' \\n    : frequency === 'biweekly' \\n      ? 'Biweekly Plan' \\n      : 'Twice Weekly Plan';\\n\\n  return (\\n    <div \\n      className={`fixed inset-0 z-50 flex items-center justify-center p-4 backdrop-blur-sm bg-white/30 transition-opacity duration-300 ${isOpen ? 'opacity-100' : 'opacity-0'}`}\\n      onClick={onClose}\\n    >\\n      <div \\n        className=\\\"bg-white w-full max-w-xs rounded-3xl overflow-hidden transform transition-transform duration-300 shadow-xl\\\"\\n        onClick={(e) => e.stopPropagation()}\\n      >\\n        {/* Header */}\\n        <div className=\\\"bg-blue-500 py-3 px-4 text-white text-center font-medium text-lg\\\">\\n          <div className=\\\"flex items-center justify-center\\\">\\n            <Sparkles size={24} className=\\\"mr-2 text-white\\\" />\\n            {planTitle}\\n          </div>\\n        </div>\\n\\n        {/* Blue Placeholder Area */}\\n        <div className=\\\"bg-blue-50 py-8 flex justify-center\\\">\\n          <div className=\\\"w-16 h-16 bg-blue-200 rounded-full\\\"></div>\\n        </div>\\n\\n        {/* Content */}\\n        <div className=\\\"p-4\\\">\\n          <h3 className=\\\"text-center text-gray-800 text-sm font-medium mb-3\\\">\\n            Upgrade to our Premium Membership for additional benefits with your recurring cleaning plan!\\n          </h3>\\n\\n          <div className=\\\"space-y-2 mb-4 text-xs\\\">\\n            <div className=\\\"flex items-start\\\">\\n              <span className=\\\"text-green-500 mr-2 flex-shrink-0\\\">✓</span>\\n              <span className=\\\"text-gray-700\\\">40% off your first clean</span>\\n            </div>\\n            <div className=\\\"flex items-start\\\">\\n              <span className=\\\"text-green-500 mr-2 flex-shrink-0\\\">✓</span>\\n              <span className=\\\"text-gray-700\\\">25% off all subsequent cleans</span>\\n            </div>\\n            <div className=\\\"flex items-start\\\">\\n              <span className=\\\"text-green-500 mr-2 flex-shrink-0\\\">✓</span>\\n              <span className=\\\"text-gray-700\\\">Priority booking for your preferred dates and times</span>\\n            </div>\\n            <div className=\\\"flex items-start\\\">\\n              <span className=\\\"text-green-500 mr-2 flex-shrink-0\\\">✓</span>\\n              <span className=\\\"text-gray-700\\\">Dedicated customer support for a seamless experience</span>\\n            </div>\\n            <div className=\\\"flex items-start\\\">\\n              <span className=\\\"text-green-500 mr-2 flex-shrink-0\\\">✓</span>\\n              <span className=\\\"text-gray-700\\\">Free rescheduling* up to 2 hours before clean</span>\\n            </div>\\n            <div className=\\\"flex items-start\\\">\\n              <span className=\\\"text-green-500 mr-2 flex-shrink-0\\\">✓</span>\\n              <span className=\\\"text-gray-700\\\">Additional discounts on event cleaning services</span>\\n            </div>\\n          </div>\\n\\n          {/* Price section */}\\n          <div className=\\\"bg-blue-50 rounded-lg p-3 text-center mb-4\\\">\\n            <h4 className=\\\"text-gray-700 text-sm font-medium\\\">Premium Membership</h4>\\n            <div className=\\\"text-blue-500 text-xl font-bold\\\">$19.99/month</div>\\n            <div className=\\\"text-gray-500 text-xs\\\">Cancel anytime</div>\\n          </div>\\n\\n          {/* Action button */}\\n          {frequency !== 'weekly' && (\\n            <button \\n              className=\\\"w-full bg-blue-500 text-white py-3 rounded-xl font-medium hover:bg-blue-600 transition-colors text-sm\\\"\\n              onClick={onClose}\\n            >\\n              Add Premium Membership\\n            </button>\\n          )}\\n        </div>\\n      </div>\\n    </div>\\n  );\\n};\\n\\nexport default MembershipPopup;\",\n  \"src/components/ui/AddressCard.tsx\": \"// src/components/ui/AddressCard.tsx\\nimport React from 'react';\\nimport { MapPin, Edit, Trash } from 'lucide-react';\\nimport Card from './Card';\\n\\ninterface Address {\\n  _id: string;\\n  name: string;\\n  streetAddress: string;\\n  city: string;\\n  state: string;\\n  zipCode: string;\\n  isDefault?: boolean;\\n}\\n\\ninterface AddressCardProps {\\n  address: Address;\\n  selected?: boolean;\\n  onPress?: () => void;\\n  onEdit?: () => void;\\n  onDelete?: () => void;\\n}\\n\\nexport const AddressCard: React.FC<AddressCardProps> = ({\\n  address,\\n  selected = false,\\n  onPress,\\n  onEdit,\\n  onDelete,\\n}) => {\\n  return (\\n    <Card\\n      className={`${selected ? 'border-2 border-primary' : ''} hover:shadow-md transition-shadow`}\\n      onClick={onPress}\\n    >\\n      <div className=\\\"p-4\\\">\\n        <div className=\\\"flex justify-between items-start mb-2\\\">\\n          <div className=\\\"flex items-center\\\">\\n            <MapPin size={20} className=\\\"text-primary mr-2\\\" />\\n            <h3 className=\\\"font-semibold text-lg\\\">{address.name}</h3>\\n          </div>\\n          {address.isDefault && (\\n            <span className=\\\"px-2 py-1 bg-primary bg-opacity-10 text-primary text-xs font-medium rounded-full\\\">\\n              Default\\n            </span>\\n          )}\\n        </div>\\n        \\n        <p className=\\\"text-sm text-textLight mb-1\\\">{address.streetAddress}</p>\\n        <p className=\\\"text-sm text-textLight mb-3\\\">\\n          {address.city}, {address.state} {address.zipCode}\\n        </p>\\n        \\n        <div className=\\\"flex justify-end space-x-2\\\">\\n          {onEdit && (\\n            <button \\n              onClick={(e) => {\\n                e.stopPropagation();\\n                onEdit();\\n              }}\\n              className=\\\"p-2 text-textLight hover:text-primary\\\"\\n            >\\n              <Edit size={18} />\\n            </button>\\n          )}\\n          \\n          {onDelete && (\\n            <button \\n              onClick={(e) => {\\n                e.stopPropagation();\\n                onDelete();\\n              }}\\n              className=\\\"p-2 text-textLight hover:text-error\\\"\\n            >\\n              <Trash size={18} />\\n            </button>\\n          )}\\n        </div>\\n      </div>\\n    </Card>\\n  );\\n};\\n\\nexport default AddressCard;\",\n  \"src/components/ui/BookingCard.tsx\": \"// src/components/ui/BookingCard.tsx\\nimport React from 'react';\\nimport { Calendar, Clock, MapPin } from 'lucide-react';\\nimport Card from './Card';\\n\\ninterface Booking {\\n  _id: string;\\n  serviceType: {\\n    name: string;\\n  };\\n  price: number;\\n  squareFootage: number;\\n  date: string;\\n  timeSlot: string;\\n  status: string;\\n  address?: {\\n    streetAddress: string;\\n  };\\n}\\n\\ninterface BookingCardProps {\\n  booking: Booking;\\n  onViewDetails: () => void;\\n}\\n\\nexport const BookingCard: React.FC<BookingCardProps> = ({ booking, onViewDetails }) => {\\n  // Format date\\n  const formatDate = (dateString: string): string => {\\n    const date = new Date(dateString);\\n    return date.toLocaleDateString('en-US', {\\n      weekday: 'short',\\n      month: 'short', \\n      day: 'numeric'\\n    });\\n  };\\n\\n  // Get status color\\n  const getStatusColor = (status: string): string => {\\n    switch (status.toLowerCase()) {\\n      case 'confirmed':\\n        return 'bg-primary text-white';\\n      case 'pending':\\n        return 'bg-warning text-white';\\n      case 'completed':\\n        return 'bg-success text-white';\\n      case 'cancelled':\\n        return 'bg-error text-white';\\n      default:\\n        return 'bg-grayLight text-text';\\n    }\\n  };\\n\\n  return (\\n    <Card className=\\\"cursor-pointer hover:shadow-md transition-shadow\\\" onClick={onViewDetails}>\\n      <div className=\\\"p-4\\\">\\n        <div className=\\\"flex justify-between items-start mb-3\\\">\\n          <div>\\n            <h3 className=\\\"font-semibold text-text\\\">{booking.serviceType?.name || 'Cleaning Service'}</h3>\\n            <div className=\\\"text-sm text-textLight\\\">\\n              ${booking.price} • {booking.squareFootage} sq ft\\n            </div>\\n          </div>\\n          <div className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(booking.status)}`}>\\n            {booking.status.charAt(0).toUpperCase() + booking.status.slice(1)}\\n          </div>\\n        </div>\\n        \\n        <div className=\\\"space-y-2\\\">\\n          <div className=\\\"flex items-center\\\">\\n            <Calendar size={16} className=\\\"text-primary mr-2 flex-shrink-0\\\" />\\n            <span className=\\\"text-sm text-text\\\">{formatDate(booking.date)}</span>\\n          </div>\\n          \\n          <div className=\\\"flex items-center\\\">\\n            <Clock size={16} className=\\\"text-primary mr-2 flex-shrink-0\\\" />\\n            <span className=\\\"text-sm text-text\\\">{booking.timeSlot}</span>\\n          </div>\\n          \\n          <div className=\\\"flex items-center\\\">\\n            <MapPin size={16} className=\\\"text-primary mr-2 flex-shrink-0\\\" />\\n            <span className=\\\"text-sm text-text truncate\\\">\\n              {booking.address?.streetAddress || 'Address not available'}\\n            </span>\\n          </div>\\n        </div>\\n      </div>\\n    </Card>\\n  );\\n};\\n\\nexport default BookingCard;\",\n  \"src/components/ui/Button.tsx\": \"// src/components/ui/Button.tsx\\nimport React from 'react';\\n\\ntype ButtonVariant = 'primary' | 'secondary' | 'outline' | 'ghost' | 'danger';\\ntype ButtonSize = 'small' | 'medium' | 'large';\\n\\ninterface ButtonProps {\\n  title: string;\\n  onClick?: () => void; // Make onClick optional\\n  variant?: ButtonVariant;\\n  size?: ButtonSize;\\n  disabled?: boolean;\\n  loading?: boolean;\\n  icon?: React.ReactNode;\\n  iconPosition?: 'left' | 'right';\\n  fullWidth?: boolean;\\n  className?: string;\\n  type?: 'button' | 'submit' | 'reset';\\n}\\n\\nexport const Button: React.FC<ButtonProps> = ({\\n  title,\\n  onClick,\\n  variant = 'primary',\\n  size = 'medium',\\n  disabled = false,\\n  loading = false,\\n  icon,\\n  iconPosition = 'left',\\n  fullWidth = false,\\n  className = '',\\n  type = 'button',\\n}) => {\\n  // Variant styles\\n  const variantStyles = {\\n    primary: 'bg-primary text-white hover:bg-primaryDark',\\n    secondary: 'bg-secondary text-white hover:bg-secondaryDark',\\n    outline: 'bg-transparent border border-primary text-primary hover:bg-primaryLight hover:bg-opacity-10',\\n    ghost: 'bg-transparent text-primary hover:bg-primaryLight hover:bg-opacity-10',\\n    danger: 'bg-error text-white hover:bg-red-600',\\n  };\\n\\n  // Size styles\\n  const sizeStyles = {\\n    small: 'py-2 px-3 text-sm',\\n    medium: 'py-3 px-4 text-base',\\n    large: 'py-4 px-5 text-lg',\\n  };\\n\\n  // Disabled styles\\n  const disabledStyles = 'opacity-50 cursor-not-allowed';\\n\\n  // Width style\\n  const widthStyle = fullWidth ? 'w-full' : '';\\n\\n  // Base styles\\n  const baseStyles = 'rounded-lg font-semibold inline-flex items-center justify-center transition-colors duration-200';\\n\\n  // Combine styles\\n  const buttonStyles = `\\n    ${baseStyles}\\n    ${variantStyles[variant]}\\n    ${sizeStyles[size]}\\n    ${disabled ? disabledStyles : ''}\\n    ${widthStyle}\\n    ${className}\\n  `;\\n\\n  const renderContent = () => {\\n    if (loading) {\\n      return (\\n        <svg className=\\\"animate-spin -ml-1 mr-3 h-5 w-5 text-white\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"none\\\" viewBox=\\\"0 0 24 24\\\">\\n          <circle className=\\\"opacity-25\\\" cx=\\\"12\\\" cy=\\\"12\\\" r=\\\"10\\\" stroke=\\\"currentColor\\\" strokeWidth=\\\"4\\\"></circle>\\n          <path className=\\\"opacity-75\\\" fill=\\\"currentColor\\\" d=\\\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\\\"></path>\\n        </svg>\\n      );\\n    }\\n\\n    if (!icon) {\\n      return title;\\n    }\\n\\n    return (\\n      <>\\n        {iconPosition === 'left' && <span className=\\\"mr-2\\\">{icon}</span>}\\n        {title}\\n        {iconPosition === 'right' && <span className=\\\"ml-2\\\">{icon}</span>}\\n      </>\\n    );\\n  };\\n\\n  // Handle click event or pass undefined if no handler provided\\n  const handleClick = onClick || undefined;\\n\\n  return (\\n    <button\\n      className={buttonStyles}\\n      onClick={handleClick}\\n      disabled={disabled || loading}\\n      type={type}\\n    >\\n      {renderContent()}\\n    </button>\\n  );\\n};\\n\\nexport default Button;\",\n  \"src/components/ui/Card.tsx\": \"// src/components/ui/Card.tsx\\nimport React from 'react';\\n\\ninterface CardProps {\\n  children: React.ReactNode;\\n  className?: string;\\n  elevation?: number;\\n  onClick?: () => void;\\n}\\n\\nexport const Card: React.FC<CardProps> = ({ \\n  children, \\n  className = '', \\n  elevation = 1,\\n  onClick\\n}) => {\\n  // Map elevation to Tailwind shadow classes\\n  const shadowMap = {\\n    1: 'shadow-sm',\\n    2: 'shadow',\\n    3: 'shadow-md',\\n    4: 'shadow-lg',\\n    5: 'shadow-xl'\\n  };\\n  \\n  const shadowClass = shadowMap[elevation as keyof typeof shadowMap] || 'shadow';\\n  \\n  return (\\n    <div \\n      className={`bg-white rounded-xl p-4 my-2 ${shadowClass} ${className}`}\\n      onClick={onClick}\\n    >\\n      {children}\\n    </div>\\n  );\\n};\\n\\nexport default Card;\",\n  \"src/components/ui/CleaningSuppliesModal.tsx\": \"// src/components/ui/CleaningSuppliesModal.tsx\\nimport React, { useState, useEffect } from 'react';\\nimport { X, CheckCircle } from 'lucide-react';\\n\\n// List of cleaning supplies\\nconst CLEANING_SUPPLIES = [\\n  'Bona',\\n  'Mop & Bucket',\\n  'Duster',\\n  'Microfiber cloths/Rags',\\n  'Broom & Dustpan',\\n  'Garbage Bags',\\n  'Clorox Bleach',\\n  'Easy-off',\\n  'Baking soda',\\n  'Glass Cleaner',\\n  'Murphy',\\n  'Toilet Brush',\\n  'Paper Towels',\\n  'Sponges',\\n  'Abrasive Scrubber',\\n  'All-purpose cleaner',\\n  'White Vinegar',\\n  'Pine-SOL',\\n  'Soft Scrub'\\n];\\n\\ninterface CleaningSuppliesModalProps {\\n  isOpen: boolean;\\n  onClose: () => void;\\n  onSave: (suppliesOption: string, selectedSupplies: string[]) => void;\\n}\\n\\nconst CleaningSuppliesModal: React.FC<CleaningSuppliesModalProps> = ({ \\n  isOpen, \\n  onClose,\\n  onSave \\n}) => {\\n  const [suppliesOption, setSuppliesOption] = useState<string>('bring-everything');\\n  const [selectedSupplies, setSelectedSupplies] = useState<string[]>([...CLEANING_SUPPLIES]);\\n\\n  const toggleSupply = (supply: string) => {\\n    if (selectedSupplies.includes(supply)) {\\n      setSelectedSupplies(selectedSupplies.filter(item => item !== supply));\\n    } else {\\n      setSelectedSupplies([...selectedSupplies, supply]);\\n    }\\n  };\\n\\n  const selectAll = () => {\\n    setSelectedSupplies([...CLEANING_SUPPLIES]);\\n  };\\n\\n  const deselectAll = () => {\\n    setSelectedSupplies([]);\\n  };\\n\\n  const handleConfirm = () => {\\n    onSave(suppliesOption, selectedSupplies);\\n    onClose();\\n  };\\n\\n  if (!isOpen) return null;\\n\\n  return (\\n    <div className=\\\"fixed inset-0 z-50 flex items-center justify-center p-4 backdrop-blur-sm bg-white/30\\\">\\n      <div className=\\\"bg-white w-full max-w-xs rounded-lg shadow-lg overflow-hidden\\\">\\n        {/* Header */}\\n        <div className=\\\"flex items-center justify-between p-3 border-b\\\">\\n          <h2 className=\\\"text-lg font-semibold text-gray-800\\\">Cleaning Supplies</h2>\\n          <button \\n            className=\\\"text-gray-500 hover:text-gray-700\\\"\\n            onClick={onClose}\\n          >\\n            <X size={20} />\\n          </button>\\n        </div>\\n\\n        <div className=\\\"p-3\\\">\\n          {/* Options */}\\n          <div className=\\\"space-y-2 mb-3\\\">\\n            {/* Option 1 */}\\n            <div \\n              className={`flex items-center justify-between p-3 border rounded-lg cursor-pointer ${\\n                suppliesOption === 'bring-everything' ? 'border-blue-500 bg-blue-50' : 'border-gray-200'\\n              }`}\\n              onClick={() => setSuppliesOption('bring-everything')}\\n            >\\n              <div className=\\\"flex items-center\\\">\\n                <div className=\\\"w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center mr-3\\\">\\n                  <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" className=\\\"h-5 w-5 text-blue-500\\\" viewBox=\\\"0 0 20 20\\\" fill=\\\"currentColor\\\">\\n                    <path fillRule=\\\"evenodd\\\" d=\\\"M5 3a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2V5a2 2 0 00-2-2H5zm0 2h10v10H5V5z\\\" clipRule=\\\"evenodd\\\" />\\n                  </svg>\\n                </div>\\n                <div>\\n                  <h3 className=\\\"font-medium text-sm text-gray-800\\\">Bring Everything</h3>\\n                  <p className=\\\"text-gray-600 text-xs\\\">We'll bring all cleaning supplies</p>\\n                  <p className=\\\"text-gray-700 text-xs\\\">Standard price</p>\\n                </div>\\n              </div>\\n              <div className={`w-5 h-5 rounded-full border flex items-center justify-center ${\\n                suppliesOption === 'bring-everything' ? 'bg-blue-500 border-blue-500' : 'border-gray-300'\\n              }`}>\\n                {suppliesOption === 'bring-everything' && <div className=\\\"w-3 h-3 bg-white rounded-full\\\"></div>}\\n              </div>\\n            </div>\\n\\n            {/* Option 2 */}\\n            <div \\n              className={`flex items-center justify-between p-3 border rounded-lg cursor-pointer ${\\n                suppliesOption === 'i-have-vacuum' ? 'border-blue-500 bg-blue-50' : 'border-gray-200'\\n              }`}\\n              onClick={() => setSuppliesOption('i-have-vacuum')}\\n            >\\n              <div className=\\\"flex items-center\\\">\\n                <div className=\\\"w-10 h-10 bg-green-100 rounded-full flex items-center justify-center mr-3\\\">\\n                  <span className=\\\"text-green-500 text-lg\\\">$</span>\\n                </div>\\n                <div>\\n                  <h3 className=\\\"font-medium text-sm text-gray-800\\\">I Have a Vacuum</h3>\\n                  <p className=\\\"text-gray-600 text-xs\\\">We'll bring supplies, you provide vacuum</p>\\n                  <p className=\\\"text-green-500 font-medium text-xs\\\">Save $20</p>\\n                </div>\\n              </div>\\n              <div className={`w-5 h-5 rounded-full border flex items-center justify-center ${\\n                suppliesOption === 'i-have-vacuum' ? 'bg-blue-500 border-blue-500' : 'border-gray-300'\\n              }`}>\\n                {suppliesOption === 'i-have-vacuum' && <div className=\\\"w-3 h-3 bg-white rounded-full\\\"></div>}\\n              </div>\\n            </div>\\n\\n            {/* Option 3 */}\\n            <div \\n              className={`flex items-center justify-between p-3 border rounded-lg cursor-pointer ${\\n                suppliesOption === 'i-have-all' ? 'border-blue-500 bg-blue-50' : 'border-gray-200'\\n              }`}\\n              onClick={() => setSuppliesOption('i-have-all')}\\n            >\\n              <div className=\\\"flex items-center\\\">\\n                <div className=\\\"w-10 h-10 bg-green-100 rounded-full flex items-center justify-center mr-3\\\">\\n                  <span className=\\\"text-green-500 text-lg\\\">$</span>\\n                </div>\\n                <div>\\n                  <h3 className=\\\"font-medium text-sm text-gray-800\\\">I Have Vacuum & Supplies</h3>\\n                  <p className=\\\"text-gray-600 text-xs\\\">You provide all supplies & equipment</p>\\n                  <p className=\\\"text-green-500 font-medium text-xs\\\">Save $50</p>\\n                </div>\\n              </div>\\n              <div className={`w-5 h-5 rounded-full border flex items-center justify-center ${\\n                suppliesOption === 'i-have-all' ? 'bg-blue-500 border-blue-500' : 'border-gray-300'\\n              }`}>\\n                {suppliesOption === 'i-have-all' && <div className=\\\"w-3 h-3 bg-white rounded-full\\\"></div>}\\n              </div>\\n            </div>\\n          </div>\\n\\n          {/* Always show supplies section when option is \\\"i-have-all\\\" */}\\n          {suppliesOption === 'i-have-all' && (\\n            <>\\n              <div className=\\\"flex items-center justify-between mb-3 mt-4\\\">\\n                <h3 className=\\\"text-gray-800 text-sm font-medium\\\">Select your supplies:</h3>\\n                <div className=\\\"text-blue-500 text-xs font-medium\\\">{selectedSupplies.length}/{CLEANING_SUPPLIES.length} selected</div>\\n              </div>\\n              \\n              <div className=\\\"flex justify-between mb-2\\\">\\n                <button \\n                  className=\\\"bg-blue-50 text-blue-500 px-3 py-1 rounded-md text-xs\\\"\\n                  onClick={selectAll}\\n                >\\n                  Select All\\n                </button>\\n                <button \\n                  className=\\\"bg-gray-100 text-gray-600 px-3 py-1 rounded-md text-xs\\\"\\n                  onClick={deselectAll}\\n                >\\n                  Deselect All\\n                </button>\\n              </div>\\n\\n              {/* Supply Checkboxes */}\\n              <div className=\\\"border rounded-lg p-2 mb-3 max-h-56 overflow-y-auto\\\">\\n                <div className=\\\"grid grid-cols-2 gap-y-2 gap-x-1\\\">\\n                  {CLEANING_SUPPLIES.map((supply, index) => (\\n                    <div \\n                      key={index} \\n                      className={`flex items-center p-1 rounded cursor-pointer ${\\n                        selectedSupplies.includes(supply) ? 'bg-blue-50' : 'hover:bg-gray-50'\\n                      }`}\\n                      onClick={() => toggleSupply(supply)}\\n                    >\\n                      <div className={`w-4 h-4 border rounded flex items-center justify-center mr-1 ${\\n                        selectedSupplies.includes(supply) ? 'bg-blue-500 border-blue-500' : 'border-gray-300'\\n                      }`}>\\n                        {selectedSupplies.includes(supply) && (\\n                          <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" className=\\\"h-3 w-3 text-white\\\" viewBox=\\\"0 0 20 20\\\" fill=\\\"currentColor\\\">\\n                            <path fillRule=\\\"evenodd\\\" d=\\\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\\\" clipRule=\\\"evenodd\\\" />\\n                          </svg>\\n                        )}\\n                      </div>\\n                      <span className=\\\"text-xs text-gray-700\\\">{supply}</span>\\n                    </div>\\n                  ))}\\n                </div>\\n              </div>\\n            </>\\n          )}\\n\\n          {/* Confirm Button */}\\n          <button \\n            className=\\\"w-full bg-blue-500 text-white py-2 rounded-md text-sm cursor-pointer\\\"\\n            onClick={handleConfirm}\\n          >\\n            {suppliesOption === 'i-have-all' ? 'Confirm & Continue' : 'Continue'}\\n          </button>\\n        </div>\\n      </div>\\n    </div>\\n  );\\n};\\n\\nexport default CleaningSuppliesModal;\",\n  \"src/components/ui/CleaningTypeBubble.tsx\": \"// src/components/ui/CleaningTypeBubble.tsx\\nimport React from 'react';\\nimport { Home, Sparkles, CheckSquare, PartyPopper, Briefcase } from 'lucide-react';\\n\\ninterface CleaningTypeBubbleProps {\\n  type: string;\\n  label: string;\\n  selected?: boolean;\\n  onSelect: () => void;\\n}\\n\\nexport const CleaningTypeBubble: React.FC<CleaningTypeBubbleProps> = ({\\n  type,\\n  label,\\n  selected = false,\\n  onSelect,\\n}) => {\\n  // Function to determine which icon to show\\n  const getIcon = () => {\\n    switch (type) {\\n      case 'standard':\\n        return <Home size={24} className={selected ? 'text-white' : 'text-primary'} />;\\n      case 'deep':\\n        return <Sparkles size={24} className={selected ? 'text-white' : 'text-primary'} />;\\n      case 'move':\\n        return <Briefcase size={24} className={selected ? 'text-white' : 'text-primary'} />;\\n      case 'party':\\n        return <PartyPopper size={24} className={selected ? 'text-white' : 'text-primary'} />;\\n      case 'checklist':\\n        return <CheckSquare size={24} className={selected ? 'text-white' : 'text-primary'} />;\\n      default:\\n        return <Home size={24} className={selected ? 'text-white' : 'text-primary'} />;\\n    }\\n  };\\n\\n  return (\\n    <div \\n      className=\\\"cursor-pointer flex flex-col items-center\\\" \\n      onClick={onSelect}\\n    >\\n      <div \\n        className={`w-16 h-16 rounded-full flex items-center justify-center mb-2 transition-colors ${\\n          selected ? 'bg-primary' : 'bg-blue-100'\\n        }`}\\n      >\\n        {getIcon()}\\n      </div>\\n      <span className={`text-sm font-medium text-center ${selected ? 'text-primary' : 'text-text'}`}>\\n        {label}\\n      </span>\\n    </div>\\n  );\\n};\\n\\nexport default CleaningTypeBubble;\",\n  \"src/components/ui/CleaningTypeCard.tsx\": \"// src/components/ui/CleaningTypeCard.tsx\\nimport React from 'react';\\nimport { Home, Sparkles, CheckSquare, PartyPopper, Briefcase } from 'lucide-react';\\nimport Card from './Card';\\n\\ninterface CleaningTypeCardProps {\\n  type: string;\\n  title: string;\\n  description: string;\\n  price: number;\\n  selected?: boolean;\\n  onSelect: () => void;\\n}\\n\\nexport const CleaningTypeCard: React.FC<CleaningTypeCardProps> = ({\\n  type,\\n  title,\\n  description,\\n  price,\\n  selected = false,\\n  onSelect,\\n}) => {\\n  // Function to determine which icon to show\\n  const getIcon = () => {\\n    switch (type) {\\n      case 'standard':\\n        return <Home size={24} className=\\\"text-primary\\\" />;\\n      case 'deep':\\n        return <Sparkles size={24} className=\\\"text-primary\\\" />;\\n      case 'move':\\n        return <Briefcase size={24} className=\\\"text-primary\\\" />;\\n      case 'party':\\n        return <PartyPopper size={24} className=\\\"text-primary\\\" />;\\n      case 'checklist':\\n        return <CheckSquare size={24} className=\\\"text-primary\\\" />;\\n      default:\\n        return <Home size={24} className=\\\"text-primary\\\" />;\\n    }\\n  };\\n\\n  return (\\n    <Card \\n      className={`cursor-pointer ${selected ? 'border-2 border-primary' : ''}`}\\n      onClick={onSelect}\\n    >\\n      <div className=\\\"p-4\\\">\\n        <div className=\\\"flex items-start justify-between mb-3\\\">\\n          <div className=\\\"flex items-center\\\">\\n            <div className=\\\"w-10 h-10 rounded-full bg-blue-100 flex items-center justify-center mr-3\\\">\\n              {getIcon()}\\n            </div>\\n            <h3 className=\\\"font-semibold text-lg text-text\\\">{title}</h3>\\n          </div>\\n          <div className={`w-6 h-6 rounded-full border flex items-center justify-center ${\\n            selected \\n              ? 'bg-primary border-primary' \\n              : 'border-gray-300'\\n          }`}>\\n            {selected && (\\n              <CheckSquare size={14} className=\\\"text-white\\\" />\\n            )}\\n          </div>\\n        </div>\\n        <p className=\\\"text-sm text-textLight mb-3\\\">{description}</p>\\n        <div className=\\\"text-primary font-medium\\\">\\n          From ${price}\\n        </div>\\n      </div>\\n    </Card>\\n  );\\n};\\n\\nexport default CleaningTypeCard;\",\n  \"src/components/ui/EmptyState.tsx\": \"// src/components/ui/EmptyState.tsx\\nimport React from 'react';\\nimport Button from './Button';\\n\\ninterface EmptyStateProps {\\n  icon?: React.ReactNode;\\n  title: string;\\n  message: string;\\n  actionLabel?: string;\\n  onAction?: () => void;\\n}\\n\\nexport const EmptyState: React.FC<EmptyStateProps> = ({\\n  icon,\\n  title,\\n  message,\\n  actionLabel,\\n  onAction,\\n}) => {\\n  return (\\n    <div className=\\\"flex flex-col items-center justify-center p-6 text-center min-h-[300px]\\\">\\n      {icon && <div className=\\\"mb-4\\\">{icon}</div>}\\n      <h2 className=\\\"text-xl font-bold text-text mb-2\\\">{title}</h2>\\n      <p className=\\\"text-base text-textLight mb-6\\\">{message}</p>\\n      {actionLabel && onAction && (\\n        <Button\\n          title={actionLabel}\\n          onClick={onAction}\\n          variant=\\\"primary\\\"\\n          className=\\\"min-w-[200px]\\\"\\n        />\\n      )}\\n    </div>\\n  );\\n};\\n\\nexport default EmptyState;\",\n  \"src/components/ui/FancyLoader.tsx\": \"// src/components/ui/FancyLoader.tsx\\n\\nimport React from 'react';\\n\\ninterface FancyLoaderProps {\\n  visible: boolean;\\n  message?: string;\\n}\\n\\nconst FancyLoader: React.FC<FancyLoaderProps> = ({ visible, message = 'Loading...' }) => {\\n  if (!visible) return null;\\n\\n  return (\\n    <div className=\\\"fixed inset-0 z-50 flex flex-col items-center justify-center bg-white bg-opacity-90\\\">\\n      <div className=\\\"relative w-24 h-24\\\">\\n        {/* Outer spinning circle */}\\n        <div className=\\\"absolute inset-0 rounded-full border-4 border-transparent border-t-blue-500 border-r-blue-300 animate-spin\\\"></div>\\n        \\n        {/* Middle spinning circle - opposite direction */}\\n        <div className=\\\"absolute inset-2 rounded-full border-4 border-transparent border-b-blue-400 border-l-blue-200 animate-spin-slow\\\"></div>\\n        \\n        {/* Inner pulsing circle */}\\n        <div className=\\\"absolute inset-5 rounded-full bg-blue-500 animate-pulse\\\"></div>\\n        \\n        {/* Center dot */}\\n        <div className=\\\"absolute inset-9 rounded-full bg-white\\\"></div>\\n      </div>\\n      \\n      {/* Loading message */}\\n      <div className=\\\"mt-6 text-blue-600 font-medium\\\">{message}</div>\\n      \\n      {/* Bouncing dots */}\\n      <div className=\\\"flex space-x-2 mt-2\\\">\\n        <div className=\\\"w-2 h-2 bg-blue-500 rounded-full animate-bounce-delay-1\\\"></div>\\n        <div className=\\\"w-2 h-2 bg-blue-500 rounded-full animate-bounce-delay-2\\\"></div>\\n        <div className=\\\"w-2 h-2 bg-blue-500 rounded-full animate-bounce-delay-3\\\"></div>\\n      </div>\\n    </div>\\n  );\\n};\\n\\nexport default FancyLoader;\",\n  \"src/components/ui/Input.tsx\": \"// src/components/ui/Input.tsx\\nimport React, { useState } from 'react';\\nimport { Eye, EyeOff } from 'lucide-react';\\n\\ninterface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {\\n  label?: string;\\n  error?: string;\\n  leftIcon?: React.ReactNode;\\n  rightIcon?: React.ReactNode;\\n  onRightIconClick?: () => void;\\n  className?: string;\\n  containerClassName?: string;\\n  multiline?: boolean;\\n  rows?: number;\\n  textAlignVertical?: 'auto' | 'top' | 'bottom' | 'center';\\n}\\n\\nexport const Input: React.FC<InputProps> = ({\\n  label,\\n  error,\\n  leftIcon,\\n  rightIcon,\\n  onRightIconClick,\\n  className = '',\\n  containerClassName = '',\\n  type,\\n  multiline = false,\\n  rows = 4,\\n  textAlignVertical,\\n  ...rest\\n}) => {\\n  const [isPasswordVisible, setIsPasswordVisible] = useState(false);\\n\\n  const togglePasswordVisibility = () => {\\n    setIsPasswordVisible(!isPasswordVisible);\\n  };\\n\\n  const containerClasses = `mb-4 w-full ${containerClassName}`;\\n  const inputContainerClasses = `flex items-center relative border rounded-lg ${error ? 'border-error' : 'border-border'} bg-white`;\\n  \\n  // Base classes for input\\n  const inputBaseClasses = `\\n    flex-1 h-12 text-base text-text outline-none bg-transparent\\n    ${leftIcon ? 'pl-10' : 'pl-3'}\\n    ${(rightIcon || type === 'password') ? 'pr-10' : 'pr-3'}\\n    ${className}\\n  `;\\n  \\n  // Additional classes for textarea\\n  const textareaClasses = `\\n    resize-none min-h-[100px] py-3 \\n    ${textAlignVertical === 'top' ? 'pt-3' : 'pt-3'}\\n  `;\\n\\n  // Password visibility icon\\n  const passwordIcon = type === 'password' ? (\\n    <button \\n      type=\\\"button\\\"\\n      className=\\\"absolute right-3 top-1/2 transform -translate-y-1/2\\\"\\n      onClick={togglePasswordVisibility}\\n    >\\n      {isPasswordVisible ? (\\n        <EyeOff size={20} className=\\\"text-textLight\\\" />\\n      ) : (\\n        <Eye size={20} className=\\\"text-textLight\\\" />\\n      )}\\n    </button>\\n  ) : null;\\n\\n  // Custom right icon\\n  const rightIconElement = rightIcon ? (\\n    <button \\n      type=\\\"button\\\"\\n      className=\\\"absolute right-3 top-1/2 transform -translate-y-1/2\\\"\\n      onClick={onRightIconClick}\\n      disabled={!onRightIconClick}\\n    >\\n      {rightIcon}\\n    </button>\\n  ) : null;\\n  \\n  const inputType = type === 'password' && isPasswordVisible ? 'text' : type;\\n\\n  return (\\n    <div className={containerClasses}>\\n      {label && (\\n        <label className=\\\"block text-sm font-medium text-text mb-1.5\\\">\\n          {label}\\n        </label>\\n      )}\\n      \\n      <div className={inputContainerClasses}>\\n        {leftIcon && (\\n          <div className=\\\"absolute left-3 top-1/2 transform -translate-y-1/2\\\">\\n            {leftIcon}\\n          </div>\\n        )}\\n        \\n        {multiline ? (\\n          <textarea\\n            className={`${inputBaseClasses} ${textareaClasses}`}\\n            rows={rows}\\n            {...(rest as React.TextareaHTMLAttributes<HTMLTextAreaElement>)}\\n          />\\n        ) : (\\n          <input\\n            type={inputType}\\n            className={inputBaseClasses}\\n            {...rest}\\n          />\\n        )}\\n        \\n        {passwordIcon || rightIconElement}\\n      </div>\\n      \\n      {error && (\\n        <p className=\\\"mt-1 text-xs text-error\\\">{error}</p>\\n      )}\\n    </div>\\n  );\\n};\\n\\nexport default Input;\",\n  \"src/components/ui/LoadingOverlay.tsx\": \"// src/components/ui/LoadingOverlay.tsx\\nimport React from 'react';\\n\\ninterface LoadingOverlayProps {\\n  visible: boolean;\\n  message?: string;\\n}\\n\\nexport const LoadingOverlay: React.FC<LoadingOverlayProps> = ({\\n  visible,\\n  message = 'Loading...',\\n}) => {\\n  if (!visible) return null;\\n\\n  return (\\n    <div className=\\\"fixed inset-0 bg-black bg-opacity-40 flex items-center justify-center z-50\\\">\\n      <div className=\\\"bg-white rounded-xl p-6 flex flex-col items-center shadow-lg min-w-[200px]\\\">\\n        <div className=\\\"w-10 h-10 border-4 border-primary border-t-transparent rounded-full animate-spin\\\"></div>\\n        <p className=\\\"mt-4 text-base text-text text-center\\\">{message}</p>\\n      </div>\\n    </div>\\n  );\\n};\\n\\nexport default LoadingOverlay;\",\n  \"src/components/ui/PaymentMethod.tsx\": \"// src/components/ui/PaymentMethodCard.tsx\\nimport React from 'react';\\nimport { CreditCard, CheckCircle2, Trash } from 'lucide-react';\\nimport Card from './Card';\\n\\ninterface PaymentMethod {\\n  _id: string;\\n  brand: string;\\n  last4: string;\\n  isDefault: boolean;\\n}\\n\\ninterface PaymentMethodCardProps {\\n  paymentMethod: PaymentMethod;\\n  onSetDefault?: () => void;\\n  onDelete?: () => void;\\n}\\n\\nexport const PaymentMethodCard: React.FC<PaymentMethodCardProps> = ({\\n  paymentMethod,\\n  onSetDefault,\\n  onDelete\\n}) => {\\n  const getBrandLogo = (brand: string) => {\\n    // In a real app, you'd use proper card brand logos\\n    switch (brand.toLowerCase()) {\\n      case 'visa':\\n        return <CreditCard size={24} className=\\\"text-blue-700\\\" />;\\n      case 'mastercard':\\n        return <CreditCard size={24} className=\\\"text-red-500\\\" />;\\n      case 'amex':\\n        return <CreditCard size={24} className=\\\"text-blue-500\\\" />;\\n      default:\\n        return <CreditCard size={24} className=\\\"text-gray-500\\\" />;\\n    }\\n  };\\n\\n  return (\\n    <Card>\\n      <div className=\\\"p-4\\\">\\n        <div className=\\\"flex justify-between items-center mb-3\\\">\\n          <div className=\\\"flex items-center\\\">\\n            {getBrandLogo(paymentMethod.brand)}\\n            <div className=\\\"ml-3\\\">\\n              <div className=\\\"font-medium text-text\\\">\\n                {paymentMethod.brand} •••• {paymentMethod.last4}\\n              </div>\\n            </div>\\n          </div>\\n          \\n          {paymentMethod.isDefault && (\\n            <span className=\\\"px-2 py-1 bg-primary bg-opacity-10 text-primary text-xs font-medium rounded-full\\\">\\n              Default\\n            </span>\\n          )}\\n        </div>\\n        \\n        <div className=\\\"flex justify-end space-x-2\\\">\\n          {!paymentMethod.isDefault && onSetDefault && (\\n            <button \\n              onClick={onSetDefault}\\n              className=\\\"flex items-center text-sm text-primary hover:underline\\\"\\n            >\\n              <CheckCircle2 size={16} className=\\\"mr-1\\\" /> \\n              Set as Default\\n            </button>\\n          )}\\n          \\n          {onDelete && (\\n            <button \\n              onClick={onDelete}\\n              className=\\\"flex items-center text-sm text-error hover:underline\\\"\\n            >\\n              <Trash size={16} className=\\\"mr-1\\\" /> \\n              Remove\\n            </button>\\n          )}\\n        </div>\\n      </div>\\n    </Card>\\n  );\\n};\\n\\nexport default PaymentMethodCard;\",\n  \"src/components/ui/ServiceCard.tsx\": \"// src/components/ui/ServiceCard.tsx\\nimport React from 'react';\\nimport { Home, Sparkles, CheckSquare, Package } from 'lucide-react';\\nimport Card from './Card';\\n\\ninterface ServiceCardProps {\\n  service: {\\n    _id: string;\\n    name: string;\\n    description: string;\\n    basePrice: number;\\n    icon?: string;\\n  };\\n  onClick: () => void;\\n}\\n\\nexport const ServiceCard: React.FC<ServiceCardProps> = ({ service, onClick }) => {\\n  const getIcon = () => {\\n    switch (service.icon) {\\n      case 'sparkles':\\n        return <Sparkles size={24} className=\\\"text-primary\\\" />;\\n      case 'package':\\n        return <Package size={24} className=\\\"text-primary\\\" />;\\n      case 'check-square':\\n        return <CheckSquare size={24} className=\\\"text-primary\\\" />;\\n      default:\\n        return <Home size={24} className=\\\"text-primary\\\" />;\\n    }\\n  };\\n\\n  return (\\n    <Card className=\\\"cursor-pointer hover:shadow-md transition-shadow\\\" onClick={onClick}>\\n      <div className=\\\"p-4\\\">\\n        <div className=\\\"mb-3 w-12 h-12 rounded-full bg-primaryLight bg-opacity-20 flex items-center justify-center\\\">\\n          {getIcon()}\\n        </div>\\n        <h3 className=\\\"font-semibold text-lg text-text mb-1\\\">{service.name}</h3>\\n        <p className=\\\"text-sm text-textLight mb-2 line-clamp-2\\\">{service.description}</p>\\n        <div className=\\\"flex items-center text-primary font-medium\\\">\\n          <span>From ${service.basePrice}</span>\\n        </div>\\n      </div>\\n    </Card>\\n  );\\n};\\n\\nexport default ServiceCard;\",\n  \"src/components/ui/ServiceCardCarousel.tsx\": \"import React, { useState, useEffect, useRef } from 'react';\\nimport { ChevronLeft, ChevronRight, Plus, Sparkles, Box, PartyPopper, Home } from 'lucide-react';\\nimport Link from 'next/link';\\n\\nconst HomePage = () => {\\n  const [activeService, setActiveService] = useState(null);\\n  const [autoScrollEnabled, setAutoScrollEnabled] = useState(true);\\n  const carouselRef = useRef(null);\\n  const autoScrollTimerRef = useRef(null);\\n\\n  const services = [\\n    {\\n      id: 'deep-clean',\\n      name: 'Deep Clean',\\n      description: 'A comprehensive cleaning for spaces that need extra attention.',\\n      icon: <Sparkles size={32} />,\\n      color: 'bg-blue-500',\\n      textColor: 'text-white',\\n      basePrice: 200\\n    },\\n    {\\n      id: 'move-in-out',\\n      name: 'Move In/Out',\\n      description: 'Prepare your space for moving in or out with a complete cleaning.',\\n      icon: <Box size={32} />,\\n      color: 'bg-purple-500',\\n      textColor: 'text-white',\\n      basePrice: 250\\n    },\\n    {\\n      id: 'party-clean',\\n      name: 'Party Clean',\\n      description: 'Quick cleanup after events and gatherings.',\\n      icon: <PartyPopper size={32} />,\\n      color: 'bg-pink-500',\\n      textColor: 'text-white',\\n      basePrice: 150\\n    },\\n    {\\n      id: 'standard-clean',\\n      name: 'Standard Clean',\\n      description: 'A thorough cleaning of your space, focusing on regular maintenance.',\\n      icon: <Home size={32} />,\\n      color: 'bg-green-500',\\n      textColor: 'text-white',\\n      basePrice: 120\\n    }\\n  ];\\n\\n  // Function to handle service selection\\n  const handleServiceSelect = (service) => {\\n    setActiveService(service);\\n    setAutoScrollEnabled(false);\\n    \\n    // Store the selected service in localStorage\\n    localStorage.setItem('bookingService', JSON.stringify({\\n      serviceId: service.id,\\n      serviceName: service.name,\\n      serviceDescription: service.description,\\n      basePrice: service.basePrice\\n    }));\\n  };\\n\\n  // Auto-scrolling functionality\\n  useEffect(() => {\\n    if (!autoScrollEnabled || !carouselRef.current) return;\\n\\n    const scrollRight = () => {\\n      if (!carouselRef.current) return;\\n      \\n      const { scrollLeft, scrollWidth, clientWidth } = carouselRef.current;\\n      const newScrollLeft = scrollLeft + 300;\\n      \\n      if (scrollLeft + clientWidth >= scrollWidth - 10) {\\n        // If we're at the end, scroll back to the beginning\\n        carouselRef.current.scrollTo({ left: 0, behavior: 'smooth' });\\n      } else {\\n        // Otherwise, continue scrolling right\\n        carouselRef.current.scrollTo({ left: newScrollLeft, behavior: 'smooth' });\\n      }\\n    };\\n\\n    // Set up the auto-scroll timer\\n    autoScrollTimerRef.current = setInterval(scrollRight, 3000);\\n\\n    return () => {\\n      if (autoScrollTimerRef.current) {\\n        clearInterval(autoScrollTimerRef.current);\\n      }\\n    };\\n  }, [autoScrollEnabled]);\\n\\n  // Handle manual scrolling - pause auto-scroll when user interacts\\n  const handleManualScroll = () => {\\n    setAutoScrollEnabled(false);\\n    \\n    // Resume auto-scroll after 8 seconds of inactivity\\n    if (autoScrollTimerRef.current) {\\n      clearTimeout(autoScrollTimerRef.current);\\n    }\\n    \\n    autoScrollTimerRef.current = setTimeout(() => {\\n      setAutoScrollEnabled(true);\\n    }, 8000);\\n  };\\n\\n  // Scroll control functions\\n  const scrollLeft = () => {\\n    if (!carouselRef.current) return;\\n    const newScrollLeft = carouselRef.current.scrollLeft - 300;\\n    carouselRef.current.scrollTo({ left: newScrollLeft, behavior: 'smooth' });\\n    handleManualScroll();\\n  };\\n\\n  const scrollRight = () => {\\n    if (!carouselRef.current) return;\\n    const newScrollLeft = carouselRef.current.scrollLeft + 300;\\n    carouselRef.current.scrollTo({ left: newScrollLeft, behavior: 'smooth' });\\n    handleManualScroll();\\n  };\\n\\n  return (\\n    <div className=\\\"min-h-screen bg-white\\\">\\n      <div className=\\\"max-w-md mx-auto pt-6 px-4\\\">\\n        <header className=\\\"py-4\\\">\\n          <h1 className=\\\"text-2xl font-bold text-gray-800\\\">Home</h1>\\n        </header>\\n\\n        <div className=\\\"py-6\\\">\\n          <h2 className=\\\"text-3xl font-bold text-gray-800\\\">Hello, Test!</h2>\\n          <p className=\\\"text-gray-600 mt-1\\\">Ready to book a cleaning service?</p>\\n\\n          <Link href={activeService ? '/booking/address' : '/booking/services'}>\\n            <button \\n              className=\\\"w-full bg-blue-400 hover:bg-blue-500 text-white py-4 rounded-lg mt-6 flex items-center justify-center font-medium transition-colors\\\"\\n              onClick={() => {\\n                if (!activeService) {\\n                  // If no service is selected, we'll just go to the services page\\n                  localStorage.removeItem('bookingService');\\n                }\\n              }}\\n            >\\n              <Plus className=\\\"mr-2\\\" size={20} /> Book a Cleaning Service\\n            </button>\\n          </Link>\\n        </div>\\n\\n        <div className=\\\"mt-6\\\">\\n          <div className=\\\"flex items-center justify-between mb-4\\\">\\n            <h2 className=\\\"text-2xl font-bold text-gray-800\\\">Cleaning Services</h2>\\n            <div className=\\\"flex space-x-2\\\">\\n              <button \\n                onClick={scrollLeft} \\n                className=\\\"bg-gray-100 hover:bg-gray-200 p-2 rounded-full transition-colors\\\"\\n              >\\n                <ChevronLeft size={20} />\\n              </button>\\n              <button \\n                onClick={scrollRight} \\n                className=\\\"bg-gray-100 hover:bg-gray-200 p-2 rounded-full transition-colors\\\"\\n              >\\n                <ChevronRight size={20} />\\n              </button>\\n            </div>\\n          </div>\\n\\n          <div className=\\\"relative\\\">\\n            <div \\n              ref={carouselRef}\\n              className=\\\"flex overflow-x-auto scrollbar-hide snap-x snap-mandatory py-2 px-1 -mx-1 space-x-4\\\"\\n              style={{ scrollbarWidth: 'none', msOverflowStyle: 'none' }}\\n              onScroll={handleManualScroll}\\n            >\\n              {services.map((service) => (\\n                <div \\n                  key={service.id}\\n                  className={`snap-center flex-shrink-0 w-72 h-48 rounded-xl shadow-lg overflow-hidden cursor-pointer transition-transform transform hover:scale-105 ${\\n                    activeService?.id === service.id ? 'ring-4 ring-blue-400' : ''\\n                  }`}\\n                  onClick={() => handleServiceSelect(service)}\\n                >\\n                  <div className={`h-full w-full p-6 flex flex-col justify-between ${service.color} ${service.textColor}`}>\\n                    <div className=\\\"bg-white/20 rounded-full p-3 w-fit\\\">\\n                      {service.icon}\\n                    </div>\\n                    <div>\\n                      <h3 className=\\\"text-xl font-bold mb-1\\\">{service.name}</h3>\\n                      <p className=\\\"text-sm opacity-90\\\">{service.description}</p>\\n                      <div className=\\\"mt-2 font-bold\\\">${service.basePrice}</div>\\n                    </div>\\n                  </div>\\n                </div>\\n              ))}\\n            </div>\\n          </div>\\n        </div>\\n\\n        <div className=\\\"mt-10\\\">\\n          <div className=\\\"flex items-center justify-between mb-4\\\">\\n            <h2 className=\\\"text-2xl font-bold text-gray-800\\\">Upcoming Bookings</h2>\\n            <span className=\\\"text-blue-500\\\">View All</span>\\n          </div>\\n          \\n          <div className=\\\"bg-gray-50 rounded-lg p-8 text-center text-gray-500\\\">\\n            No upcoming bookings\\n          </div>\\n        </div>\\n      </div>\\n\\n      {/* Navigation */}\\n      <div className=\\\"fixed bottom-0 left-0 right-0 h-16 bg-white border-t border-gray-200 flex items-center justify-around px-4\\\">\\n        <div className=\\\"flex flex-col items-center text-blue-500\\\">\\n          <Home size={20} />\\n          <span className=\\\"text-xs mt-1\\\">Home</span>\\n        </div>\\n        <div className=\\\"flex flex-col items-center text-gray-400\\\">\\n          <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 24 24\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" strokeWidth=\\\"2\\\" strokeLinecap=\\\"round\\\" strokeLinejoin=\\\"round\\\">\\n            <rect x=\\\"3\\\" y=\\\"4\\\" width=\\\"18\\\" height=\\\"18\\\" rx=\\\"2\\\" ry=\\\"2\\\"></rect>\\n            <line x1=\\\"16\\\" y1=\\\"2\\\" x2=\\\"16\\\" y2=\\\"6\\\"></line>\\n            <line x1=\\\"8\\\" y1=\\\"2\\\" x2=\\\"8\\\" y2=\\\"6\\\"></line>\\n            <line x1=\\\"3\\\" y1=\\\"10\\\" x2=\\\"21\\\" y2=\\\"10\\\"></line>\\n          </svg>\\n          <span className=\\\"text-xs mt-1\\\">Bookings</span>\\n        </div>\\n        <div className=\\\"flex flex-col items-center text-gray-400\\\">\\n          <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 24 24\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" strokeWidth=\\\"2\\\" strokeLinecap=\\\"round\\\" strokeLinejoin=\\\"round\\\">\\n            <path d=\\\"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z\\\"></path>\\n          </svg>\\n          <span className=\\\"text-xs mt-1\\\">Messages</span>\\n        </div>\\n        <div className=\\\"flex flex-col items-center text-gray-400\\\">\\n          <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 24 24\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" strokeWidth=\\\"2\\\" strokeLinecap=\\\"round\\\" strokeLinejoin=\\\"round\\\">\\n            <path d=\\\"M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2\\\"></path>\\n            <circle cx=\\\"12\\\" cy=\\\"7\\\" r=\\\"4\\\"></circle>\\n          </svg>\\n          <span className=\\\"text-xs mt-1\\\">Profile</span>\\n        </div>\\n      </div>\\n    </div>\\n  );\\n};\\n\\nexport default HomePage;\",\n  \"src/constants/Colors.ts\": \"// src/constants/Colors.ts\\nexport const Colors = {\\n    primary: '#3498db',\\n    primaryLight: '#5dade2',\\n    primaryDark: '#2980b9',\\n    secondary: '#1abc9c',\\n    secondaryLight: '#48c9b0',\\n    secondaryDark: '#16a085',\\n    background: '#f8f9fa',\\n    white: '#ffffff',\\n    black: '#000000',\\n    text: '#2c3e50',\\n    textLight: '#7f8c8d',\\n    error: '#e74c3c',\\n    success: '#2ecc71',\\n    warning: '#f39c12',\\n    gray: '#bdc3c7',\\n    grayLight: '#ecf0f1',\\n    grayDark: '#95a5a6',\\n    border: '#dfe4ea',\\n    shadow: 'rgba(0, 0, 0, 0.1)',\\n  };\\n  \\n  export default Colors;\",\n  \"src/contexts/AuthContext.tsx\": \"// src/contexts/AuthContext.tsx\\n'use client';\\n\\nimport React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\\nimport { authAPI } from '@/services/api';\\n\\ninterface User {\\n  _id: string;\\n  firstName: string;\\n  lastName: string;\\n  email: string;\\n  phone?: string;\\n  role?: 'customer' | 'cleaner' | 'admin';\\n}\\n\\ninterface AuthContextType {\\n  user: User | null;\\n  isLoading: boolean;\\n  isAuthenticated: boolean;\\n  login: (email: string, password: string) => Promise<void>;\\n  register: (userData: any) => Promise<void>;\\n  logout: () => void;\\n  error: string | null;\\n}\\n\\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\\n\\nexport const useAuth = () => {\\n  const context = useContext(AuthContext);\\n  if (context === undefined) {\\n    throw new Error('useAuth must be used within an AuthProvider');\\n  }\\n  return context;\\n};\\n\\ninterface AuthProviderProps {\\n  children: ReactNode;\\n}\\n\\nexport const AuthProvider = ({ children }: AuthProviderProps) => {\\n  const [user, setUser] = useState<User | null>(null);\\n  const [isLoading, setIsLoading] = useState(true);\\n  const [error, setError] = useState<string | null>(null);\\n\\n  // Check if user is already logged in on initial load\\n  useEffect(() => {\\n    const checkAuth = async () => {\\n      //const token = localStorage.getItem('token');\\n        try {\\n          const userData = await authAPI.getUserProfile();\\n          setUser(userData.user);\\n        } catch (err) {\\n          // Token might be expired or invalid\\n          localStorage.removeItem('token');\\n        } finally {\\n          setIsLoading(false);\\n        }\\n      };\\n\\n    checkAuth();\\n  }, []);\\n\\n  const login = async (email: string, password: string) => {\\n    setIsLoading(true);\\n    setError(null);\\n    try {\\n      const response = await authAPI.login(email, password);\\n      //localStorage.setItem('token', response.token);\\n      setUser({\\n        _id: response._id,\\n        firstName: response.firstName,\\n        lastName: response.lastName,\\n        email: response.email,\\n        phone: response.phone,\\n        role: response.role,\\n      });\\n    } catch (err: any) {\\n      setError(err.response?.data?.message || 'Failed to login');\\n      throw err;\\n    } finally {\\n      setIsLoading(false);\\n    }\\n  };\\n\\n  const register = async (userData: any) => {\\n    setIsLoading(true);\\n    setError(null);\\n    try {\\n      const response = await authAPI.register(userData);\\n      //localStorage.setItem('token', response.token);\\n      setUser({\\n        _id: response._id,\\n        firstName: response.firstName,\\n        lastName: response.lastName,\\n        email: response.email,\\n        phone: response.phone,\\n        role: response.role,\\n      });\\n    } catch (err: any) {\\n      setError(err.response?.data?.message || 'Failed to register');\\n      throw err;\\n    } finally {\\n      setIsLoading(false);\\n    }\\n  };\\n\\n  const logout = async () => {\\n    try {\\n      // Call the logout endpoint to clear cookies on the server\\n      await authAPI.logout();\\n    } catch (err) {\\n      console.error(\\\"Error during logout:\\\", err);\\n    } finally {\\n      // Clear any legacy tokens\\n      localStorage.removeItem('token');\\n      setUser(null);\\n    }\\n  };\\n\\n  return (\\n    <AuthContext.Provider\\n      value={{\\n        user,\\n        isLoading,\\n        isAuthenticated: !!user,\\n        login,\\n        register,\\n        logout,\\n        error,\\n      }}\\n    >\\n      {children}\\n    </AuthContext.Provider>\\n  );\\n};\\n\\nexport default AuthProvider;\",\n  \"src/middleware.ts\": \"// Update your src/middleware.ts\\nimport { NextResponse } from 'next/server';\\nimport type { NextRequest } from 'next/server';\\n\\nexport function middleware(request: NextRequest) {\\n  // Check for token in both cookies and local storage\\n  const token = request.cookies.get('token') || \\n                // Can't access localStorage in middleware, so we just check cookies\\n                null;\\n  \\n  // Define auth routes\\n  const authRoutes = ['/login', '/register'];\\n  \\n  // Check if current path is an auth route\\n  const isAuthRoute = authRoutes.some(route => \\n    request.nextUrl.pathname === route || \\n    request.nextUrl.pathname.startsWith(route)\\n  );\\n  \\n  // Debug info in headers (you can remove this in production)\\n  const response = NextResponse.next();\\n  response.headers.set('x-middleware-cache', 'no-cache');\\n  \\n  // Redirect to login if no token and trying to access non-auth pages\\n  if (!token && request.nextUrl.pathname === '/') {\\n    return NextResponse.redirect(new URL('/login', request.url));\\n  }\\n  \\n  // Redirect to home if has token and trying to access auth routes\\n  if (token && isAuthRoute) {\\n    return NextResponse.redirect(new URL('/', request.url));\\n  }\\n  \\n  return response;\\n}\\n\\n// Run middleware on specified routes\\nexport const config = {\\n  matcher: ['/', '/login', '/register'],\\n};\",\n  \"src/services/api.ts\": \"// src/services/api.ts\\nimport axios, { InternalAxiosRequestConfig } from 'axios';\\n\\nconst API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:5001/api';\\n\\n// Create an axios instance\\nconst api = axios.create({\\n  baseURL: API_URL,\\n  headers: {\\n    'Content-Type': 'application/json',\\n  },\\n  withCredentials: true\\n});\\n\\n// Add a request interceptor to include the auth token in requests\\napi.interceptors.request.use(\\n  (config: InternalAxiosRequestConfig) => {\\n    // Only run in browser environment\\n    if (typeof window !== 'undefined') {\\n      const token = localStorage.getItem('token');\\n      if (token && config.headers) {\\n        config.headers.Authorization = `Bearer ${token}`;\\n      }\\n    }\\n    return config;\\n  },\\n  (error: any) => {\\n    return Promise.reject(error);\\n  }\\n);\\n\\n\\n// Add a response interceptor to handle expired tokens\\napi.interceptors.response.use(\\n  (response) => response,\\n  (error) => {\\n    // Check if error is 401 Unauthorized\\n    if (error.response && error.response.status === 401) {\\n      // Clear token\\n      localStorage.removeItem('token');\\n      \\n      // If we're in the browser, redirect to login page\\n      if (typeof window !== 'undefined') {\\n        // Set optional message to display on login page\\n        sessionStorage.setItem('authMessage', 'Your session has expired. Please log in again.');\\n        \\n        // Redirect to login\\n        //window.location.href = '/login';\\n      }\\n    }\\n    \\n    return Promise.reject(error);\\n  }\\n);\\n\\n// Define interfaces for the data structures\\ninterface UserData {\\n  firstName: string;\\n  lastName: string;\\n  email: string;\\n  phone?: string;\\n  password: string;\\n  role?: string;\\n}\\n\\ninterface AddressData {\\n  name: string;\\n  streetAddress: string;\\n  city: string;\\n  state: string;\\n  zipCode: string;\\n  squareFootage: number;\\n  notes?: string;\\n  isDefault?: boolean;\\n}\\n\\ninterface BookingData {\\n  serviceTypeId: string;\\n  addressId: string;\\n  date: string;\\n  timeSlot: string;\\n  squareFootage?: number | null;\\n  hasPets?: boolean;\\n  messiness?: number;\\n  supplies?: 'customer' | 'cleaner';\\n  frequency?: 'one-time' | 'weekly' | 'bi-weekly' | 'monthly';\\n  notes?: string;\\n  preferredDates?: string[];\\n  preferredTimeSlots?: string[];\\n  flexibleScheduling?: boolean;\\n  cleanerId?: string | null;\\n}\\n\\n// Auth API\\nexport const authAPI = {\\n  register: async (userData: UserData) => {\\n    const response = await api.post('/auth/register', userData);\\n    return response.data;\\n  },\\n  login: async (email: string, password: string) => {\\n    const response = await api.post('/auth/login', { email, password });\\n    return response.data;\\n  },\\n  logout: async () => {\\n    const response = await api.post('/auth/logout');\\n    return response.data;\\n  },\\n  getUserProfile: async () => {\\n    const response = await api.get('/users/profile');\\n    return response.data;\\n  },\\n};\\n\\n// Address API\\nexport const addressAPI = {\\n  getUserAddresses: async () => {\\n    const response = await api.get('/addresses');\\n    return response.data;\\n  },\\n  createAddress: async (addressData: AddressData) => {\\n    const response = await api.post('/addresses', addressData);\\n    return response.data;\\n  },\\n  updateAddress: async (id: string, addressData: Partial<AddressData>) => {\\n    const response = await api.put(`/addresses/${id}`, addressData);\\n    return response.data;\\n  },\\n  deleteAddress: async (id: string) => {\\n    const response = await api.delete(`/addresses/${id}`);\\n    return response.data;\\n  },\\n};\\n\\n// Service API\\nexport const serviceAPI = {\\n  getServices: async () => {\\n    const response = await api.get('/services');\\n    return response.data;\\n  },\\n  getServiceById: async (id: string) => {\\n    const response = await api.get(`/services/${id}`);\\n    return response.data;\\n  },\\n};\\n\\n// Booking API\\nexport const bookingAPI = {\\n  createBooking: async (bookingData: BookingData) => {\\n    const response = await api.post('/bookings', bookingData);\\n    return response.data;\\n  },\\n  getUserBookings: async () => {\\n    const response = await api.get('/bookings');\\n    return response.data;\\n  },\\n  getBookingById: async (id: string) => {\\n    const response = await api.get(`/bookings/${id}`);\\n    return response.data;\\n  },\\n  cancelBooking: async (id: string) => {\\n    const response = await api.delete(`/bookings/${id}`);\\n    return response.data;\\n  },\\n  getAvailableTimeSlots: async (date: string) => {\\n    const response = await api.get(`/bookings/slots/${date}`);\\n    return response.data;\\n  },\\n};\\n\\nexport default api;\",\n  \"src/store/bookingStore.ts\": \"// src/store/bookingStore.ts\\nimport { create } from 'zustand';\\nimport { persist } from 'zustand/middleware';\\nimport { bookingAPI } from '@/services/api';\\n\\n// Define interfaces for the data structures\\ninterface ServiceData {\\n  serviceId: string;\\n  serviceName: string;\\n  serviceDescription: string;\\n  basePrice: number;\\n\\n}\\n\\ninterface AddressData {\\n  addressId: string;\\n  name: string;\\n  streetAddress: string;\\n  city: string;\\n  state: string;\\n  zipCode: string;\\n  squareFootage: number;\\n  notes?: string;\\n}\\n\\ninterface DateTimeData {\\n  date: string;\\n  timeSlot: string;\\n  preferredDates: string[];\\n  preferredTimeSlots: string[];\\n  flexibleScheduling: boolean;\\n}\\n\\ninterface BookingDetails {\\n  hasPets?: boolean;\\n  messiness?: number;\\n  supplies?: 'customer' | 'cleaner';\\n  frequency?: 'one-time' | 'weekly' | 'bi-weekly' | 'monthly';\\n  notes?: string;\\n  suppliesOption?: string;\\n  selectedSupplies?: string[];\\n  suppliesDiscount?: number;\\n}\\n\\ninterface CurrentBooking {\\n  serviceId: string | null;\\n  serviceName: string | null;\\n  serviceDescription: string | null;\\n  basePrice: number | null;\\n  \\n  addressId: string | null;\\n  addressName: string | null;\\n  streetAddress: string | null;\\n  city: string | null;\\n  state: string | null;\\n  zipCode: string | null;\\n  squareFootage: number | null;\\n  \\n  date: string | null;\\n  timeSlot: string | null;\\n  preferredDates: string[];\\n  preferredTimeSlots: string[];\\n  \\n  cleanerId: string | null;\\n  \\n  hasPets: boolean;\\n  messiness: number;\\n  supplies: 'customer' | 'cleaner';\\n  flexibleScheduling: boolean;\\n  frequency: 'one-time' | 'weekly' | 'bi-weekly' | 'monthly';\\n  notes: string;\\n  \\n  estimatedPrice: number | null;\\n}\\n\\ninterface BookingState {\\n  currentBooking: CurrentBooking;\\n  bookings: any[];\\n  isLoading: boolean;\\n  error: string | null;\\n  \\n  setService: (serviceData: ServiceData) => void;\\n  setAddress: (addressData: AddressData) => void;\\n  setDateTime: (dateTimeData: DateTimeData) => void;\\n  setCleaner: (cleanerId: string | null) => void;\\n  setDetails: (details: BookingDetails) => void;\\n  \\n  createBooking: () => Promise<boolean>;\\n  getUserBookings: () => Promise<any[]>;\\n  resetCurrentBooking: () => void;\\n}\\n\\nexport const useBookingStore = create<BookingState>()(\\n  persist(\\n    (set, get) => ({\\n      currentBooking: {\\n        serviceId: null,\\n        serviceName: null,\\n        serviceDescription: null,\\n        basePrice: null,\\n        \\n        addressId: null,\\n        addressName: null,\\n        streetAddress: null,\\n        city: null,\\n        state: null,\\n        zipCode: null,\\n        squareFootage: null,\\n        \\n        date: null,\\n        timeSlot: null,\\n        preferredDates: [],\\n        preferredTimeSlots: [],\\n        \\n        cleanerId: null,\\n        \\n        hasPets: false,\\n        messiness: 5,\\n        supplies: 'cleaner',\\n        flexibleScheduling: false,\\n        frequency: 'one-time',\\n        notes: '',\\n        \\n        estimatedPrice: null,\\n      },\\n      \\n      bookings: [],\\n      isLoading: false,\\n      error: null,\\n      \\n      setService: (serviceData: ServiceData) => set((state) => ({\\n        currentBooking: {\\n          ...state.currentBooking,\\n          serviceId: serviceData.serviceId,\\n          serviceName: serviceData.serviceName,\\n          serviceDescription: serviceData.serviceDescription,\\n          basePrice: serviceData.basePrice,\\n          estimatedPrice: serviceData.basePrice, // Initially set estimated to base price\\n        }\\n      })),\\n      \\n      setAddress: (addressData: AddressData) => set((state) => ({\\n        currentBooking: {\\n          ...state.currentBooking,\\n          addressId: addressData.addressId,\\n          addressName: addressData.name,\\n          streetAddress: addressData.streetAddress,\\n          city: addressData.city,\\n          state: addressData.state,\\n          zipCode: addressData.zipCode,\\n          squareFootage: addressData.squareFootage,\\n        }\\n      })),\\n      \\n      setDateTime: (dateTimeData: DateTimeData) => set((state) => ({\\n        currentBooking: {\\n          ...state.currentBooking,\\n          date: dateTimeData.date,\\n          timeSlot: dateTimeData.timeSlot,\\n          preferredDates: dateTimeData.preferredDates || [],\\n          preferredTimeSlots: dateTimeData.preferredTimeSlots || [],\\n          flexibleScheduling: dateTimeData.flexibleScheduling || false,\\n        }\\n      })),\\n      \\n      setCleaner: (cleanerId: string | null) => set((state) => ({\\n        currentBooking: {\\n          ...state.currentBooking,\\n          cleanerId,\\n        }\\n      })),\\n      \\n      setDetails: (details: BookingDetails) => set((state) => ({\\n        currentBooking: {\\n          ...state.currentBooking,\\n          hasPets: details.hasPets !== undefined ? details.hasPets : state.currentBooking.hasPets,\\n          messiness: details.messiness !== undefined ? details.messiness : state.currentBooking.messiness,\\n          supplies: details.supplies || state.currentBooking.supplies,\\n          frequency: details.frequency || state.currentBooking.frequency,\\n          notes: details.notes !== undefined ? details.notes : state.currentBooking.notes,\\n        }\\n      })),\\n      \\n      createBooking: async () => {\\n        const { currentBooking } = get();\\n        \\n        // Validation\\n        if (!currentBooking.serviceId || !currentBooking.addressId || !currentBooking.date || !currentBooking.timeSlot) {\\n          set({ error: 'Missing required booking information' });\\n          return false;\\n        }\\n        \\n        set({ isLoading: true, error: null });\\n        \\n        try {\\n          const bookingData = {\\n            serviceTypeId: currentBooking.serviceId,\\n            addressId: currentBooking.addressId,\\n            date: currentBooking.date,\\n            timeSlot: currentBooking.timeSlot,\\n            squareFootage: currentBooking.squareFootage,\\n            hasPets: currentBooking.hasPets,\\n            messiness: currentBooking.messiness,\\n            supplies: currentBooking.supplies,\\n            frequency: currentBooking.frequency,\\n            notes: currentBooking.notes,\\n            preferredDates: currentBooking.preferredDates,\\n            preferredTimeSlots: currentBooking.preferredTimeSlots,\\n            flexibleScheduling: currentBooking.flexibleScheduling,\\n            cleanerId: currentBooking.cleanerId,\\n          };\\n          \\n          await bookingAPI.createBooking(bookingData);\\n          return true;\\n        } catch (error: any) {\\n          set({ error: error.response?.data?.message || 'Failed to create booking' });\\n          return false;\\n        } finally {\\n          set({ isLoading: false });\\n        }\\n      },\\n      \\n      getUserBookings: async () => {\\n        set({ isLoading: true, error: null });\\n        \\n        try {\\n          const bookings = await bookingAPI.getUserBookings();\\n          set({ bookings });\\n          return bookings;\\n        } catch (error: any) {\\n          set({ error: error.response?.data?.message || 'Failed to fetch bookings' });\\n          return [];\\n        } finally {\\n          set({ isLoading: false });\\n        }\\n      },\\n      \\n      resetCurrentBooking: () => set({\\n        currentBooking: {\\n          serviceId: null,\\n          serviceName: null,\\n          serviceDescription: null,\\n          basePrice: null,\\n          \\n          addressId: null,\\n          addressName: null,\\n          streetAddress: null,\\n          city: null,\\n          state: null,\\n          zipCode: null,\\n          squareFootage: null,\\n          \\n          date: null,\\n          timeSlot: null,\\n          preferredDates: [],\\n          preferredTimeSlots: [],\\n          \\n          cleanerId: null,\\n          \\n          hasPets: false,\\n          messiness: 5,\\n          supplies: 'cleaner',\\n          flexibleScheduling: false,\\n          frequency: 'one-time',\\n          notes: '',\\n          \\n          estimatedPrice: null,\\n        }\\n      }),\\n    }),\\n    {\\n      name: 'booking-storage',\\n      partialize: (state) => ({ currentBooking: state.currentBooking }),\\n    }\\n  )\\n);\\n\\nexport default useBookingStore;\",\n  \"tailwind.config.js\": \"// tailwind.config.js\\n/** @type {import('tailwindcss').Config} */\\nmodule.exports = {\\n    content: [\\n      './src/pages/**/*.{js,ts,jsx,tsx,mdx}',\\n      './src/components/**/*.{js,ts,jsx,tsx,mdx}',\\n      './src/app/**/*.{js,ts,jsx,tsx,mdx}',\\n    ],\\n    theme: {\\n      extend: {\\n        colors: {\\n          primary: '#3498db',\\n          primaryLight: '#5dade2',\\n          primaryDark: '#2980b9',\\n          secondary: '#1abc9c',\\n          secondaryLight: '#48c9b0',\\n          secondaryDark: '#16a085',\\n          background: '#f8f9fa',\\n          text: '#2c3e50',\\n          textLight: '#7f8c8d',\\n          error: '#e74c3c',\\n          success: '#2ecc71',\\n          warning: '#f39c12',\\n          gray: '#bdc3c7',\\n          grayLight: '#ecf0f1',\\n          grayDark: '#95a5a6',\\n          border: '#dfe4ea',\\n        },\\n        boxShadow: {\\n          custom: '0 2px 10px 0 rgba(0, 0, 0, 0.1)',\\n        },\\n        animation: {\\n          'spin-slow': 'spin 3s linear infinite reverse',\\n          'bounce-delay-1': 'bounce 1s infinite',\\n          'bounce-delay-2': 'bounce 1s infinite 0.2s',\\n          'bounce-delay-3': 'bounce 1s infinite 0.4s',\\n        },\\n      },\\n    },\\n    plugins: [],\\n  };\",\n  \"tsconfig.json\": \"{\\n  \\\"compilerOptions\\\": {\\n    \\\"target\\\": \\\"ES2017\\\",\\n    \\\"lib\\\": [\\\"dom\\\", \\\"dom.iterable\\\", \\\"esnext\\\"],\\n    \\\"allowJs\\\": true,\\n    \\\"skipLibCheck\\\": true,\\n    \\\"strict\\\": true,\\n    \\\"noEmit\\\": true,\\n    \\\"esModuleInterop\\\": true,\\n    \\\"module\\\": \\\"esnext\\\",\\n    \\\"moduleResolution\\\": \\\"bundler\\\",\\n    \\\"resolveJsonModule\\\": true,\\n    \\\"isolatedModules\\\": true,\\n    \\\"jsx\\\": \\\"preserve\\\",\\n    \\\"incremental\\\": true,\\n    \\\"plugins\\\": [\\n      {\\n        \\\"name\\\": \\\"next\\\"\\n      }\\n    ],\\n    \\\"paths\\\": {\\n      \\\"@/*\\\": [\\\"./src/*\\\"]\\n    }\\n  },\\n  \\\"include\\\": [\\\"next-env.d.ts\\\", \\\"**/*.ts\\\", \\\"**/*.tsx\\\", \\\".next/types/**/*.ts\\\"],\\n  \\\"exclude\\\": [\\\"node_modules\\\"]\\n}\\n\"\n}",
  "next-env.d.ts": "/// <reference types=\"next\" />\n/// <reference types=\"next/image-types/global\" />\n\n// NOTE: This file should not be edited\n// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.\n",
  "next.config.ts": "import type { NextConfig } from \"next\";\n\nconst nextConfig: NextConfig = {\n  /* config options here */\n};\n\nexport default nextConfig;\n",
  "package.json": "{\n  \"name\": \"hcleanz-new\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"dev\": \"next dev --turbopack\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"lint\": \"next lint\"\n  },\n  \"dependencies\": {\n    \"axios\": \"^1.8.3\",\n    \"js-cookie\": \"^3.0.5\",\n    \"lucide-react\": \"^0.479.0\",\n    \"next\": \"15.2.2\",\n    \"react\": \"^19.0.0\",\n    \"react-dom\": \"^19.0.0\",\n    \"zustand\": \"^5.0.3\"\n  },\n  \"devDependencies\": {\n    \"@eslint/eslintrc\": \"^3\",\n    \"@tailwindcss/postcss\": \"^4\",\n    \"@types/js-cookie\": \"^3.0.6\",\n    \"@types/node\": \"^20\",\n    \"@types/react\": \"^19\",\n    \"@types/react-dom\": \"^19\",\n    \"eslint\": \"^9\",\n    \"eslint-config-next\": \"15.2.2\",\n    \"tailwindcss\": \"^4\",\n    \"typescript\": \"^5\"\n  }\n}\n",
  "postcss.config.mjs": "const config = {\n  plugins: [\"@tailwindcss/postcss\"],\n};\n\nexport default config;\n",
  "public/file.svg": "<svg fill=\"none\" viewBox=\"0 0 16 16\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z\" clip-rule=\"evenodd\" fill=\"#666\" fill-rule=\"evenodd\"/></svg>",
  "public/globe.svg": "<svg fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><g clip-path=\"url(#a)\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1\" fill=\"#666\"/></g><defs><clipPath id=\"a\"><path fill=\"#fff\" d=\"M0 0h16v16H0z\"/></clipPath></defs></svg>",
  "public/next.svg": "<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 394 80\"><path fill=\"#000\" d=\"M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z\"/><path fill=\"#000\" d=\"M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z\"/></svg>",
  "public/vercel.svg": "<svg fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1155 1000\"><path d=\"m577.3 0 577.4 1000H0z\" fill=\"#fff\"/></svg>",
  "public/window.svg": "<svg fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5\" fill=\"#666\"/></svg>",
  "src/app/booking/address/page.tsx": "'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { addressAPI } from '@/services/api';\nimport { ArrowLeft, Home, ChevronRight, PenLine, Plus, MapPin } from 'lucide-react';\nimport Link from 'next/link';\nimport LoadingOverlay from '@/components/ui/LoadingOverlay';\nimport Cookies from 'js-cookie';\nimport FancyLoader from '@/components/ui/FancyLoader';\n\nexport default function AddressSelectionPage() {\n  const { isAuthenticated, isLoading } = useAuth();\n  const [addresses, setAddresses] = useState<any[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedAddressId, setSelectedAddressId] = useState<string | null>(null);\n  const [showNewAddressForm, setShowNewAddressForm] = useState(false);\n  const [formData, setFormData] = useState({\n    name: '',\n    streetAddress: '',\n    city: '',\n    state: '',\n    zipCode: '',\n    squareFootage: 1000,\n    notes: ''\n  });\n  const [formError, setFormError] = useState<string | null>(null);\n  const router = useRouter();\n\n  useEffect(() => {\n    // Check if service is selected\n    const serviceData = Cookies.get('bookingService');\n    if (!serviceData) {\n      // If no service is selected, go back to home\n      router.push('/booking/new');\n      return;\n    }\n\n    if (!isLoading && !isAuthenticated) {\n      \n      router.push('/auth/login');\n    }\n\n\n    const fetchAddresses = async () => {\n      setLoading(true);\n      try {\n        // Get real addresses from the backend API\n        const addressesData = await addressAPI.getUserAddresses();\n        setAddresses(addressesData);\n        \n        // Check if there's a previously selected address\n        const storedAddress = Cookies.get('bookingAddress');\n        if (storedAddress) {\n          try {\n            const parsed = JSON.parse(storedAddress);\n            setSelectedAddressId(parsed.addressId);\n          } catch (e) {\n            console.error('Error parsing stored address:', e);\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching addresses:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    if (isAuthenticated) {\n      fetchAddresses();\n    }\n  }, [isAuthenticated, isLoading, router]);\n\n  const handleAddressSelect = (address: any) => {\n    setSelectedAddressId(address._id);\n    \n    // Store selected address in cookies for next booking step\n    Cookies.set('bookingAddress', JSON.stringify({\n      addressId: address._id,\n      name: address.name,\n      streetAddress: address.streetAddress,\n      city: address.city,\n      state: address.state,\n      zipCode: address.zipCode,\n      squareFootage: address.squareFootage,\n      notes: address.notes || ''\n    }));\n  };\n\n  const handleContinue = () => {\n    if (selectedAddressId) {\n      router.push('/booking/services');\n    } else {\n      // Scroll to addresses section to prompt selection\n      document.getElementById('addresses-section')?.scrollIntoView({ behavior: 'smooth' });\n    }\n  };\n\n  const handleAddNewAddressClick = () => {\n    setShowNewAddressForm(true);\n  };\n\n  const handleEditAddress = (e: React.MouseEvent, addressId: string) => {\n    e.stopPropagation(); // Prevent selecting the address when clicking edit\n    router.push(`/profile/addresses/edit/${addressId}`);\n  };\n  \n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: name === 'squareFootage' ? parseInt(value) || 0 : value\n    }));\n  };\n\n  const handleSubmitNewAddress = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setFormError(null);\n    \n    // Simple validation\n    if (!formData.name || !formData.streetAddress || !formData.city || !formData.state || !formData.zipCode) {\n      setFormError('Please fill in all required fields');\n      return;\n    }\n    \n    try {\n      setLoading(true);\n      // Save the new address via API\n      const newAddress = await addressAPI.createAddress(formData);\n      \n      // Add to list and select it\n      setAddresses(prev => [...prev, newAddress]);\n      handleAddressSelect(newAddress);\n      \n      // Hide the form\n      setShowNewAddressForm(false);\n      setFormData({\n        name: '',\n        streetAddress: '',\n        city: '',\n        state: '',\n        zipCode: '',\n        squareFootage: 1000,\n        notes: ''\n      });\n    } catch (error) {\n      console.error('Error creating address:', error);\n      setFormError('Error creating address. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const cancelNewAddress = () => {\n    setShowNewAddressForm(false);\n    setFormError(null);\n  };\n\n  if (isLoading || loading) {\n    return <FancyLoader visible={true} message=\"Loading addresses...\" />;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-white pb-20\">\n      {/* Header */}\n      <div className=\"border-b border-gray-200\">\n        <div className=\"px-4 py-4 flex items-center\">\n          <Link href=\"/booking/new\" className=\"mr-2\">\n            <ArrowLeft size={20} className=\"text-gray-800\" />\n          </Link>\n          <h1 className=\"text-lg font-semibold\">Select Address</h1>\n        </div>\n      </div>\n      \n      {/* Content */}\n      <div className=\"px-4 pt-6 max-w-md mx-auto\">\n        <h2 className=\"text-2xl font-bold text-gray-800 mb-1\">\n          Where do you need cleaning?\n        </h2>\n        <p className=\"text-gray-500 mb-6\">\n          Select an address for your cleaning service\n        </p>\n\n        {/* Address Cards */}\n        <div className=\"space-y-4\" id=\"addresses-section\">\n          {addresses.length > 0 ? (\n            addresses.map(address => (\n              <div \n                key={address._id} \n                className={`bg-white rounded-lg border overflow-hidden transition-colors ${\n                  selectedAddressId === address._id \n                    ? 'border-blue-500 bg-blue-500 text-white' \n                    : 'border-gray-200 hover:border-blue-500'\n                }`}\n              >\n                <div \n                  className=\"p-4 cursor-pointer flex items-start justify-between transition-colors\" \n                  onClick={() => handleAddressSelect(address)}\n                >\n                  <div className=\"flex\">\n                    <div className=\"mr-3 mt-1\">\n                      <div className={`w-10 h-10 rounded-full flex items-center justify-center ${\n                        selectedAddressId === address._id \n                          ? 'bg-blue-500 text-white' \n                          : 'bg-blue-100 text-blue-500'\n                      }`}>\n                        <Home size={20} />\n                      </div>\n                    </div>\n                    <div>\n                      <div className=\"font-semibold text-gray-800\">{address.name}</div>\n                      <div className=\"text-sm text-blue-500 font-medium\">{address.squareFootage} sq ft</div>\n                      <div className=\"text-sm mt-2 text-gray-600\">\n                        {address.streetAddress}, {address.city}, {address.state} {address.zipCode}\n                      </div>\n                      {address.notes && (\n                        <div className=\"text-sm text-gray-500 italic mt-1\">\n                          Note: {address.notes}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                  {selectedAddressId === address._id ? (\n                    <div className=\"h-6 w-6 rounded-full bg-blue-500 flex items-center justify-center\">\n                      <svg width=\"12\" height=\"9\" viewBox=\"0 0 12 9\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path d=\"M1 4L4.5 7.5L11 1\" stroke=\"white\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\n                      </svg>\n                    </div>\n                  ) : (\n                    <ChevronRight size={20} className=\"text-gray-400\" />\n                  )}\n                </div>\n                <div className=\"border-t border-gray-200 px-4 py-2 flex justify-end\">\n                  <button \n                    className=\"text-blue-500 flex items-center text-sm font-medium\"\n                    onClick={(e) => handleEditAddress(e, address._id)}\n                  >\n                    <PenLine size={16} className=\"mr-1\" />\n                    Edit\n                  </button>\n                </div>\n              </div>\n            ))\n          ) : (\n            <div className=\"text-center py-8 bg-gray-50 rounded-lg border border-gray-200\">\n              <MapPin size={40} className=\"mx-auto text-gray-400 mb-3\" />\n              <p className=\"text-gray-500 mb-2\">No addresses found</p>\n              <p className=\"text-gray-500 text-sm mb-4\">Please add an address to continue</p>\n              <button \n                className=\"bg-blue-500 text-white px-4 py-2 rounded-lg text-sm font-medium cursor-pointer hover:bg-blue-600 transition-colors\"\n                onClick={handleAddNewAddressClick}\n              >\n                Add New Address\n              </button>\n            </div>\n          )}\n        </div>\n\n        {/* Add New Address Button */}\n        {addresses.length > 0 && !showNewAddressForm && (\n          <div className=\"mt-6\">\n            <button \n              className=\"w-full border border-blue-500 text-blue-500 rounded-lg py-3 flex items-center justify-center font-medium hover:bg-blue-500 hover:text-white transition-colors cursor-pointer\"\n              onClick={handleAddNewAddressClick}\n            >\n              <Plus size={20} className=\"mr-2\" />\n              Add New Address\n            </button>\n          </div>\n        )}\n\n        {/* New Address Form */}\n        {showNewAddressForm && (\n          <div className=\"mt-6 bg-white rounded-lg border border-gray-200 p-4\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-semibold text-gray-800\">Add New Address</h3>\n              <button \n                className=\"text-gray-500\"\n                onClick={cancelNewAddress}\n              >\n                &times;\n              </button>\n            </div>\n            \n            {formError && (\n              <div className=\"mb-4 p-3 bg-red-50 border border-red-200 rounded-lg text-red-600 text-sm\">\n                {formError}\n              </div>\n            )}\n            \n            <form onSubmit={handleSubmitNewAddress}>\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    Location Name*\n                  </label>\n                  <input\n                    type=\"text\"\n                    name=\"name\"\n                    value={formData.name}\n                    onChange={handleInputChange}\n                    placeholder=\"Home, Office, etc.\"\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    required\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    Street Address*\n                  </label>\n                  <input\n                    type=\"text\"\n                    name=\"streetAddress\"\n                    value={formData.streetAddress}\n                    onChange={handleInputChange}\n                    placeholder=\"123 Main St\"\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    required\n                  />\n                </div>\n                \n                <div className=\"grid grid-cols-2 gap-3\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                      City*\n                    </label>\n                    <input\n                      type=\"text\"\n                      name=\"city\"\n                      value={formData.city}\n                      onChange={handleInputChange}\n                      placeholder=\"City\"\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      required\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                      State*\n                    </label>\n                    <input\n                      type=\"text\"\n                      name=\"state\"\n                      value={formData.state}\n                      onChange={handleInputChange}\n                      placeholder=\"State\"\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      required\n                    />\n                  </div>\n                </div>\n                \n                <div className=\"grid grid-cols-2 gap-3\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                      ZIP Code*\n                    </label>\n                    <input\n                      type=\"text\"\n                      name=\"zipCode\"\n                      value={formData.zipCode}\n                      onChange={handleInputChange}\n                      placeholder=\"12345\"\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      required\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                      Square Footage*\n                    </label>\n                    <input\n                      type=\"number\"\n                      name=\"squareFootage\"\n                      value={formData.squareFootage}\n                      onChange={handleInputChange}\n                      placeholder=\"1000\"\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      required\n                    />\n                  </div>\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    Notes (Optional)\n                  </label>\n                  <textarea\n                    name=\"notes\"\n                    value={formData.notes}\n                    onChange={handleInputChange}\n                    placeholder=\"Any special instructions for finding or accessing this location\"\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 h-24\"\n                  />\n                </div>\n                \n                <div className=\"flex space-x-3 pt-2\">\n                  <button\n                    type=\"button\"\n                    onClick={cancelNewAddress}\n                    className=\"flex-1 py-3 border border-gray-300 rounded-lg font-medium text-gray-700 hover:bg-gray-50 hover:scale-105 cursor-pointer\"\n                  >\n                    Cancel\n                  </button>\n                  <button\n                    type=\"submit\"\n                    className=\"flex-1 py-3 bg-blue-500 text-white rounded-lg font-medium hover:bg-blue-600 hover:scale-105 cursor-pointer\"\n                  >\n                    Save Address\n                  </button>\n                </div>\n              </div>\n            </form>\n          </div>\n        )}\n\n        {/* Continue Button - Only show if we have addresses and not showing the form */}\n        {addresses.length > 0 && !showNewAddressForm && (\n          <div className=\"fixed bottom-16 left-0 right-0 bg-white border-t border-gray-200 p-4\">\n            <button\n              onClick={handleContinue}\n              disabled={!selectedAddressId}\n              className={`w-full py-4 rounded-[36px] text-white font-medium transition-colors cursor-pointer hover:scale-105 ${\n                selectedAddressId ? 'bg-blue-500 hover:bg-blue-600' : 'bg-gray-300 cursor-not-allowed'\n              }`}\n            >\n              Continue\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}",
  "src/app/booking/datetime/page.tsx": "'use client';\n\nimport { useState, useEffect, useRef } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { bookingAPI } from '@/services/api';\nimport LoadingOverlay from '@/components/ui/LoadingOverlay';\nimport Button from '@/components/ui/Button';\nimport Card from '@/components/ui/Card';\nimport { ArrowLeft, Clock, Calendar, Check, Info, DollarSign } from 'lucide-react';\nimport Link from 'next/link';\nimport Cookies from 'js-cookie';\nimport FancyLoader from '@/components/ui/FancyLoader';\n\nexport default function DateTimeSelectionPage() {\n  const [selectedDates, setSelectedDates] = useState<string[]>([]);\n  const [selectedTimeSlots, setSelectedTimeSlots] = useState<string[]>([]);\n  const [availableDates, setAvailableDates] = useState<{ date: Date; formatted: string; day: string; dayNum: string; month: string }[]>([]);\n  const [availableTimeSlots, setAvailableTimeSlots] = useState<{ id: string; time: string; isSelected: boolean }[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [cleaningTime, setCleaningTime] = useState(\"2 hours 36 min\");\n  const [cleaningDuration, setCleaningDuration] = useState(156); // in minutes\n  const [bookingMode, setBookingMode] = useState<'specific' | 'flexible'>('flexible');\n  const [multipleCleanersRequired, setMultipleCleanersRequired] = useState(false);\n  const { isAuthenticated, isLoading } = useAuth();\n  const router = useRouter();\n  const isNavigating = useRef(false); // Use ref to prevent repeated navigation attempts\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      router.push('/login');\n      return;\n    }\n\n    // Check if we have booking service and address data\n    const bookingService = Cookies.get('bookingService');\n    const bookingAddress = Cookies.get('bookingAddress');\n    if (!bookingService || !bookingAddress) {\n      router.push('/booking/new');\n      return;\n    }\n\n    // Generate next 7 days as available dates\n    generateDates();\n    generateTimeSlots();\n    \n    // Check if multiple cleaners are needed\n    setMultipleCleanersRequired(cleaningDuration > 360); // 6 hours in minutes\n    \n    setLoading(false);\n  }, [isAuthenticated, isLoading, router]); // Remove cleaningDuration from dependencies\n\n  // Generate dates for the next 7 days starting from tomorrow\n  const generateDates = () => {\n    const dates = [];\n    const today = new Date();\n    const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    \n    // Start from tomorrow for 7 days\n    for (let i = 1; i <= 7; i++) {\n      const date = new Date();\n      date.setDate(today.getDate() + i);\n      \n      dates.push({\n        date: date,\n        formatted: date.toISOString().split('T')[0],\n        day: daysOfWeek[date.getDay()],\n        dayNum: date.getDate().toString(),\n        month: months[date.getMonth()]\n      });\n    }\n    \n    setAvailableDates(dates);\n  };\n\n  // Generate time slots based on the cleaning duration and business rules\n  const generateTimeSlots = () => {\n    const slots = [];\n    const startHour = 8; // 8 AM\n    const endHour = 20; // 8 PM (cutoff time)\n    const maxSingleCleanerDuration = 360; // 6 hours in minutes\n\n    // Calculate the latest possible start time\n    const durationHours = cleaningDuration / 60;\n    const latestStartHour = endHour - durationHours;\n    \n    // Generate slots from 8 AM until latest possible start time\n    for (let hour = startHour; hour <= latestStartHour; hour += 2) {\n      // Format the start time\n      const startHourFormatted = hour > 12 ? hour - 12 : hour;\n      const startAmPm = hour >= 12 ? 'PM' : 'AM';\n      \n      // Calculate and format the end time\n      const endHour = hour + 2;\n      const endHourFormatted = endHour > 12 ? endHour - 12 : endHour;\n      const endAmPm = endHour >= 12 ? 'PM' : 'AM';\n      \n      // Create the time slot string\n      const timeSlot = `${startHourFormatted}:00 ${startAmPm} - ${endHourFormatted}:00 ${endAmPm}`;\n      \n      slots.push({\n        id: hour.toString(),\n        time: timeSlot,\n        isSelected: false\n      });\n    }\n    \n    setAvailableTimeSlots(slots);\n  };\n\n  // Handle date selection logic\n  const handleDateSelection = (formatted: string) => {\n    if (bookingMode === 'specific' && selectedDates.length === 1 && !selectedDates.includes(formatted)) {\n      // In specific mode, only one date can be selected\n      setSelectedDates([formatted]);\n      return;\n    }\n    \n    const updatedSelection = [...selectedDates];\n    const index = updatedSelection.indexOf(formatted);\n    \n    if (index > -1) {\n      // Deselect the date\n      updatedSelection.splice(index, 1);\n    } else {\n      // In flexible mode, allow up to 3 selections\n      if (updatedSelection.length < 3) {\n        updatedSelection.push(formatted);\n      }\n    }\n    \n    setSelectedDates(updatedSelection);\n  };\n\n  // Handle time slot selection logic\n  const handleTimeSlotSelection = (id: string) => {\n    const updatedTimeSlots = [...availableTimeSlots].map(slot => {\n      if (slot.id === id) {\n        return {...slot, isSelected: !slot.isSelected};\n      }\n      \n      // In specific mode, only allow one selection\n      if (bookingMode === 'specific' && !slot.isSelected) {\n        return slot;\n      }\n      \n      return slot;\n    });\n    \n    // Count selected time slots\n    const selectedSlots = updatedTimeSlots.filter(slot => slot.isSelected).map(slot => slot.id);\n    \n    // In specific mode, ensure only one time slot is selected\n    if (bookingMode === 'specific' && selectedSlots.length > 1) {\n      const clickedSlot = updatedTimeSlots.find(slot => slot.id === id);\n      updatedTimeSlots.forEach(slot => {\n        slot.isSelected = slot.id === id ? clickedSlot!.isSelected : false;\n      });\n    }\n    \n    // In flexible mode, ensure maximum 3 selections\n    if (bookingMode === 'flexible' && selectedSlots.length > 3) {\n      return;\n    }\n    \n    setAvailableTimeSlots(updatedTimeSlots);\n    setSelectedTimeSlots(updatedTimeSlots.filter(slot => slot.isSelected).map(slot => slot.id));\n  };\n\n  // Toggle between specific and flexible booking modes\n  const toggleBookingMode = (mode: 'specific' | 'flexible') => {\n    if (mode === bookingMode) return;\n    \n    setBookingMode(mode);\n    \n    // Reset selections when changing modes\n    setSelectedDates([]);\n    setAvailableTimeSlots(availableTimeSlots.map(slot => ({...slot, isSelected: false})));\n    setSelectedTimeSlots([]);\n  };\n\n  // Check if the discount should be applied (3 time slots selected in flexible mode)\n  const shouldApplyDiscount = () => {\n    return bookingMode === 'flexible' && selectedTimeSlots.length === 3;\n  };\n\n  // Handle the continue button click\n  const handleContinue = () => {\n    // Prevent multiple navigation attempts\n    if (isNavigating.current) return;\n    isNavigating.current = true;\n    \n    console.log(\"handleContinue called\");\n    // Validate selections - simply check that at least one date and time are selected\n    if (selectedDates.length === 0 || selectedTimeSlots.length === 0) {\n      console.log(\"Validation failed - missing dates or time slots\");\n      isNavigating.current = false;\n      return;\n    }\n\n    console.log(\"Validation passed, saving to cookies\");\n\n    try {\n      // Get timeslot strings from ids\n      const timeSlotStrings = selectedTimeSlots.map(id => {\n        const slot = availableTimeSlots.find(slot => slot.id === id);\n        return slot ? slot.time : '';\n      }).filter(Boolean);\n\n      // Create the data object\n      const dateTimeData = {\n        date: selectedDates[0], // Use the first selected date as primary\n        timeSlot: timeSlotStrings[0], // Use the first selected time as primary\n        preferredDates: selectedDates,\n        preferredTimeSlots: timeSlotStrings,\n        flexibleScheduling: bookingMode === 'flexible',\n        discountApplied: shouldApplyDiscount()\n      };\n\n      // Store date/time in cookies - use JSONstringify for the entire object\n      Cookies.set('bookingDateTime', JSON.stringify(dateTimeData), { expires: 7 });\n\n      console.log(\"About to navigate to summary page\");\n\n      // Use setTimeout to ensure cookie is set before navigation\n      setTimeout(() => {\n        router.push('/booking/summary');\n      }, 200);\n    } catch (error) {\n      console.error(\"Error saving date/time data:\", error);\n      isNavigating.current = false;\n    }\n  };\n\n  // Check if the continue button should be enabled\n  const isContinueEnabled = () => {\n    // Enable button as soon as at least one date and one time are selected\n    return selectedDates.length > 0 && selectedTimeSlots.length > 0;\n  };\n\n  if (isLoading || loading) {\n    return <FancyLoader visible={true} message=\"Loading scheduling options...\" />;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-white px-4 py-0\">\n      <div className=\"max-w-md mx-auto\">\n        <div className=\"py-4 flex items-center border-b border-gray-200\">\n          <Link href=\"/booking/address\" className=\"mr-2\">\n            <ArrowLeft size={20} className=\"text-gray-800\" />\n          </Link>\n          <h1 className=\"text-lg font-semibold\">Select Date & Time</h1>\n        </div>\n\n        <div className=\"py-4\">\n          <h2 className=\"text-2xl font-bold text-gray-800 mb-1\">When do you need cleaning?</h2>\n          <p className=\"text-gray-500 mb-6\">\n            Select your preferred dates and times for your cleaning service\n          </p>\n\n          {/* Max Clean Time Section */}\n          <div className=\"bg-blue-50 rounded-lg p-4 mb-6\">\n            <div className=\"flex items-start mb-1\">\n              <Clock size={20} className=\"text-blue-500 mr-2 mt-1\" />\n              <div>\n                <h3 className=\"font-semibold text-gray-800\">Max Clean Time</h3>\n                <p className=\"text-blue-500 text-xl font-bold\">{cleaningTime}</p>\n              </div>\n            </div>\n            <p className=\"text-gray-600 text-sm\">\n              Based on your property size and selected services, we've calculated the maximum time needed for your cleaning.\n            </p>\n            <p className=\"text-gray-500 text-sm italic mt-2\">\n              Note: All cleanings must finish by 6:00 PM, so your available time slots are limited accordingly.\n            </p>\n            \n            {multipleCleanersRequired && (\n              <div className=\"mt-2 p-2 bg-yellow-50 border border-yellow-200 rounded-md text-sm text-yellow-700\">\n                <Info size={16} className=\"inline-block mr-1\" />\n                This cleaning will require multiple cleaners due to its duration.\n              </div>\n            )}\n          </div>\n\n          {/* Flexible Scheduling Section */}\n          <div className=\"bg-blue-50 rounded-lg p-4 mb-6\">\n            <div className=\"flex items-center justify-between mb-3\">\n              <div className=\"flex items-start\">\n                <Info size={20} className=\"text-blue-500 mr-2 mt-1\" />\n                <div>\n                  <h3 className=\"font-semibold text-gray-800\">Flexible Scheduling</h3>\n                  <p className=\"text-gray-600 text-sm\">\n                    Select multiple dates and times if you're flexible. You'll receive a 5% discount for flexible scheduling!\n                  </p>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-4 mb-2\">\n              <div \n                className={`px-4 py-2 rounded-full cursor-pointer hover:scale-105 transition-colors ${\n                  bookingMode === 'specific' \n                    ? 'bg-blue-500 text-white' \n                    : 'bg-gray-200 text-gray-700'\n                }`}\n                onClick={() => toggleBookingMode('specific')}\n              >\n                Specific Time\n              </div>\n              <div \n                className={`px-4 py-2 rounded-full cursor-pointer hover:scale-105 transition-colors ${\n                  bookingMode === 'flexible' \n                    ? 'bg-blue-500 text-white' \n                    : 'bg-gray-200 text-gray-700'\n                }`}\n                onClick={() => toggleBookingMode('flexible')}\n              >\n                Flexible Time\n              </div>\n            </div>\n            \n            {shouldApplyDiscount() && (\n              <div className=\"bg-green-400 text-white text-sm font-medium rounded-full px-4 py-2 inline-flex items-center\">\n                <DollarSign size={16} className=\"mr-1\" /> 5% Discount Applied\n              </div>\n            )}\n          </div>\n\n          {/* Date Selection Section */}\n          <div className=\"mb-6\">\n            <div className=\"flex items-center justify-between mb-3\">\n              <div className=\"flex items-center\">\n                <Calendar size={18} className=\"text-blue-500 mr-2\" />\n                <h3 className=\"font-semibold text-gray-800\">Select Date(s)</h3>\n              </div>\n              <span className=\"text-blue-500 text-sm\">\n                {selectedDates.length}/{bookingMode === 'flexible' ? '3' : '1'} selected\n              </span>\n            </div>\n            \n            <div className=\"grid grid-cols-4 gap-2\">\n              {availableDates.map((dateObj) => (\n                <div\n                  key={dateObj.formatted}\n                  className={`border rounded-lg p-3 text-center cursor-pointer hover:scale-105 transition-colors ${\n                    selectedDates.includes(dateObj.formatted)\n                      ? 'border-blue-500 bg-blue-50'\n                      : 'border-gray-200 hover:border-blue-300'\n                  }`}\n                  onClick={() => handleDateSelection(dateObj.formatted)}\n                >\n                  <div className=\"text-sm font-medium text-gray-500\">{dateObj.day}</div>\n                  <div className=\"text-lg font-bold text-gray-800\">{dateObj.dayNum}</div>\n                  <div className=\"text-sm text-gray-500\">{dateObj.month}</div>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Time Slot Selection Section */}\n          <div className=\"mb-6\">\n            <div className=\"flex items-center justify-between mb-3\">\n              <div className=\"flex items-center\">\n                <Clock size={18} className=\"text-blue-500 mr-2\" />\n                <h3 className=\"font-semibold text-gray-800\">Select Time(s)</h3>\n              </div>\n              <span className=\"text-blue-500 text-sm\">\n                {selectedTimeSlots.length}/{bookingMode === 'flexible' ? '3' : '1'} selected\n              </span>\n            </div>\n            \n            <div className=\"grid grid-cols-2 gap-3\">\n              {availableTimeSlots.map((slot) => (\n                <div\n                  key={slot.id}\n                  className={`border rounded-lg p-3 flex justify-between items-center cursor-pointer hover:scale-105 transition-colors ${\n                    slot.isSelected\n                      ? 'border-blue-500 bg-blue-500 text-white'\n                      : 'border-gray-200 hover:border-blue-300'\n                  }`}\n                  onClick={() => handleTimeSlotSelection(slot.id)}\n                >\n                  <span className=\"font-medium\">{slot.time}</span>\n                  {slot.isSelected && (\n                    <Check size={18} className=\"text-white\" />\n                  )}\n                </div>\n              ))}\n            </div>\n            \n            <p className=\"text-gray-500 text-sm italic mt-3\">\n              Note: Available time slots are limited based on your estimated cleaning time of {cleaningTime}. All cleanings must finish by 6:00 PM.\n            </p>\n          </div>\n\n          {/* Continue Button */}\n          <button\n            className={`w-full py-4 mb-20 ${\n              isContinueEnabled()\n                ? 'bg-blue-500 text-white hover:bg-blue-600'\n                : 'bg-gray-200 text-gray-400'\n            } rounded-[36px] text-center font-medium my-8 transition-colors hover:scale-105 cursor-pointer`}\n            disabled={!isContinueEnabled()}\n            onClick={handleContinue}\n          >\n            Continue\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}",
  "src/app/booking/new/page.tsx": "'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { serviceAPI } from '@/services/api';\nimport LoadingOverlay from '@/components/ui/LoadingOverlay';\nimport Button from '@/components/ui/Button';\nimport { ArrowLeft, CheckSquare } from 'lucide-react';\nimport Link from 'next/link';\nimport useBookingStore from '@/store/bookingStore';\nimport Cookies from 'js-cookie';\nimport FancyLoader from '@/components/ui/FancyLoader';\n\nexport default function ServiceSelectionPage() {\n  // Services and cleaning types\n  const [cleaningTypes, setCleaningTypes] = useState([\n    { id: 'standard', name: 'Standard Clean', description: 'Basic cleaning for regular maintenance', price: 98, icon: 'standard' },\n    { id: 'deep', name: 'Deep Clean', description: 'Thorough cleaning for neglected areas', price: 145, icon: 'deep' },\n    { id: 'move', name: 'Move In/Out', description: 'Complete cleaning for moving', price: 165, icon: 'move' },\n    { id: 'party', name: 'Party Clean', description: 'Quick cleanup after events', price: 120, icon: 'party' },\n    { id: 'office', name: 'Office Clean', description: 'Professional cleaning for workspaces', price: 110, icon: 'office' }\n  ]);\n  const [selectedCleaningType, setSelectedCleaningType] = useState<string | null>(null);\n  \n  // Square footage state\n  const [squareFootageMode, setSquareFootageMode] = useState(false);\n  \n  // Loading state\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  \n  const { isAuthenticated, isLoading } = useAuth();\n  const router = useRouter();\n  const setService = useBookingStore(state => state.setService);\n  \n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      router.push('/auth/login');\n      return;\n    }\n\n    // Fetch services from API\n    const fetchServices = async () => {\n      try {\n        const servicesData = await serviceAPI.getServices();\n        if (servicesData && servicesData.length > 0) {\n          // Map API data to our format if needed\n          // setCleaningTypes(servicesData);\n        }\n      } catch (err) {\n        console.error('Error fetching services:', err);\n        // Continue with default data\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    if (isAuthenticated) {\n      fetchServices();\n    }\n  }, [isAuthenticated, isLoading, router]);\n  \n  const handleCleaningTypeSelection = (typeId: string) => {\n    setSelectedCleaningType(typeId);\n  };\n  \n  const toggleSquareFootageMode = () => {\n    setSquareFootageMode(!squareFootageMode);\n  };\n  \n  const handleContinue = () => {\n    if (!selectedCleaningType) return;\n    \n    const selectedType = cleaningTypes.find(type => type.id === selectedCleaningType);\n    \n    if (selectedType) {\n      // Store service info in cookies\n      Cookies.set('bookingService', JSON.stringify({\n        serviceId: selectedType.id,\n        serviceName: selectedType.name,\n        serviceDescription: selectedType.description,\n        basePrice: selectedType.price\n      }));\n      \n      // Save to Zustand store\n      setService({\n        serviceId: selectedType.id,\n        serviceName: selectedType.name,\n        serviceDescription: selectedType.description,\n        basePrice: selectedType.price\n      });\n      \n      // Navigate to address selection\n      router.push('/booking/address');\n    }\n  };\n\n  if (isLoading || loading) {\n    return <FancyLoader visible={true} message=\"Loading services...\" />;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      <div className=\"max-w-md mx-auto px-4\">\n        {/* Header */}\n        <div className=\"py-4 flex items-center border-b border-gray-200\">\n          <Link href=\"/\" className=\"mr-2\">\n            <ArrowLeft size={20} className=\"text-gray-800\" />\n          </Link>\n          <h1 className=\"text-lg font-semibold\">Select Services</h1>\n        </div>\n        \n        {/* Cleaning Type Selection */}\n        <div className=\"py-4\">\n          <div className=\"flex items-center mb-4\">\n            <CheckSquare size={20} className=\"text-blue-500 mr-2\" />\n            <h2 className=\"text-lg font-semibold\">Select Cleaning Type</h2>\n          </div>\n          \n          <div className=\"grid grid-cols-2 gap-3 mb-6\">\n            {cleaningTypes.slice(0, 4).map(type => (\n              <div \n                key={type.id}\n                className={`border rounded-lg p-3 cursor-pointer transition-colors ${\n                  selectedCleaningType === type.id \n                    ? 'border-blue-500 bg-blue-500 text-white' \n                    : 'border-gray-200 hover:border-blue-300'\n                }`}\n                onClick={() => handleCleaningTypeSelection(type.id)}\n              >\n                <h3 className=\"font-semibold\">{type.name}</h3>\n                <p className={`text-sm ${selectedCleaningType === type.id ? 'text-white' : 'text-gray-500'}`}>\n                  {type.description}\n                </p>\n                <p className={`font-semibold mt-1 ${selectedCleaningType === type.id ? 'text-white' : 'text-blue-500'}`}>\n                  ${type.price}\n                </p>\n              </div>\n            ))}\n          </div>\n          \n          {/* Office Clean */}\n          <div \n            className={`border rounded-lg p-3 mb-6 cursor-pointer transition-colors ${\n              selectedCleaningType === 'office' \n                ? 'border-blue-500 bg-blue-500 text-white' \n                : 'border-gray-200 hover:border-blue-300'\n            }`}\n            onClick={() => handleCleaningTypeSelection('office')}\n          >\n           <div className=\"flex items-center\">\n            <div>\n              <h3 className=\"font-semibold\">Office Clean</h3>\n              <p className={`text-sm ${selectedCleaningType === 'office' ? 'text-white' : 'text-gray-500'}`}>\n                Professional cleaning for workspaces\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n        \n        {/* Square Footage */}\n        <div className=\"py-4 border-t border-gray-200\">\n          <div className=\"flex items-center mb-4\">\n            <h2 className=\"text-lg font-semibold\">Square Footage</h2>\n          </div>\n          \n          <div className=\"flex items-center justify-between mb-3\">\n            <p className=\"text-gray-600\">Square Footage Mode</p>\n            <div \n              className={`w-12 h-6 flex items-center rounded-full p-1 cursor-pointer ${\n                squareFootageMode ? 'bg-blue-500 justify-end' : 'bg-gray-300 justify-start'\n              }`}\n              onClick={toggleSquareFootageMode}\n            >\n              <div className=\"bg-white w-4 h-4 rounded-full shadow-md\"></div>\n            </div>\n          </div>\n          \n          <p className=\"text-gray-500 text-sm mb-4\">\n            Adjust the size of your space to get an accurate price estimate.\n          </p>\n        </div>\n        \n        {/* Continue Button */}\n        <button\n          className={`w-full py-4 rounded-lg text-center font-medium transition-colors ${\n            selectedCleaningType \n              ? 'bg-blue-500 text-white hover:bg-blue-600'\n              : 'bg-gray-200 text-gray-400 cursor-not-allowed'\n          }`}\n          disabled={!selectedCleaningType}\n          onClick={handleContinue}\n        >\n          Continue\n        </button>\n        </div>\n    </div>\n  );\n}",
  "src/app/booking/services/page.tsx": "'use client';\n\nimport { useState, useEffect, useRef } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { serviceAPI } from '@/services/api';\nimport useServiceStore from '@/store/serviceStore';\nimport LoadingOverlay from '@/components/ui/LoadingOverlay';\nimport { ArrowLeft, CheckSquare, Home, Clock, Info } from 'lucide-react';\nimport Link from 'next/link';\nimport useBookingStore from '@/store/bookingStore';\nimport MembershipPopup from '@/components/popups/MembershipPopup';\nimport CleaningSuppliesModal from '@/components/ui/CleaningSuppliesModal';\nimport FancyLoader from '@/components/ui/FancyLoader';\nimport Cookies from 'js-cookie';\n\n\nexport default function ServicePage() {\n  // Services and cleaning types\n  const [hours, setHours] = useState(2);\n  const [selectedCleaningType, setSelectedCleaningType] = useState<string | null>(null);\n  \n  // Hours vs Square Footage mode\n  const [hourlyMode, setHourlyMode] = useState(false);\n  const [squareFootage, setSquareFootage] = useState(1000);\n  const [currentPrice, setCurrentPrice] = useState(98);\n  \n  // states to manage popup\n  const [showMembershipPopup, setShowMembershipPopup] = useState(false);\n  const [membershipFrequency, setMembershipFrequency] = useState<'weekly' | 'biweekly' | 'twice-weekly'>('weekly');\n\n  // states to manage cleaning supplies popup component\n  const [showSuppliesModal, setShowSuppliesModal] = useState(false);\n  const [suppliesOption, setSuppliesOption] = useState('bring-everything');\n  const [selectedSupplies, setSelectedSupplies] = useState<string[]>([]);\n  \n\n  // Additional tasks state\n  const [additionalTasks, setAdditionalTasks] = useState([\n    { id: 'oven', name: 'Inside Oven', price: 30, time: 30, count: 0, type: 'add' },\n    { id: 'fridge', name: 'Inside Fridge', price: 30, time: 30, count: 0, type: 'add' },\n    { id: 'cabinets', name: 'Inside Cabinets', price: 15, time: 15, count: 0, type: 'count' },\n    { id: 'laundry', name: 'Laundry', price: 20, time: 30, count: 0, type: 'count' }\n  ]);\n  \n  // Messiness scale\n  const [messiness, setMessiness] = useState(3);\n  \n  // Frequency options\n  const [frequency, setFrequency] = useState('one-time');\n  const frequencies = [\n    { id: 'one-time', name: 'One-time', description: 'Single cleaning service', discount: 0 },\n    { id: 'biweekly', name: 'Biweekly', description: 'Every two weeks', discount: 10 },\n    { id: 'weekly', name: 'Weekly', description: 'Once every week', discount: 15 },\n    { id: 'twice-weekly', name: 'Twice a week', description: 'Two times per week', discount: 20 }\n  ];\n  \n  // Pets\n  const [pets, setPets] = useState<string[]>([]);\n  \n  // Special instructions\n  const [specialInstructions, setSpecialInstructions] = useState('');\n  \n  // Cleaning time calculation\n  const [cleaningTime, setCleaningTime] = useState(\"2 hours\");\n  \n  // Loading state\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  \n  const { isAuthenticated, isLoading } = useAuth();\n  const router = useRouter();\n  const setService = useBookingStore(state => state.setService);\n  const setDetails = useBookingStore(state => state.setDetails);\n\n  // Service store\n  const { serviceTypes, fetchServiceTypes, isLoading: servicesLoading } = useServiceStore();\n  const [selectedServiceId, setSelectedServiceId] = useState<string | null>(null);\n  \n  // Element refs for scrolling\n  const squareFootageRef = useRef<HTMLDivElement>(null);\n  const additionalTasksRef = useRef<HTMLDivElement>(null);\n  const messinessRef = useRef<HTMLDivElement>(null);\n  const frequencyRef = useRef<HTMLDivElement>(null);\n  const petsRef = useRef<HTMLDivElement>(null);\n  \n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      router.push('/auth/login');\n      return;\n    }\n\n    if (isAuthenticated) {\n      // Fetch service types from the API\n      fetchServiceTypes().then(() => {\n        setLoading(false);\n      }).catch(err => {\n        console.error('Error fetching services:', err);\n        setLoading(false);\n      });\n    }\n  }, [isAuthenticated, isLoading, router, fetchServiceTypes]);\n  \n  // Calculate price based on selected service, square footage/hours, and additional features\n  useEffect(() => {\n    if (!selectedServiceId) return;\n    \n    let basePrice = 0;\n    const selectedService = serviceTypes.find(service => service._id === selectedServiceId);\n    \n    if (hourlyMode) {\n      // Hourly pricing: $50 per hour baseline\n      basePrice = hours * 50;\n    } else {\n      // Square footage pricing based on equations\n      const sqft = squareFootage;\n      \n      if (selectedService) {\n        const serviceCode = selectedService.code || 'standard';\n        \n        switch (serviceCode) {\n          case 'standard':\n            basePrice = 37.4785 + 0.060375 * sqft;\n            break;\n          case 'deep':\n          case 'party':\n            basePrice = 48.885 + 0.09225 * sqft;\n            break;\n          case 'move':\n            basePrice = 65.18 + 0.123 * sqft;\n            break;\n          case 'office':\n            // Office clean is 15% more than standard\n            basePrice = (37.4785 + 0.060375 * sqft) * 1.15;\n            break;\n          default:\n            // Use the base price from the service if available\n            basePrice = (selectedService.basePrice || 98) * (sqft / 1000);\n        }\n      }\n    }\n    \n    // Round to integer\n    basePrice = Math.round(basePrice);\n    \n    // Add additional tasks\n    const additionalTasksPrice = additionalTasks.reduce((sum, task) => {\n      return sum + (task.price * (task.count > 0 ? task.count : (task.type === 'add' && task.count > 0 ? 1 : 0)));\n    }, 0);\n    \n    // Apply messiness multiplier (each level above 3 adds 5% to the price)\n    const messinessMultiplier = 1 + Math.max(0, (messiness - 3) * 0.05);\n    \n    // Calculate total price with messiness factor\n    let totalPrice = (basePrice + additionalTasksPrice) * messinessMultiplier;\n    \n    // Apply discount based on frequency\n    const selectedFrequency = frequencies.find(f => f.id === frequency);\n    if (selectedFrequency && selectedFrequency.discount > 0) {\n      totalPrice = totalPrice * (1 - selectedFrequency.discount / 100);\n    }\n    \n    // Round to integer\n    totalPrice = Math.round(totalPrice);\n    \n    // Update the current price\n    setCurrentPrice(totalPrice);\n    \n    // Calculate cleaning time\n    let totalMinutes = 0;\n    \n    if (hourlyMode) {\n      totalMinutes = hours * 60;\n    } else {\n      // Base time calculation from square footage (1000 sqft ≈ 2 hours)\n      totalMinutes = Math.round((squareFootage / 1000) * 120);\n      \n      // Minimum 1 hour\n      totalMinutes = Math.max(60, totalMinutes);\n    }\n    \n    // Add time for additional tasks\n    const additionalTasksTime = additionalTasks.reduce((sum, task) => {\n      return sum + (task.time * (task.count > 0 ? task.count : (task.type === 'add' && task.count > 0 ? 1 : 0)));\n    }, 0);\n    \n    totalMinutes += additionalTasksTime;\n    \n    // Adjust time based on messiness (each level above 3 adds 10% to the time)\n    const messinessTimeMultiplier = 1 + Math.max(0, (messiness - 3) * 0.1);\n    totalMinutes = Math.round(totalMinutes * messinessTimeMultiplier);\n    \n    // Update the cleaning time string\n    const hoursValue = Math.floor(totalMinutes / 60);\n    const minutesValue = totalMinutes % 60;\n    \n    if (minutesValue === 0) {\n      setCleaningTime(`${hoursValue} hours`);\n    } else {\n      setCleaningTime(`${hoursValue} hours ${minutesValue} min`);\n    }\n    \n  }, [selectedServiceId, serviceTypes, squareFootage, hours, hourlyMode, additionalTasks, messiness, frequency]);\n  \n  // Handle selection of a service by MongoDB ObjectId\n  const handleServiceSelection = (serviceId: string) => {\n    setSelectedServiceId(serviceId);\n    \n    // For backward compatibility, find the corresponding cleaning type code\n    const selectedService = serviceTypes.find(service => service._id === serviceId);\n    if (selectedService && selectedService.code) {\n      setSelectedCleaningType(selectedService.code);\n    }\n    \n    // Scroll to square footage section\n    setTimeout(() => {\n      if (squareFootageRef.current) {\n        squareFootageRef.current.scrollIntoView({ behavior: 'smooth', block: 'start' });\n      }\n    }, 100);\n  };\n  \n  // This is for backward compatibility\n  const handleCleaningTypeSelection = (typeId: string) => {\n    setSelectedCleaningType(typeId);\n    \n    // Find the service with this code and select its ID\n    const matchingService = serviceTypes.find(service => service.code === typeId);\n    if (matchingService) {\n      setSelectedServiceId(matchingService._id);\n    }\n    \n    // Scroll to square footage section\n    setTimeout(() => {\n      if (squareFootageRef.current) {\n        squareFootageRef.current.scrollIntoView({ behavior: 'smooth', block: 'start' });\n      }\n    }, 100);\n  };\n  \n  const toggleHourlyMode = () => {\n    setHourlyMode(!hourlyMode);\n  };\n  \n  const handleSquareFootageChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const value = parseInt(event.target.value);\n    if (!isNaN(value)) {\n      setSquareFootage(value);\n    }\n  };\n  \n  const handleHoursChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const value = parseInt(event.target.value);\n    if (!isNaN(value)) {\n      setHours(value);\n    }\n  };\n  \n  const handleAdditionalTaskAdd = (taskId: string) => {\n    setAdditionalTasks(tasks => \n      tasks.map(task => \n        task.id === taskId && task.type === 'add' \n          ? { ...task, count: task.count > 0 ? 0 : 1 } // Toggle on/off\n          : task\n      )\n    );\n  };\n  \n  const handleAdditionalTaskIncrement = (taskId: string) => {\n    setAdditionalTasks(tasks => \n      tasks.map(task => \n        task.id === taskId && task.type === 'count' \n          ? { ...task, count: task.count + 1 } \n          : task\n      )\n    );\n  };\n  \n  const handleAdditionalTaskDecrement = (taskId: string) => {\n    setAdditionalTasks(tasks => \n      tasks.map(task => \n        task.id === taskId && task.type === 'count' && task.count > 0\n          ? { ...task, count: task.count - 1 } \n          : task\n      )\n    );\n  };\n  \n  const handleMessinessChange = (level: number) => {\n    setMessiness(level);\n  };\n  \n  const handleFrequencyChange = (frequencyId: string) => {\n    setFrequency(frequencyId);\n     // Show membership popup for recurring plans\n    if (frequencyId === 'weekly' || frequencyId === 'biweekly' || frequencyId === 'twice-weekly') {\n      setMembershipFrequency(frequencyId as 'weekly' | 'biweekly' | 'twice-weekly');\n      setShowMembershipPopup(true);\n    }\n  };\n  \n  const togglePet = (petType: string) => {\n    if (pets.includes(petType)) {\n      setPets(pets.filter(pet => pet !== petType));\n    } else {\n      setPets([...pets, petType]);\n    }\n  };\n  \n  const handleSpecialInstructionsChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setSpecialInstructions(event.target.value);\n  };\n\n  const handleSaveSupplies = (option: string, supplies: string[]) => {\n    setSuppliesOption(option);\n    setSelectedSupplies(supplies);\n    \n    // Calculate the discount based on the option\n    let suppliesDiscount = 0;\n    if (option === 'i-have-vacuum') {\n      suppliesDiscount = 20;\n    } else if (option === 'i-have-all') {\n      suppliesDiscount = 50;\n    }\n    \n    // Save to state and store\n    setDetails({\n      suppliesOption: option,\n      selectedSupplies: supplies,\n      suppliesDiscount: suppliesDiscount\n    });\n  };\n  \n  // In handleContinue, simplify to this:\n  const handleContinue = () => {\n    console.log(\"handleContinue called\");\n    \n    if (!selectedServiceId) {\n      console.log(\"No service selected\");\n      setError(\"Please select a cleaning service to continue\");\n      return;\n    }\n\n    console.log(\"Selected serviceId:\", selectedServiceId);\n    \n    // Find the selected service by its ID\n    const selectedService = serviceTypes.find(service => service._id === selectedServiceId);\n    console.log(\"Found service:\", selectedService);\n    \n    if (selectedService) {\n      console.log(\"Setting service data...\");\n      setService({\n        serviceId: selectedService._id,\n        serviceName: selectedService.name,\n        serviceDescription: selectedService.description || '',\n        basePrice: currentPrice,\n        serviceCode: selectedService.code // Add the code for compatibility\n      });\n\n      console.log(\"Setting additional details...\");\n      setDetails({\n        hasPets: pets.length > 0,\n        messiness: messiness,\n        frequency: frequency as any,\n        notes: specialInstructions,\n        suppliesOption: suppliesOption || 'bring-everything',\n        selectedSupplies: selectedSupplies || []\n      });\n    \n      console.log(\"Setting cleaning time cookie...\");\n      Cookies.set('cleaningTime', cleaningTime);\n      \n      console.log(\"About to navigate to datetime page...\");\n      // Store service info in cookies with both ID and code\n      Cookies.set('bookingService', JSON.stringify({\n        serviceId: selectedService._id,\n        serviceName: selectedService.name,\n        serviceDescription: selectedService.description || '',\n        basePrice: currentPrice,\n        serviceCode: selectedService.code // Include code for backward compatibility\n      }), { expires: 7 });\n      \n      // Add a small delay before navigation\n      setTimeout(() => {\n        console.log(\"Executing navigation to datetime page...\");\n        router.push('/booking/datetime');\n      }, 100);\n      \n      console.log(\"Navigation called\");\n    } else {\n      console.log(\"Service not found\");\n      setError(\"Could not find selected service. Please try again.\");\n    }\n  };\n\n  // Get compatibility mapping between new MongoDB ObjectIds and old string codes\n  const getServiceByCode = (code: string) => {\n    return serviceTypes.find(service => service.code === code);\n  };\n\n  if (isLoading || loading || servicesLoading) {\n    return <FancyLoader visible={true} message=\"Loading services...\" />;\n  }\n\n  // Construct our list of service types for the UI\n  const displayableServiceTypes = serviceTypes.filter(service => service.code && ['standard', 'deep', 'move', 'party', 'office'].includes(service.code));\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      <div className=\"max-w-md mx-auto\">\n        {/* Header */}\n        <div className=\"py-4 flex items-center border-b border-gray-200 px-4\">\n          <Link href=\"/booking/address\" className=\"mr-2\">\n            <ArrowLeft size={20} className=\"text-gray-800\" />\n          </Link>\n          <h1 className=\"text-xl font-semibold\">Select Services</h1>\n        </div>\n        \n        <div className=\"px-4\">\n          {/* Cleaning Type Selection */}\n          <div className=\"py-4\">\n            <div className=\"flex items-center mb-4\">\n              <CheckSquare className=\"text-blue-500 mr-2\" size={20} />\n              <h2 className=\"text-xl font-semibold text-gray-800\">Select Cleaning Type</h2>\n            </div>\n            \n            {error && (\n              <div className=\"mb-4 bg-red-50 border border-red-200 text-red-600 p-3 rounded-lg\">\n                {error}\n              </div>\n            )}\n            \n            {/* Service Type Cards - Use ObjectIds from serviceTypes */}\n            <div className=\"grid grid-cols-2 gap-3 mb-4\">\n              {displayableServiceTypes.filter(service => service.code !== 'office').map(service => (\n                <div \n                  key={service._id}\n                  className={`border rounded-lg p-4 cursor-pointer transition-colors ${\n                    selectedServiceId === service._id \n                      ? 'border-blue-500 bg-blue-500 text-white' \n                      : 'border-gray-200 hover:border-blue-300 hover:scale-105'\n                  }`}\n                  onClick={() => handleServiceSelection(service._id)}\n                >\n                  <h3 className=\"font-semibold text-lg\">{service.name}</h3>\n                  <p className={`text-sm ${selectedServiceId === service._id ? 'text-white' : 'text-gray-500'}`}>\n                    {service.description}\n                  </p>\n                  <p className={`font-semibold mt-1 ${selectedServiceId === service._id ? 'text-white' : 'text-blue-500'}`}>\n                    ${service.basePrice}\n                  </p>\n                </div>\n              ))}\n            </div>\n              \n            {/* Office Clean */}\n            {displayableServiceTypes.filter(service => service.code === 'office').map(service => (\n              <div \n                key={service._id}\n                className={`border rounded-lg p-4 mb-6 cursor-pointer transition-colors ${\n                  selectedServiceId === service._id \n                    ? 'border-blue-500 bg-blue-50' \n                    : 'border-gray-200 hover:border-blue-300'\n                }`}\n                onClick={() => handleServiceSelection(service._id)}\n              >\n                <div className=\"flex items-start\">\n                  <div className=\"text-gray-500 mr-3 mt-1\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><rect x=\"3\" y=\"3\" width=\"18\" height=\"18\" rx=\"2\" /><path d=\"M8 10a1 1 0 0 1 1-1h6a1 1 0 0 1 1 1v8H8v-8Z\" /><path d=\"M7 6h.01M11 6h.01M15 6h.01\" /></svg>\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold text-lg\">{service.name}</h3>\n                    <p className=\"text-sm text-gray-500\">{service.description}</p>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n            {/* Selected Cleaning Type Display */}\n            {selectedServiceId && getServiceByCode('office')?._id === selectedServiceId && (\n                <div className=\"py-4 border-b border-gray-100\">\n                  <div className=\"border rounded-lg p-4 bg-blue-50 border-blue-200\">\n                    <div className=\"flex items-start\">\n                      <div className=\"text-blue-500 mr-3 mt-1\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><rect x=\"3\" y=\"3\" width=\"18\" height=\"18\" rx=\"2\" /><path d=\"M8 10a1 1 0 0 1 1-1h6a1 1 0 0 1 1 1v8H8v-8Z\" /><path d=\"M7 6h.01M11 6h.01M15 6h.01\" /></svg>\n                      </div>\n                      <div>\n                        <h3 className=\"font-semibold text-lg\">Office Clean</h3>\n                        <p className=\"text-sm text-gray-500\">Professional cleaning for workspaces</p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              )}\n              \n              {/* Square Footage / Hourly Mode Selection */}\n              <div className=\"py-4 border-b border-gray-100\" ref={squareFootageRef}>\n                <div className=\"flex items-center justify-between mb-3\">\n                  <span className=\"font-semibold text-lg text-gray-800\">\n                    {hourlyMode ? \"Hourly Mode\" : \"Square Footage Mode\"}\n                  </span>\n                  <div \n                    className=\"w-14 h-8 bg-blue-100 rounded-full p-1 cursor-pointer flex items-center\"\n                    onClick={toggleHourlyMode}\n                  >\n                    <div \n                      className={`w-6 h-6 rounded-full shadow-md transform transition-transform duration-300 ${\n                        hourlyMode ? 'bg-green-500 translate-x-6' : 'bg-white'\n                      }`}\n                    >\n                    </div>\n                  </div>\n                </div>\n                \n                {hourlyMode ? (\n                  <>\n                    <p className=\"text-gray-600 mb-3\">\n                      Select how many hours you need for cleaning.\n                    </p>\n                    <div className=\"flex justify-between mb-2 text-sm text-gray-500\">\n                      <span>2 hours</span>\n                      <span>20 hours</span>\n                    </div>\n                    <input \n                      type=\"range\" \n                      min=\"2\" \n                      max=\"20\" \n                      value={hours} \n                      onChange={handleHoursChange}\n                      className=\"w-full h-2 bg-blue-100 rounded-lg appearance-none cursor-pointer mb-4\"\n                    />\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-xl font-bold text-gray-800\">{hours} hours</span>\n                      <span className=\"font-semibold text-gray-700\">Current Price: <span className=\"text-blue-500\">${currentPrice}</span></span>\n                    </div>\n                  </>\n                ) : (\n                  <>\n                    <div className=\"text-gray-600 mb-3\">\n                      Adjust the size of your space to get an accurate price estimate.\n                    </div>\n                    <div className=\"flex justify-between mb-2 text-sm text-gray-500\">\n                      <span>100 sq ft</span>\n                      <span>10,000 sq ft</span>\n                    </div>\n                    <input \n                      type=\"range\" \n                      min=\"100\" \n                      max=\"10000\" \n                      value={squareFootage} \n                      onChange={handleSquareFootageChange}\n                      className=\"w-full h-2 bg-blue-100 rounded-lg appearance-none cursor-pointer mb-4\"\n                    />\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-xl font-bold text-gray-800\">{squareFootage} sq ft</span>\n                      <span className=\"font-semibold text-gray-700\">Current Price: <span className=\"text-blue-500\">${currentPrice}</span></span>\n                    </div>\n                  </>\n                )}\n              </div>\n              \n              {/* Max Clean Time */}\n              <div className=\"py-4 border-b border-gray-100\">\n                <div className=\"flex items-center mb-3\">\n                  <Clock size={20} className=\"text-blue-500 mr-2\" />\n                  <h2 className=\"text-lg font-semibold text-gray-800\">Max Clean Time</h2>\n                </div>\n                \n                <div className=\"flex items-start mb-3\">\n                  <div className=\"bg-blue-100 p-3 rounded-full mr-3\">\n                    <Clock size={24} className=\"text-blue-500\" />\n                  </div>\n                  <div>\n                    <p className=\"text-lg font-bold text-blue-500\">{cleaningTime}</p>\n                    <p className=\"text-gray-500 text-sm\">\n                      Maximum cleaning time\n                    </p>\n                  </div>\n                </div>\n                \n                <p className=\"text-gray-500 text-sm italic\">\n                  Note: All cleanings must finish by 6:00 PM. This will limit your available time slots.\n                </p>\n              </div>\n              \n              {/* Additional Tasks */}\n              <div className=\"py-4 border-b border-gray-100\" ref={additionalTasksRef}>\n                <div className=\"flex items-center mb-4\">\n                  <CheckSquare size={20} className=\"text-blue-500 mr-2\" />\n                  <h2 className=\"text-lg font-semibold text-gray-800\">Additional Tasks?</h2>\n                </div>\n                \n                {additionalTasks.map(task => (\n                  <div key={task.id} className=\"py-3 border-b border-gray-100 last:border-b-0\">\n                    <div className=\"flex justify-between items-center\">\n                      <div>\n                        <h3 className=\"font-medium text-gray-800\">{task.name}</h3>\n                        <p className=\"text-sm text-gray-500\">${task.price} {task.type === 'count' ? 'each' : ''}</p>\n                        <p className=\"text-sm text-blue-500\">+{task.time} min {task.type === 'count' ? 'each' : ''}</p>\n                      </div>\n                      \n                      {task.type === 'add' ? (\n                        <button \n                          className={`px-4 py-2 rounded-md text-sm cursor-pointer ${\n                            task.count > 0 \n                              ? 'bg-blue-500 text-white' \n                              : 'bg-gray-200 text-gray-600'\n                          }`}\n                          onClick={() => handleAdditionalTaskAdd(task.id)}\n                        >\n                          {task.count > 0 ? 'Added' : 'Add'}\n                        </button>\n                      ) : (\n                        <div className=\"flex items-center space-x-4\">\n                          <button\n                            className=\"w-8 h-8 rounded-full bg-gray-200 flex items-center justify-center text-gray-600 cursor-pointer hover:bg-blue-500\"\n                            onClick={() => handleAdditionalTaskDecrement(task.id)}\n                            disabled={task.count === 0}\n                          >\n                            -\n                          </button>\n                          <span className=\"w-6 text-center\">{task.count}</span>\n                          <button\n                            className=\"w-8 h-8 rounded-full bg-gray-200 flex items-center justify-center text-gray-600 cursor-pointer hover:bg-blue-500\"\n                            onClick={() => handleAdditionalTaskIncrement(task.id)}\n                          >\n                            +\n                          </button>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n              \n              {/* Messiness Scale */}\n              <div className=\"py-4 border-b border-gray-100\" ref={messinessRef}>\n                <div className=\"flex items-center mb-3\">\n                  <Info className=\"text-blue-500 mr-2\" size={20} />\n                  <h2 className=\"text-lg font-semibold text-gray-800\">How messy is your space?</h2>\n                </div>\n                \n                <p className=\"text-gray-600 text-sm mb-4\">\n                  This helps us prepare the right cleaning supplies and allocate enough time.\n                </p>\n                \n                <div className=\"mb-2 flex justify-between text-sm text-gray-500\">\n                  <span>Tidy</span>\n                  <span>Very Messy</span>\n                </div>\n                \n                <div className=\"flex justify-between mb-3\">\n                  {[1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(level => {\n                    let bgColor = '';\n                    let textColor = '';\n                    \n                    if (messiness === level) {\n                      if (level <= 3) {\n                        bgColor = 'bg-green-500';\n                        textColor = 'text-white';\n                      } else if (level <= 6) {\n                        bgColor = 'bg-orange-500';\n                        textColor = 'text-white';\n                      } else {\n                        bgColor = 'bg-red-500';\n                        textColor = 'text-white';\n                      }\n                    } else {\n                      if (level <= 3) {\n                        bgColor = 'bg-green-200';\n                        textColor = 'text-green-800';\n                      } else if (level <= 6) {\n                        bgColor = 'bg-orange-200';\n                        textColor = 'text-orange-800';\n                      } else {\n                        bgColor = 'bg-red-200';\n                        textColor = 'text-red-800';\n                      }\n                    }\n                    \n                    return (\n                      <button \n                        key={level}\n                        className={`w-8 h-8 rounded-full flex items-center justify-center cursor-pointer font-medium ${bgColor} ${textColor}`}\n                        onClick={() => handleMessinessChange(level)}\n                      >\n                        {level}\n                      </button>\n                    );\n                  })}\n                </div>\n                \n                <p className=\"text-gray-500 text-sm italic\">\n                  Standard cleaning should be sufficient.\n                </p>\n              </div>\n              \n              {/* Cleaning Frequency */}\n              <div className=\"py-4 border-b border-gray-100\" ref={frequencyRef}>\n                <div className=\"flex items-center mb-3\">\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"text-blue-500 mr-2\"><path d=\"M17 2v4\" /><path d=\"M7 2v4\" /><path d=\"M17 18a2 2 0 0 1-4 0\" /><rect x=\"3\" y=\"6\" width=\"18\" height=\"14\" rx=\"2\" /></svg>\n                  <h2 className=\"text-lg font-semibold text-gray-800\">How often do you need cleaning?</h2>\n                </div>\n                \n                <div className=\"grid grid-cols-2 gap-3 mb-4 \">\n                  {[\n                    { id: 'one-time', name: 'One-time', description: 'Single cleaning service', discount: 0 },\n                    { id: 'biweekly', name: 'Biweekly', description: 'Every two weeks', discount: 10 },\n                    { id: 'weekly', name: 'Weekly', description: 'Once every week', discount: 15 },\n                    { id: 'twice-weekly', name: 'Twice a week', description: 'Two times per week', discount: 20 }\n                  ].map(option => (\n                    <div \n                      key={option.id}\n                      className={`border rounded-lg p-3 cursor-pointer transition-colors ${\n                        frequency === option.id \n                          ? 'border-blue-500 bg-blue-50' \n                          : 'border-gray-200 hover:border-blue-300 hover:scale-105'\n                      }`}\n                      onClick={() => handleFrequencyChange(option.id)}\n                    >\n                      <h3 className={`font-semibold ${frequency === option.id && option.id === 'one-time' ? 'text-blue-500' : 'text-gray-800'}`}>\n                        {option.name}\n                      </h3>\n                      {option.discount > 0 && (\n                        <p className=\"text-green-500 text-sm font-medium\">Save {option.discount}%</p>\n                      )}\n                      <p className=\"text-sm text-gray-500\">{option.description}</p>\n                    </div>\n                  ))}\n                </div>\n              </div>\n              \n              {/* Pets */}\n              <div className=\"py-4 border-b border-gray-100\" ref={petsRef}>\n                <div className=\"flex items-center mb-3\">\n                  <span className=\"text-blue-500 mr-2\">🐾</span>\n                  <h2 className=\"text-lg font-semibold text-gray-800\">Do you have pets?</h2>\n                </div>\n                \n                <div className=\"grid grid-cols-3 gap-3 mb-4\">\n                  <div \n                    className={`border rounded-lg p-3 text-center cursor-pointer transition-colors ${\n                      pets.includes('dog') \n                        ? 'border-blue-500 bg-blue-50' \n                        : 'border-gray-200 hover:border-blue-300 hover:scale-105'\n                    }`}\n                    onClick={() => togglePet('dog')}\n                  >\n                    <span className=\"text-2xl\">🐶</span>\n                    <p className=\"mt-2 text-sm font-medium text-gray-800\">Dog</p>\n                  </div>\n                  <div \n                    className={`border rounded-lg p-3 text-center cursor-pointer transition-colors ${\n                      pets.includes('cat') \n                        ? 'border-blue-500 bg-blue-50' \n                        : 'border-gray-200 hover:border-blue-300 hover:scale-105'\n                    }`}\n                    onClick={() => togglePet('cat')}\n                  >\n                    <span className=\"text-2xl\">😺</span>\n                    <p className=\"mt-2 text-sm font-medium text-gray-800\">Cat</p>\n                  </div>\n                  <div \n                    className={`border rounded-lg p-3 text-center cursor-pointer transition-colors ${\n                      pets.includes('other') \n                        ? 'border-blue-500 bg-blue-50' \n                        : 'border-gray-200 hover:border-blue-300 hover:scale-105'\n                    }`}\n                    onClick={() => togglePet('other')}\n                  >\n                    <span className=\"text-2xl\">❓</span>\n                    <p className=\"mt-2 text-sm font-medium text-gray-800\">Other</p>\n                  </div>\n                </div>\n              </div>\n              \n              {/* Special Instructions */}\n              <div className=\"py-4 border-b border-gray-100\">\n                <div className=\"flex items-center mb-3\">\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"text-blue-500 mr-2\"><path d=\"M14 3v4a1 1 0 0 0 1 1h4\" /><path d=\"M17 21h-10a2 2 0 0 1 -2 -2v-14a2 2 0 0 1 2 -2h7l5 5v11a2 2 0 0 1 -2 2z\" /><line x1=\"9\" y1=\"9\" x2=\"10\" y2=\"9\" /><line x1=\"9\" y1=\"13\" x2=\"15\" y2=\"13\" /><line x1=\"9\" y1=\"17\" x2=\"15\" y2=\"17\" /></svg>\n                  <h2 className=\"text-lg font-semibold text-gray-800\">Special Instructions</h2>\n                </div>\n                \n                <textarea \n                  className=\"w-full p-3 border border-gray-200 rounded-lg h-24 text-gray-700\"\n                  placeholder=\"Add any special instructions or notes for the cleaner...\"\n                  value={specialInstructions}\n                  onChange={handleSpecialInstructionsChange}\n                />\n              </div>\n          \n          {/* Continue Button */}\n          <button\n            className=\"w-full py-4 mb-20 bg-blue-500 text-white rounded-[36px] text-center font-medium my-8 transition-colors hover:bg-blue-600 hover:scale-105 cursor-pointer\"\n            onClick={handleContinue}\n            disabled={!selectedServiceId}\n          >\n            Continue\n          </button>\n        </div>\n      </div>\n      {/* Membership Popup */}\n      <MembershipPopup \n        isOpen={showMembershipPopup}\n        onClose={() => setShowMembershipPopup(false)}\n        frequency={membershipFrequency}\n      />\n      <CleaningSuppliesModal\n        isOpen={showSuppliesModal}\n        onClose={() => {\n          console.log(\"Modal closed\");\n          setShowSuppliesModal(false);\n        }}\n        onSave={(option, supplies) => {\n          console.log(\"Modal saved, navigating to datetime page...\");\n          handleSaveSupplies(option, supplies);\n          // Add a delay before navigation\n          setTimeout(() => {\n            console.log(\"Navigating to /booking/datetime\");\n            router.push('/booking/datetime');\n          }, 100);\n        }}\n      />\n    </div>\n  );\n}",
  "src/app/booking/summary/page.tsx": "'use client';\n\nimport { useState, useEffect, useRef } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { bookingAPI } from '@/services/api';\nimport LoadingOverlay from '@/components/ui/LoadingOverlay';\nimport FancyLoader from '@/components/ui/FancyLoader';\nimport { ArrowLeft, MapPin, Home, Calendar, Clock, CheckSquare, Package, Info, DollarSign, ChevronRight } from 'lucide-react';\nimport Link from 'next/link';\nimport useBookingStore from '@/store/bookingStore';\nimport Cookies from 'js-cookie';\n\nexport default function BookingSummaryPage() {\n  const [loading, setLoading] = useState(true);\n  const [processingBooking, setProcessingBooking] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const { isAuthenticated, isLoading } = useAuth();\n  const router = useRouter();\n  const hasInitialized = useRef(false);\n  \n  // Booking data state\n  const [address, setAddress] = useState<any>(null);\n  const [service, setServiceData] = useState<any>(null);\n  const [dateTime, setDateTime] = useState<any>(null);\n  const [cleaningSupplies, setCleaningSupplies] = useState<{\n    option: string;\n    supplies: string[];\n    discount: number;\n  }>({\n    option: 'bring-everything',\n    supplies: [],\n    discount: 0\n  });\n  const [messiness, setMessiness] = useState(3);\n  const [totalPrice, setTotalPrice] = useState(0);\n  const [basePrice, setBasePrice] = useState(0);\n  const [pets, setPets] = useState<string[]>([]);\n  const [frequency, setFrequency] = useState('one-time');\n  const [cleaningTime, setCleaningTime] = useState(\"2 hours 36 min\");\n  \n  // Get booking store data and functions\n  const bookingStore = useBookingStore();\n  const currentBooking = useBookingStore(state => state.currentBooking);\n  const syncFromCookies = useBookingStore(state => state.syncFromCookies);\n  const createBooking = useBookingStore(state => state.createBooking);\n  const setDetails = useBookingStore(state => state.setDetails);\n\n  useEffect(() => {\n    // Guard against multiple initializations\n    if (hasInitialized.current) return;\n    hasInitialized.current = true;\n    \n    if (!isLoading && !isAuthenticated) {\n      router.push('/auth/login');\n      return;\n    }\n\n    // Load all the booking data from cookies and store\n    const loadBookingData = async () => {\n      try {\n        // First sync cookies to the store to ensure it has the latest data\n        syncFromCookies();\n        \n        console.log(\"Current booking state after sync:\", currentBooking);\n        \n        // Load address\n        const addressData = Cookies.get('bookingAddress');\n        if (addressData) {\n          const parsedAddress = JSON.parse(addressData);\n          setAddress(parsedAddress);\n          \n          // Make sure the address data is in the store\n          if (!currentBooking.addressId) {\n            bookingStore.setAddress(parsedAddress);\n          }\n        } else if (currentBooking.addressId) {\n          // If not in cookie but in store, reconstruct from store\n          setAddress({\n            addressId: currentBooking.addressId,\n            name: currentBooking.addressName,\n            streetAddress: currentBooking.streetAddress,\n            city: currentBooking.city,\n            state: currentBooking.state,\n            zipCode: currentBooking.zipCode,\n            squareFootage: currentBooking.squareFootage\n          });\n        } else {\n          router.push('/booking/address');\n          return;\n        }\n        \n        // Load service\n        const serviceData = Cookies.get('bookingService');\n        if (serviceData) {\n          const parsedService = JSON.parse(serviceData);\n          setServiceData(parsedService);\n          setBasePrice(parsedService.basePrice || 0);\n          \n          // Make sure the service data is in the store\n          if (!currentBooking.serviceId) {\n            bookingStore.setService(parsedService);\n          }\n        } else if (currentBooking.serviceId) {\n          // If not in cookie but in store, reconstruct from store\n          setServiceData({\n            serviceId: currentBooking.serviceId,\n            serviceName: currentBooking.serviceName,\n            serviceDescription: currentBooking.serviceDescription,\n            basePrice: currentBooking.basePrice\n          });\n          setBasePrice(currentBooking.basePrice || 0);\n        } else {\n          router.push('/booking/services');\n          return;\n        }\n        \n        // Load date/time\n        const dateTimeData = Cookies.get('bookingDateTime');\n        if (dateTimeData) {\n          const parsedDateTime = JSON.parse(dateTimeData);\n          setDateTime(parsedDateTime);\n          \n          // Make sure the datetime data is in the store\n          if (!currentBooking.date) {\n            bookingStore.setDateTime(parsedDateTime);\n          }\n        } else if (currentBooking.date) {\n          // If not in cookie but in store, reconstruct from store\n          setDateTime({\n            date: currentBooking.date,\n            timeSlot: currentBooking.timeSlot,\n            preferredDates: currentBooking.preferredDates,\n            preferredTimeSlots: currentBooking.preferredTimeSlots,\n            flexibleScheduling: currentBooking.flexibleScheduling\n          });\n        } else {\n          router.push('/booking/datetime');\n          return;\n        }\n\n        // Get other details from the store or defaults\n        // For messiness\n        setMessiness(currentBooking.messiness || 3);\n        \n        // For pets\n        if (currentBooking.hasPets) {\n          setPets(['has-pets']);\n        }\n        \n        // For frequency\n        setFrequency(currentBooking.frequency || 'one-time');\n        \n        // Get supplies info\n        let suppliesOption = 'bring-everything';\n        let selectedSupplies: string[] = [];\n        let suppliesDiscount = 0;\n        \n        if (currentBooking.supplies === 'customer') {\n          suppliesOption = 'i-have-all';\n          suppliesDiscount = 50;\n        } \n        // Check notes for any supplies-related info\n        else if (currentBooking.notes && currentBooking.notes.includes('supplies:')) {\n          const suppliesInfo = currentBooking.notes.split('supplies:')[1].split(';')[0].trim();\n          if (suppliesInfo.includes('customer-provides-all')) {\n            suppliesOption = 'i-have-all';\n            suppliesDiscount = 50;\n          } else if (suppliesInfo.includes('customer-provides-vacuum')) {\n            suppliesOption = 'i-have-vacuum';\n            suppliesDiscount = 20;\n          }\n        }\n        \n        setCleaningSupplies({\n          option: suppliesOption,\n          supplies: selectedSupplies,\n          discount: suppliesDiscount\n        });\n        \n        // Get cleaning time\n        const storedCleaningTime = Cookies.get('cleaningTime');\n        if (storedCleaningTime) {\n          setCleaningTime(storedCleaningTime);\n        }\n        \n        // Calculate total price\n        let total = (basePrice || 0) - suppliesDiscount;\n        setTotalPrice(Math.max(0, total));\n        \n        // Log the final state for debugging\n        console.log(\"Final booking data loaded:\", {\n          service: currentBooking.serviceId,\n          address: currentBooking.addressId,\n          datetime: currentBooking.date\n        });\n      } catch (error) {\n        console.error('Error loading booking data:', error);\n        setError('Failed to load booking data');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    if (isAuthenticated) {\n      loadBookingData();\n    }\n  }, [isAuthenticated, isLoading, router]); // Removed problematic dependencies\n\n  const handleBookNow = async () => {\n    setProcessingBooking(true);\n    setError(null);\n    \n    try {\n      // Prepare any additional booking details\n      let notesWithSupplies = currentBooking.notes || '';\n      \n      if (cleaningSupplies.option !== 'bring-everything') {\n        if (!notesWithSupplies.includes('supplies:')) {\n          notesWithSupplies += `${notesWithSupplies ? '; ' : ''}supplies: ${cleaningSupplies.option === 'i-have-all' ? 'customer-provides-all' : 'customer-provides-vacuum'}`;\n        }\n      }\n      \n      // Set the supplies based on the option\n      const suppliesValue = cleaningSupplies.option === 'i-have-all' ? 'customer' : 'cleaner';\n      \n      // Update the details in the store\n      setDetails({\n        notes: notesWithSupplies,\n        supplies: suppliesValue as 'customer' | 'cleaner',\n        messiness: messiness,\n        hasPets: pets.includes('has-pets'),\n        frequency: frequency as 'one-time' | 'weekly' | 'bi-weekly' | 'monthly'\n      });\n      \n      // Give a small delay to ensure the store is updated\n      await new Promise(resolve => setTimeout(resolve, 50));\n      \n      // Log the data before creating booking\n      console.log(\"Booking data before submission:\", currentBooking);\n      \n      const success = await createBooking();\n      if (success) {\n        console.log('Booking created successfully');\n        \n        // Clear the booking data from cookies\n        Cookies.remove('bookingService');\n        Cookies.remove('bookingAddress');\n        Cookies.remove('bookingDateTime');\n        Cookies.remove('cleaningTime');\n        \n        // Navigate to bookings page with success message\n        router.push('/bookings?success=true');\n      } else {\n        console.error('Failed to create booking');\n        setError('Failed to create booking. Please try again.');\n      }\n    } catch (error) {\n      console.error('Error creating booking:', error);\n      setError('Failed to create booking. Please try again.');\n    } finally {\n      setProcessingBooking(false);\n    }\n  };\n\n  if (isLoading || loading) {\n    return <FancyLoader visible={true} message=\"Loading booking details...\" />;\n  }\n\n  if (processingBooking) {\n    return <FancyLoader visible={true} message=\"Creating your booking...\" />;\n  }\n\n  // Format preferred dates for display\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    const days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    \n    return `${days[date.getDay()]}, ${months[date.getMonth()]} ${date.getDate()}`;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"max-w-md mx-auto bg-white\">\n        {/* Header */}\n        <div className=\"py-4 flex items-center border-b border-gray-200 px-4\">\n          <Link href=\"/booking/datetime\" className=\"mr-2\">\n            <ArrowLeft size={20} className=\"text-gray-800\" />\n          </Link>\n          <h1 className=\"text-xl font-semibold\">Review & Confirm</h1>\n        </div>\n        \n        <div className=\"px-4 py-6\">\n          <h2 className=\"text-2xl font-bold text-gray-800 mb-1\">Review your booking</h2>\n          <p className=\"text-gray-500 mb-6\">\n            Please confirm the details of your cleaning service\n          </p>\n          \n          {error && (\n            <div className=\"mb-4 bg-red-50 border border-red-200 text-red-600 p-3 rounded-lg\">\n              {error}\n            </div>\n          )}\n          \n          {/* Location Section */}\n          <div className=\"bg-white rounded-lg p-4 mb-4 shadow-sm\">\n            <div className=\"flex items-center mb-3\">\n              <MapPin className=\"text-blue-500 mr-2\" size={20} />\n              <h2 className=\"text-lg font-semibold text-gray-800\">Location</h2>\n            </div>\n            \n            {address && (\n              <Link href=\"/booking/address\" className=\"block\">\n                <div className=\"cursor-pointer\">\n                  <h3 className=\"font-medium text-gray-800\">{address.name}</h3>\n                  <p className=\"text-gray-600\">{address.streetAddress}, {address.city}, {address.state} {address.zipCode}</p>\n                  <p className=\"text-gray-600\">{address.squareFootage} sq ft</p>\n                  {address.notes && (\n                    <p className=\"text-gray-500 italic mt-1\">Note: {address.notes}</p>\n                  )}\n                </div>\n              </Link>\n            )}\n          </div>\n          \n          {/* Property Details Section */}\n          <div className=\"bg-white rounded-lg p-4 mb-4 shadow-sm\">\n            <div className=\"flex items-center mb-3\">\n              <Home className=\"text-blue-500 mr-2\" size={20} />\n              <h2 className=\"text-lg font-semibold text-gray-800\">Property Details</h2>\n            </div>\n            \n            <div className=\"flex justify-between items-center mb-2\">\n              <span className=\"text-gray-600\">Square Footage:</span>\n              <span className=\"font-medium text-gray-800\">{address ? address.squareFootage : 0} sq ft</span>\n            </div>\n            \n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-gray-600\">Messiness Level:</span>\n              <div className=\"flex items-center\">\n                <span className=\"font-medium text-gray-800 mr-2\">{messiness}/10</span>\n                <div className={`w-6 h-6 rounded-full flex items-center justify-center font-medium text-white\n                  ${messiness <= 3 ? 'bg-green-500' : messiness <= 6 ? 'bg-orange-500' : 'bg-red-500'}`}\n                >\n                  {messiness}\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          {/* Date & Time Section */}\n          <div className=\"bg-white rounded-lg p-4 mb-4 shadow-sm\">\n            <div className=\"flex items-center mb-3\">\n              <Calendar className=\"text-blue-500 mr-2\" size={20} />\n              <h2 className=\"text-lg font-semibold text-gray-800\">Date & Time</h2>\n            </div>\n            \n            <Link href=\"/booking/datetime\" className=\"block\">\n              <div className=\"cursor-pointer\">\n                {dateTime && (\n                  <>\n                    <div className=\"mb-3\">\n                      <p className=\"text-gray-600 mb-1\">Preferred Dates:</p>\n                      <div className=\"flex items-center\">\n                        <Calendar className=\"text-blue-500 mr-2\" size={16} />\n                        <span className=\"text-gray-800\">{dateTime.preferredDates && dateTime.preferredDates.length > 0 ? formatDate(dateTime.preferredDates[0]) : 'Not specified'}</span>\n                      </div>\n                    </div>\n                    \n                    <div className=\"mb-2\">\n                      <p className=\"text-gray-600 mb-1\">Preferred Times:</p>\n                      <div className=\"flex items-center\">\n                        <Clock className=\"text-blue-500 mr-2\" size={16} />\n                        <span className=\"text-gray-800\">{dateTime.preferredTimeSlots && dateTime.preferredTimeSlots.length > 0 ? dateTime.preferredTimeSlots[0] : 'Not specified'}</span>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Frequency:</span>\n                      <span className=\"text-gray-800\">\n                        {frequency === 'one-time' ? 'One-time' : \n                          frequency === 'weekly' ? 'Weekly' : \n                          frequency === 'bi-weekly' ? 'Biweekly' : \n                          'Monthly'}\n                      </span>\n                    </div>\n                  </>\n                )}\n              </div>\n            </Link>\n          </div>\n          \n          {/* Max Clean Time Section */}\n          <div className=\"bg-white rounded-lg p-4 mb-4 shadow-sm\">\n            <div className=\"flex items-center mb-3\">\n              <Clock className=\"text-blue-500 mr-2\" size={20} />\n              <h2 className=\"text-lg font-semibold text-gray-800\">Max Clean Time</h2>\n            </div>\n            \n            <div className=\"flex items-start mb-3\">\n              <div className=\"bg-blue-100 p-3 rounded-full mr-3\">\n                <Clock size={24} className=\"text-blue-500\" />\n              </div>\n              <div>\n                <p className=\"text-blue-500 text-xl font-bold\">{cleaningTime}</p>\n                <p className=\"text-gray-500 text-sm\">\n                  Maximum cleaning time based on your property size and selected services\n                </p>\n              </div>\n            </div>\n            \n            <p className=\"text-gray-500 text-sm italic\">\n              Note: All cleanings must finish by 6:00 PM. Your selected time slot has been adjusted accordingly.\n            </p>\n          </div>\n          \n          {/* Services Section */}\n          <div className=\"bg-white rounded-lg p-4 mb-4 shadow-sm\">\n            <div className=\"flex items-center mb-3\">\n              <CheckSquare className=\"text-blue-500 mr-2\" size={20} />\n              <h2 className=\"text-lg font-semibold text-gray-800\">Services</h2>\n            </div>\n            \n            <Link href=\"/booking/services\" className=\"block\">\n              <div className=\"cursor-pointer\">\n                {service && (\n                  <>\n                    <div className=\"flex justify-between items-center\">\n                      <div>\n                        <h3 className=\"font-medium text-gray-800\">{service.serviceName}</h3>\n                        <p className=\"text-gray-600\">{service.serviceDescription}</p>\n                        <p className=\"text-gray-600\">{address ? address.squareFootage : 0} sq ft</p>\n                      </div>\n                      <span className=\"text-blue-500 font-semibold\">${basePrice}</span>\n                    </div>\n                    \n                    <div className=\"mt-3 pt-3 border-t border-gray-100\">\n                      <p className=\"text-gray-500 italic\">No additional services selected</p>\n                    </div>\n                  </>\n                )}\n              </div>\n            </Link>\n          </div>\n          \n          {/* Supplies & Equipment Section */}\n          <div className=\"bg-white rounded-lg p-4 mb-4 shadow-sm\">\n            <div className=\"flex items-center mb-3\">\n              <Package className=\"text-blue-500 mr-2\" size={20} />\n              <h2 className=\"text-lg font-semibold text-gray-800\">Supplies & Equipment</h2>\n            </div>\n            \n            <Link href=\"/booking/services\" className=\"block\">\n              <div className=\"cursor-pointer\">\n                <p className=\"font-medium text-gray-800 mb-1\">\n                  {cleaningSupplies.option === 'bring-everything' \n                    ? 'Cleaners bring all supplies' \n                    : cleaningSupplies.option === 'i-have-vacuum' \n                      ? 'Customer provides vacuum' \n                      : 'Customer provides all supplies'}\n                </p>\n                \n                {cleaningSupplies.discount > 0 && (\n                  <p className=\"text-green-500 font-medium mb-3\">Discount: -${cleaningSupplies.discount}</p>\n                )}\n                \n                {cleaningSupplies.option === 'i-have-all' && cleaningSupplies.supplies.length > 0 && (\n                  <>\n                    <p className=\"font-medium text-gray-700 mb-2\">Selected Supplies:</p>\n                    <div className=\"grid grid-cols-2 gap-y-2\">\n                      {cleaningSupplies.supplies.map((supply, index) => (\n                        <div key={index} className=\"flex items-center\">\n                          <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4 text-blue-500 mr-1\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                            <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n                          </svg>\n                          <span className=\"text-gray-700\">{supply}</span>\n                        </div>\n                      ))}\n                    </div>\n                  </>\n                )}\n              </div>\n            </Link>\n          </div>\n          \n          {/* Messiness Level Section */}\n          <div className=\"bg-white rounded-lg p-4 mb-4 shadow-sm\">\n            <div className=\"flex items-center mb-3\">\n              <Info className=\"text-blue-500 mr-2\" size={20} />\n              <h2 className=\"text-lg font-semibold text-gray-800\">Messiness Level</h2>\n            </div>\n            \n            <div className=\"flex items-center\">\n              <div className={`w-10 h-10 rounded-full flex items-center justify-center font-medium text-white mr-3\n                ${messiness <= 3 ? 'bg-green-500' : messiness <= 6 ? 'bg-orange-500' : 'bg-red-500'}`}\n              >\n                {messiness}\n              </div>\n              <p className=\"text-gray-700\">\n                {messiness <= 3 \n                  ? 'Your space is relatively tidy. Standard cleaning should be sufficient.'\n                  : messiness <= 6\n                    ? 'Your space has moderate clutter. Some extra attention may be needed.'\n                    : 'Your space is quite messy. Deep cleaning is recommended.'}\n              </p>\n            </div>\n          </div>\n          \n          {/* Pricing Section */}\n          <div className=\"bg-white rounded-lg p-4 mb-6 shadow-sm\">\n            <div className=\"flex items-center mb-3\">\n              <DollarSign className=\"text-blue-500 mr-2\" size={20} />\n              <h2 className=\"text-lg font-semibold text-gray-800\">Pricing</h2>\n            </div>\n            \n            <div className=\"mb-2\">\n              <div className=\"flex justify-between mb-2\">\n                <span className=\"text-gray-700\">{service ? service.serviceName : 'Standard Clean'}</span>\n                <span className=\"text-gray-800\">${basePrice}</span>\n              </div>\n              \n              {cleaningSupplies.discount > 0 && (\n                <div className=\"flex justify-between mb-2\">\n                  <span className=\"text-gray-700\">Supplies & Equipment Discount</span>\n                  <span className=\"text-green-500\">-${cleaningSupplies.discount}</span>\n                </div>\n              )}\n            </div>\n            \n            <div className=\"border-t border-gray-200 pt-3 mt-3\">\n              <div className=\"flex justify-between\">\n                <span className=\"font-semibold text-gray-800\">Total</span>\n                <span className=\"font-semibold text-blue-500 text-xl\">${totalPrice}</span>\n              </div>\n            </div>\n          </div>\n          \n          {/* Action Buttons */}\n          <div className=\"flex space-x-3 mb-8 pb-8\">\n            <Link href=\"/booking/datetime\" className=\"flex-1\">\n              <button className=\"w-full py-4 border border-gray-300 rounded-lg text-center font-medium flex items-center justify-center text-blue-500 hover:bg-gray-50 transition-colors hover:scale-105 cursor-pointer\">\n                <ArrowLeft size={18} className=\"mr-2\" /> Back\n              </button>\n            </Link>\n            \n            <button\n              className=\"flex-1 py-4 bg-blue-500 text-white rounded-lg text-center font-medium transition-colors hover:bg-blue-600 hover:scale-105 cursor-pointer\" \n              onClick={handleBookNow}\n              disabled={processingBooking}\n            >\n              Book Now\n            </button>\n          </div>\n        </div>\n        \n        {/* Bottom Navigation */}\n        <div className=\"fixed bottom-0 left-0 right-0 h-16 bg-white border-t border-gray-200 flex items-center justify-center hover:bg-blue-50 transition-colors\">\n          <Link href=\"/\" className=\"text-blue-500 font-medium flex items-center\">\n            <Home size={18} className=\"mr-2\" /> Home\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n}",
  "src/app/bookings/page.tsx": "// src/app/bookings/page.tsx\n'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { bookingAPI } from '@/services/api';\nimport LoadingOverlay from '@/components/ui/LoadingOverlay';\nimport Button from '@/components/ui/Button';\nimport Card from '@/components/ui/Card';\nimport { Calendar, Clock, MapPin, Filter } from 'lucide-react';\nimport FancyLoader from '@/components/ui/FancyLoader';\n\nexport default function BookingsPage() {\n  const [bookings, setBookings] = useState<any[]>([]);\n  const [filteredBookings, setFilteredBookings] = useState<any[]>([]);\n  const [activeFilter, setActiveFilter] = useState<'upcoming' | 'past'>('upcoming');\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const { isAuthenticated, isLoading } = useAuth();\n  const router = useRouter();\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      router.push('/login');\n      return;\n    }\n\n    const fetchBookings = async () => {\n      try {\n        const bookingsData = await bookingAPI.getUserBookings();\n        setBookings(bookingsData);\n        filterBookings(bookingsData, activeFilter);\n      } catch (err: any) {\n        setError('Failed to load bookings');\n        console.error('Error fetching bookings:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    if (isAuthenticated) {\n      fetchBookings();\n    }\n  }, [isAuthenticated, isLoading, router, activeFilter]);\n\n  const filterBookings = (bookings: any[], filter: 'upcoming' | 'past') => {\n    const now = new Date();\n    \n    if (filter === 'upcoming') {\n      const upcoming = bookings.filter(booking => {\n        const bookingDate = new Date(booking.date);\n        return bookingDate >= now || (booking.status !== 'completed' && booking.status !== 'cancelled');\n      });\n      setFilteredBookings(upcoming);\n    } else {\n      const past = bookings.filter(booking => {\n        const bookingDate = new Date(booking.date);\n        return bookingDate < now || booking.status === 'completed' || booking.status === 'cancelled';\n      });\n      setFilteredBookings(past);\n    }\n  };\n\n  const handleFilterChange = (filter: 'upcoming' | 'past') => {\n    setActiveFilter(filter);\n    filterBookings(bookings, filter);\n  };\n\n  // Format date helper function\n  const formatDate = (dateString: string): string => {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', {\n      weekday: 'short',\n      month: 'short', \n      day: 'numeric'\n    });\n  };\n\n  // Get status color\n  const getStatusColor = (status: string): string => {\n    switch (status.toLowerCase()) {\n      case 'confirmed':\n        return 'bg-primary text-white';\n      case 'pending':\n        return 'bg-warning text-white';\n      case 'completed':\n        return 'bg-success text-white';\n      case 'cancelled':\n        return 'bg-error text-white';\n      default:\n        return 'bg-grayLight text-text';\n    }\n  };\n\n  if (isLoading || loading) {\n    return <FancyLoader visible={true} message=\"Loading bookings...\" />;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background px-4 py-6 sm:px-6 lg:px-8\">\n      <div className=\"max-w-3xl mx-auto\">\n        <div className=\"mb-6\">\n          <h1 className=\"text-2xl font-bold text-text mb-2\">Bookings</h1>\n          <p className=\"text-textLight\">View and manage your cleaning services</p>\n        </div>\n\n        <div className=\"mb-6 flex justify-between\">\n          <div className=\"flex space-x-2\">\n            <Button\n              title=\"Upcoming\"\n              variant={activeFilter === 'upcoming' ? 'primary' : 'outline'}\n              size=\"small\"\n              onClick={() => handleFilterChange('upcoming')}\n            />\n            \n            <Button\n              title=\"Past\"\n              variant={activeFilter === 'past' ? 'primary' : 'outline'}\n              size=\"small\"\n              onClick={() => handleFilterChange('past')}\n            />\n          </div>\n          \n          <Button\n            title=\"Book New\"\n            variant=\"primary\"\n            icon={<Calendar size={16} />}\n            iconPosition=\"left\"\n            size=\"small\"\n            onClick={() => router.push('/booking/new')}\n          />\n        </div>\n\n        {filteredBookings.length > 0 ? (\n          <div className=\"space-y-4\">\n            {filteredBookings.map(booking => (\n              <Card \n                key={booking._id} \n                className=\"cursor-pointer hover:shadow-md transition-shadow\"\n                onClick={() => router.push(`/bookings/${booking._id}`)}\n              >\n                <div className=\"p-4\">\n                  <div className=\"flex justify-between items-start mb-3\">\n                    <div>\n                      <h3 className=\"font-semibold text-text\">{booking.serviceType?.name || 'Cleaning Service'}</h3>\n                      <div className=\"text-sm text-textLight\">\n                        ${booking.price} • {booking.squareFootage} sq ft\n                      </div>\n                    </div>\n                    <div className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(booking.status)}`}>\n                      {booking.status.charAt(0).toUpperCase() + booking.status.slice(1)}\n                    </div>\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center\">\n                      <Calendar size={16} className=\"text-primary mr-2 flex-shrink-0\" />\n                      <span className=\"text-sm text-text\">{formatDate(booking.date)}</span>\n                    </div>\n                    \n                    <div className=\"flex items-center\">\n                      <Clock size={16} className=\"text-primary mr-2 flex-shrink-0\" />\n                      <span className=\"text-sm text-text\">{booking.timeSlot}</span>\n                    </div>\n                    \n                    <div className=\"flex items-center\">\n                      <MapPin size={16} className=\"text-primary mr-2 flex-shrink-0\" />\n                      <span className=\"text-sm text-text truncate\">\n                        {booking.address?.streetAddress || 'Address not available'}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          <Card className=\"p-6 text-center\">\n            <p className=\"text-textLight mb-4\">\n              {activeFilter === 'upcoming' \n                ? \"You don't have any upcoming bookings.\"\n                : \"You don't have any past bookings.\"\n              }\n            </p>\n            {activeFilter === 'upcoming' && (\n              <Button\n                title=\"Book a Cleaning\"\n                variant=\"primary\"\n                onClick={() => router.push('/booking/new')}\n              />\n            )}\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}",
  "src/app/favicon.ico": "\u0000\u0000\u0001\u0000\u0004\u0000\u0010\u0010\u0000\u0000\u0001\u0000 \u0000(\u0005\u0000\u0000F\u0000\u0000\u0000  \u0000\u0000\u0001\u0000 \u0000(\u0014\u0000\u0000n\u0005\u0000\u000000\u0000\u0000\u0001\u0000 \u0000(-\u0000\u0000�\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000 \u0000�\u001e\u0000\u0000�F\u0000\u0000(\u0000\u0000\u0000\u0010\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000 \u0000\u0000\u0000\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000$\u0000\u0000\u0000]\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000]\u0000\u0000\u0000$\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000 \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00008\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u00008\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001f\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000\u001f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000#\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�OOO�������������������������ggg�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000#\u0000\u0000\u0000Y\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u001f\u001f\u001f�������������������������555�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000Y\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�kkk���������������������\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\t\t\t�����������������\u0018\u0018\u0018�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000Y\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�JJJ���������kkk�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000Y\u0000\u0000\u0000#\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0001\u0001\u0001���������\t\t\t�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000#\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�111�DDD�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001f\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000\u001f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00008\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u00008\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000 \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000$\u0000\u0000\u0000]\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000]\u0000\u0000\u0000$\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000(\u0000\u0000\u0000 \u0000\u0000\u0000@\u0000\u0000\u0000\u0001\u0000 \u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0000\u0000\u0000,\u0000\u0000\u0000U\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000U\u0000\u0000\u0000,\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000*\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000*\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001c\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000\u001c\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Q\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000Q\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000r\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000r\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000r\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000r\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000O\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000O\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001b\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000\u001b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000(\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000'\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�888���������������������������������������������������������___�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0007\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u001e\u001e\u001e���������������������������������������������������������SSS�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000\u0007\u0000\u0000\u0000+\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�hhh�����������������������������������������������������\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000+\u0000\u0000\u0000T\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\b\b\b�������������������������������������������������,,,�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000T\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�GGG���������������������������������������������\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�����������������������������������������\u0017\u0017\u0017�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�+++���������������������������������jjj�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000���������������������������������\b\b\b�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000T\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0016\u0016\u0016�������������������������III�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000T\u0000\u0000\u0000+\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�hhh���������������������\u0001\u0001\u0001�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000+\u0000\u0000\u0000\u0007\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\b\b\b�����������������,,,�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000\u0007\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�GGG�������������\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000'\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000���������\u0017\u0017\u0017�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000(\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�333�___�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001a\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000\u001b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000O\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000O\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000r\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000r\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000r\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000r\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Q\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000Q\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001c\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000\u001c\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000*\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000*\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0000\u0000\u0000,\u0000\u0000\u0000U\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000U\u0000\u0000\u0000,\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000(\u0000\u0000\u00000\u0000\u0000\u0000`\u0000\u0000\u0000\u0001\u0000 \u0000\u0000\u0000\u0000\u0000\u0000-\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\t\u0000\u0000\u0000(\u0000\u0000\u0000L\u0000\u0000\u0000j\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000j\u0000\u0000\u0000K\u0000\u0000\u0000(\u0000\u0000\u0000\t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0013\u0000\u0000\u0000V\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000U\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000%\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000&\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0016\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Q\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000R\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000f\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000\u000f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000f\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000\u000e\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000P\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000O\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0015\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000#\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000#\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0011\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�$$$�hhh�eee�eee�eee�eee�eee�eee�eee�eee�eee�eee�eee�eee�eee�eee�eee�eee�eee�eee�eee�eee�eee�PPP�\u0001\u0001\u0001�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000U\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u001c\u001c\u001c�����������������������������������������������������������������������������������������sss�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000U\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�eee�������������������������������������������������������������������������������������\b\b\b�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\t\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0007\u0007\u0007���������������������������������������������������������������������������������HHH�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000\t\u0000\u0000\u0000(\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�EEE�����������������������������������������������������������������������������\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000(\u0000\u0000\u0000K\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�������������������������������������������������������������������������,,,�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000L\u0000\u0000\u0000j\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�)))���������������������������������������������������������������������\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000j\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�����������������������������������������������������������������\u0016\u0016\u0016�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0014\u0014\u0014���������������������������������������������������������iii�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�eee�����������������������������������������������������\b\b\b�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0007\u0007\u0007�������������������������������������������������HHH�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000j\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�EEE���������������������������������������������\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000j\u0000\u0000\u0000L\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�����������������������������������������,,,�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000K\u0000\u0000\u0000(\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�)))�������������������������������������\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000(\u0000\u0000\u0000\t\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000���������������������������������\u0016\u0016\u0016�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000\t\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0014\u0014\u0014�������������������������iii�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000U\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�eee���������������������\b\b\b�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000U\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0011\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0007\u0007\u0007�����������������HHH�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�EEE�������������\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000#\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000���������,,,�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000#\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�222�}}}�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0015\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000O\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000P\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000e\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000\u000f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000f\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000\u000f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000R\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000Q\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0016\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000&\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000%\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0013\u0000\u0000\u0000U\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000V\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\t\u0000\u0000\u0000(\u0000\u0000\u0000K\u0000\u0000\u0000j\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000j\u0000\u0000\u0000L\u0000\u0000\u0000(\u0000\u0000\u0000\t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�PNG\r\n\u001a\n\u0000\u0000\u0000\rIHDR\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\b\u0006\u0000\u0000\u0000\\r�f\u0000\u0000\u0000\u0001sRGB\u0000��\u001c�\u0000\u0000\u00008eXIfMM\u0000*\u0000\u0000\u0000\b\u0000\u0001�i\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001a\u0000\u0000\u0000\u0000\u0000\u0002�\u0002\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000�\u0003\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000D\"8s\u0000\u0000\u001e\u0003IDATx\u0001�]\t�\u0015ՙn�]\b<\u0016\u0011QVA���h$\t�N��13*�q��d�\u0006č�I��\b�D�L2��(�\u0014(Ԙ2�ę�\u0018\u0019G\t��q_@屈���\u001b\u0012x\bț�Џ��{o�������U�{}�O��;������9�d���(Dg�\u0013�\u00118\t�\u0003�\u0004N\u0000�\u0001]��@\u000b�\u000eh\u0003x�\u0011?v\u0000\r�N�3�=`;�6�.�&�\u000b�u�\u0013�  ��\u00016\u0006�\u001d\fP��н��@�àR�\u0000P�i\u0004Z\u0003q�^DN��\u001a�wp�\r�\f�\u0001�X�hИH\fg@\u0006��\n:\u0019��\u0013|\b�5` p\"@\u0003�'�ɲ\u0007�s{\r�p�*�2��\u0003��� \u0006d\u0000ү���\u0002\u0015|(0\u0012�\n0\u0000��>K�\u0016\n�\u0005x\u001eX\u0003�\u00076\u0001\u0007\u0000IJ\f�\u0000�C|?$KE\u001f\u0007\f\u0007N\u0001�}ϓ|����\u0019�\u0001�\u0016h $\t2 \u0003�\f�|/�\u0000.\u0000N\u0003z\u0000�#\f���W�e�\n�5��\r�\u0018\u0019�\u0001��ܶ��\f�;�y\u0000��\u0015 �g�s\u0004�\u0007\u001e\u0006h\u0010^\u0000\u001a\u0000I�\f�\u0000DL(�;\u0013�\u00048\u001f��\u001f\u000bHjg�c\u0004\u001cH|\bx\u0010�1��R\"\u0006�a���Ӂ�\u0000G��@��9`/`%0\u0003�\rH�@j\f�~,�\b��K\n�,\u0007t).\u0006�\u0001�I���D\u0018�T�\u0002O\u0002�\u0001)~�\u001c�\u000eV\u0003�u\u0005$b \u0016\u0006誛\r�U%�7������\u0000_�$b \u0012\u00068A���\u0007�\u0014�\u000e\u000e�J�3`\u0018 \u0011\u0003510\u0004wQ�?\u0006��vr���:�2�K�@ \u0006��v*{%#�\u001a�A�Z�\u0002咁^(��\u0001=�g\u0000\\��W��\u0001�\u0011�\u0004�!\u0006:��,`\u001b�6\u0014��6\u00174\u00043�:@�c\u0006.Fٟ\u0003����u?\u0011�<\u0002��'�\u0014�\u0007����_\u001c܏vp: �8\u0003\u001dQ��\u0001\u000e\nI�Ł�\rp{3���k\u0001HȢ�G��\u0002���c�Ѽ\r<�62&�\n��2uC��\u0005���敭��T\u001b�3�\n�\u0005�\r�\u0004��;�\b��d�\u0013/~m��\u0001.��X�@{�w.�\u001b�d]\u0017G��\u0000{\u0003lK��Eb\u0001\u0003���(P�RuM�T�\u0006\u001eC���\u0002�\r�d��])��_Lm�=��=@b\u0018\u0003���K��GUk�\u0015^�U�\u0006������)1��\u0001�\u0003�g�T���m`9�\\\u0003����Q��@����Ⱆ6�:ڞ�^\u0002�w��\u0006��\u0001�E�D\f��\u0000�\t�5�\u0013�\u0002��F\u0003�\u0006,�\u0006�\n�X\"\u0006�d�m�<�nB~��\u000b@\u0012\u0013\u0003���\u0002�t�t�x��\r�;�f�>�\u0016��\u001f\u001d�I8�\u0002��\u0012\u0015�8\u000e�\u0006�C1۪$B\u0006��\u0013�e��\u0018�+��j\u0003l��EZ\u0012\u0001\u0003�\u0011�& ��S:�:�6�\u0001m��\u0011��\\G1\u001a��\u0017`��\u0010�!\u001e�n\u0003l�l�Ɗ�^�Q`��@Oc�S��@e\u0006�\u0001ͷ\u0001�\b��qb�\u0001p��\u0004�\u0018S��@u\fp���F�D\u0003@�\u000fГ������2@#��\u0002��\u0004L3\u0000�A��\u001f$H2�\u0000_\u0007h\u0004�\u0007�\u0002FH\u000b#rq(\u0013\u001c��O�D�򤬈��\u0019�runGOWa�b�\u0001\u0018\u0000&�\u0001\u0003SgD\u0019\u0010\u0003�3�ED�\u0003to�*Ǥ����9k��~)�\u0001��,$�\u0000\u001fx�\u0001R�1�v\u000f�K �\u000f�9�D\f䍁U(�w\u0001�&LE�\u001c\u0004�ꩻ�\u000bS)�\u0012\u0015\u0003�3�\u0017Y8\u0019x\u00048\u0000$.i\u001a�\u0005(��K�\u0004ŀY\f����a�]�\u0012��\f�4��ǀ\tc\u0010���\u0004�@3\u0006�f�\u0003��\u0004\u0012�4�\u0000Ƣ��\r�/*\u0011\u0003b�\u0010\u0003��\u0000�\u0003��$!I\u001b�~�\u000b�7�B*-1`\t\u0003o �\u0013\u0000�\t\u0013�$��ǡD�����L��\u0001�\u0018�\u0003��\u0000�J\"��\u0018�OQ��\u0013)�\u0012\u0011\u0003�2@#�\u000ex4�\"$e\u0000���\u0003I�8��Oi��8\u0018�\u001a\"�\u0000�\u001aG��8[x�t<\u0014�.\u0007��7&�\u0015m&\u0019؎R�\u0007^��tq�\u0000ؕ�.���Y\b�-\u00062�\u0000�d�\u0002\u000f\u0000��*_�\u0006�&d|j\\�W�b �\f�G��\u0001��*g��\u0000��釁�F4�\"I�\u0014\u0019؃�/\u0000b1\u0002q\u0019�N����Y�D\f��p\f���9���p�\u001c}w\\�\u0000�Ԥ���\u00191 \u0006j`�\u0003�\u001cO��\u001a�xK\u001c=��H��\u0000�A��\u00011\u0010\r\u0003�#\u001a�\nD:U8j\u0003���t���\u000f\u0012$b b\u0006�A||\u0015�\u001dU�Q�\u0002�\u000326%��)\u001e1 \u0006�\u0018�_\r�ꢳ!~D�\u0003��\u0000��+\u0011\u0003b \u001e\u0006>A��:]\u0014�\u001f\u0013E$��50\u0017��GDhR�t����ݻwR�)��\fP�\u0016\u0000��n$� 3���\u0012@b\u0019\u0003S�Nu�,Y�j�ʲ��:�\u0017���;�\b����@�`\u0017\u0007�\u001f|�-[\u001a)�'OV��Ն�sFxڮ��ۥ�n}͛7�����~��ƺ�:\u0019\u0001���\u000fQ��J_��UKj8�q0x���\u001d;v4\u0019\u0000\u001e̞=[�hW=�\t��\t�&�!e5\u001a�8hѢE��w�]�����\u001f6���_�iW}�SZ�?\b\t�/\u0003`�\u0001\u001c;vl�}��2\u0000<�h�\"\u0019\u0000�\f���A�܁\u0014�X,�m۶�+V�(��<�w���\u0011#F�^���;���aH�c\u0019\u0000�\f��)S�*�{a���p\u000b�\b�c\u000489(�^����4�&E��oÆ\r��W�/��u�=�^���\u0016*?{k^�_E�����z�\u0005��g�\u0002�\u0000UI-���{\u001cWU*\n�:\u0003p�9\u000b\u0017.tڷo\u001f(/ݺus>��3�'�\b\u0014^�Rg��\u0017�ڞG��I_D����\f���~~�\u0000�\u0005�{\r�\b��?N\u00030\u001f�7�S��\u000e.ƍ\u001b׸�~?}/y]nA;�أ���2\u0000]\u0010�FOB2\u0004\u0016\u0018C?�_I����[�:\u0003�\u0005:�=\u000e#�OzK�-� ��ϣ�%\u000f�\u0016���?j\u0003�\u0006\u0011�I\u0006���P�ۯ��{N�-hU��\u001ft�:\u001b������\u0002�\u0000,�\u001a��G�K\u001e�-hU��\u0006�c�hP7 \u0007��\f\u0012��@�n?�\\�-�k�.�\u0005��2�:�� �`\u0014��F��\u0001=�-�V�_�G��܂V�\u0000��}�0\u0000WI����F��ʭ���sM�r\u000bZ�\u00168p\u001fJ�Q�*@OK8\b���\nr\u000bZ�\u000b�ݖa,\u0000��w�\u0000�S�W^y��\u000e��.��5�a\u000ft7��ݏ���Tv#�~\u001b7n\f��A\"�����+��W�\u0013�pM��\u0005/\u0001�hK8����g\u0004�\u0016�F/^�\u000e���\u0002��M{e\u0000��R�|�)q��7�t�\u001e\u000e�?\u001c8'�\u001b�\u0018�\u001fK��P~���瞰�\\��r\u000b��>�ǷUk\u0000�eP��|�^x\u0002����\n�\u0017/V/��v�\u0002�����\f��\b�*�p\u000e�v��\u0019\u0000�\u0005��\u0011�ʟ]J��}\u001b��k\u001a8(������ĉ\u0013�ѣGǗ�O�mڴq\u0016,X�o\u000b���e.\f�^ �Qx\u001c���p\u000e�t���\u0004�\u00164^_\u001e�N�{�\u0017\u0019����y�2\u0000�s�����\u0000�-عsg�\u0019s��\u0007�i�v��Z\r8\n!~P\u0014J?�c�������|�]\u0000�\u0016ܽ{��z�긓R��1p\u001cn���z����\u0004\u0013�\u0001tl\u001e\u0003p�9�f�r�v�jT殿�z\u0007�\u00164*O�L\u0011\u0003�~���\u001a�\u0003ԕ3��4�~~�\u0002r\u000b\u001a�;�m�xY\u0019�+���\f��\u001c����3\u0000r\u000b\u001a�;�m�x�4\u0005���:7]Ձq\fL�4)U��\u001f!r\u000b�1��u�6���$�\r�7����8\u0006�w��̙3Ǹ|5�\u0010>?�\\z��O�\u0019\f��͆�\u0000��,�E\u001d����\u00193��\u0003\u0007���2���[����2Wu:E\u0006�����^\u0003p\u0002.\fH1cJ�\u0002\u0003t�]}��\u0015B�u��SOu�����I\fc�O�����%�\u0007\u0000\r\u0000\u001a�AZ���\u0006���k����D\u001d?�5\u0000�\u001e@Q��\r���3�w�+��\"��T�\u0003�S��\u0001Uޥ�13��?\u0007�\u000b�5\u0000M'݋��>\u0003p�\u0015\u0006�Z�j�~fj�\u0001\r׈\u0011�סԐ�n�����>�\u0000��i5D�[bf ��~a�'�`X\u0006c���\u0000-�1�k��\u0001��\u001bāI�������k��Q�ů|�k�M�\u0003�\u0001(92�@�t\u0018�����\u0010݂X-�\u0017Lדa��N4\u0019��qܞ'$f0@�\u001f\r@V�nA�ܘY�L9:�|/^s�\u0000��\t��)0`�j��T\\w�uZ-\u0018����\u001f¨\\\u0003�\t@�\u0011\u001b:��c�t��\u0015�{\u0006�-��Rb��1%�\u0000�I,Y%T�\u0001��~\u0015\u000b��r\u000b�1����C�\u0006�\u001f\u000f,�\u000f$��\u0012*ˀ���f<�\u0005�\u0005\u0003\u0012\u00150z���\u0001�\u0004h�F����\u0000��\u0015��|\u000b�\u0013��8Z-�CR����Tg�\u0000�\bHRf��glY�\u0017���s��-\u0018��p��'+\u0003\u0010����m�_ؒg��\u0019��\u0014��C�\u0013{\u0000�\t��\u0001��\u0018Ȫ�ϏΙ3g�-�GR|׹7`G\u001a��񥡘�0�U��_ٵZЏ�د�D\u0003�)���\\>����ʗ��\u0015�\u0005�\u0018��z\u001f\u001a\u0000N\u0003���@��~~��-��P��{rs��\u0005�\u0017@�<����|.]�Ը\u000f|��m|g����_��y�W�KD1�b�M�\u0002��%�s\\\u001c�\u0017��\u001f�r\u000b�1\u0014��n�\u0001\\\u000b\u0014�\u0006ƒ�\"-�\u0000�`\u000b\u0017.4��~%3��I}[0A��$��=\u0000-�>BH\"G�ۏ�^r�\u0001�\u0016<�EBG�i\u0000�%���9�@^�~~\r@�\u0005�\u0018���1�\u0017�\u000b��@�\u0000\u0003t�-[����{%@C�$�mAg���Κ5kʆх�\u0018���/双O��l��ӿ��B�@.X���u\u0017�p�O��6\u001c\u0004��x�9MPn�`\u0015߷o_���^n�`t�\n��(�����\\r��s�A�y���ۂ�T�\u000e�\u001e@h\n�E0l�0��;�tڵӘk\u0010ƸN����Y�jU��\nS#\u0003�\u0001|^㽺- \u0003|��p�\rN�.���\u0003ޥ`�^{�zL�6��4\u0000�ě�b��e�]&\"�d�\u0006sΜ9Uޥ�U0�!\r��*nP�*\u0019`���o֨v����i8G�\u001a����h\u0019h�\u0001�\u0011m������ɓ�s�=�{J�U0�Ղ���wZ���\u0015��\u0019�������8bE\u0007\u0006z���,Y�D��![C�>}��\u001b7:k׮\r\u0019�no��f�\u0000>jvR?#b��X\u0003\u0006\f�(��F�AT�F��i��[�{�\u0001�zv�\u0011�>��C���\u0017a+�[0B2�D��=��G~�(\n\u0006�ĺ��\u001b����LO\u001c�\\s�܂\u001e>\"8|�\u0006`[\u0004\u0011)\n\u000f\u0003\u0013&Lp8�'��\u0001�\u0002�\u0016����4\u0000oG\u001ae�#�ۏ\u001f�lْ_\\�D̀܂�2Z�\u0012l\u0017��\u0017i�9��\rt�ȑ9f ޢ�-\u0018\u0019��\u0001��=���\u0011Y�y��n?uQ�}\u001aXͬ\f�sA�i\u0000>=��1�=\u0002\u000eR��\u0017+� +\r�܂��.2\u0000�\u000b\u0010�K�\u000e�����CƢۃ20h� �˫%53�5@�MA�%��\u0003�̣���\u0017��\u0010�j[�\u0010�9�;��\u0000_\u0001(�\u001f����0��~r���\\�{�m�P�\u0015���\u0001x#TT9��n?����N#��ץ&�\u000b\u000f}�\u0000��)\n�T\u0018�V\u0003L�!��\u0016�j���`\u000b�p\r\u0000�\u00078\u001f@R\u0005\u0003r�UAV�A�\u0016���=��-��\u001a��pLH�`@n�*Ȋ1�܂U���?\u0005}w\r\u0000]\u0002�\u0005H\u00022@�ߴi�\u0002�V��\u0019�[�˯%�\u0018������5\u0000�8�)Э\nT`��|r\u0014Zb\u000e\u0003Z-\u0018�.�!da+@�\u0000���\u0002ߞ�Z�gf\u0003�[0p����\u001a\u0000�� I\u0005\u0006��g\u0005r\f�$��o%P�_rCy\r�V�|߽���\u0019�\"\u0014m�Y�\u001b\u0013��-�[\u000b\u001c\u0000l�\u0003�k\u0000xA�\u0000\u0015��ۯ\u00029\u0006]�[pҤI\u0006�Ȩ�p\u0002P���k\u0000��\u0006Feِ���gHE�d�nAm\"Z�$��5}\u000b���z�8����2r�X�|� ��S\u001c\u0010ܻw��r�J�s�J�~�T�f�z{\u0000�ͫ\u0000�\u0007�x\u0018�j?\u000f\u0019\u0016\u001dj��Q�E�n�\u0000�js\u0003���|G�x\u0018з�<dXt(��Q�E�.�\u0001p�47\u0000�\u001b�)���;��ys�_�V�D��\f�-XTi����?�\u001b\u0000�~�薜�����\u0006 �`Q�=V�\u000b?�\u000f\u0002��^�\n�\u0003��\u0016���.]�\u000f|X�\n�m�B\u0005~��?\u0002���J�\u0000�D��\u000b�����~�h\u0000r\u000b\u0016�����ER�\u0007��A݀�B��\u0007�~w�q�Ӿ}���<�ŕ[й\u00035�d��-�\u0003`�5\u0000?\u001c�Kq�~l4��0@��)����\u0002\u0005/I\u0003��(\u0015��\u0001��؋���n��9���Y�4�!�Cو2ח*w9\u0003���GKݐ�s�&�r�e��s��?�6�\u000b8J�\u0019\u0000\u0006|\b(�\u0019\u001euw\u0006O䴁d�&K\u0017)�nA��?R���n@7,�\f�\b8�=���r�e��\u000f��n�M�69k��M7�����\u0002\u0007J��R\u000f�]�e�n��9���Z���� /?នo\u000b>��󕾤�r\u0003z\u0003r��\u0014 ��`���V{���u��4448�V��ra��p�\u0000��QRZ�<{�dK\u001c.\u0007F\u001e9��#~T���s.����\u0015N%*�\u0000\r���Ýu�8G&��\u001a�\u001a\u000f�/W:*x%�{�}@�\r\u0000��l\u0004���Nc#�AI�����\u001e��i���\u001e�*?�د\u0007�0}�g���C\"\u0006Ā\u0015\fpۯ������4\b薒\u001b\bҏ(\u0011\u0003b�\u001e\u00068�_Q�Y� \u0006���\u0005r7'�\u0005��\u0001\u000b\u0019`��� �\u000ej\u0000�6�� \u0011*�\u0018\u0010\u0003�3�W�g��\"�\u0001�l�\r\u0012�\u00011�:\u0003�Sg}%� �\u001b\t\u0007\u0001��P?����\u00011`\u001c\u0003����\u0003\u001f\u0007�Y�\u001e\u0000��\"��D�0b@\f��\u0000�����9��\u0007���\u0001�[t�\u000f�\u0018\u0010\u0003F1���p`k�\\U�\u0003`��R��A#W81 \u0006\u0012e`)R�ZM���\u0000\u0018�\u0010�[\u000bu�\u000f�\u0018\u0010\u0003F0�\trq.�����\u001e\u0000#^\u000f�=C\"\u0006Ā9\fP'�R~f��\u001e\u0000�\u001b\npn�z\u0001dC\"\u0006�e���?�\\K\u000f���\u0006�\u0017@&$b }\u0006jz�3۵�\u0000x/{\u0001\u001c\u000b��\u001f\u00121 \u0006Ra�#�|��ƟUK�=\u0000&�^��\u0005TM�n\u0010\u0003�2�9�5)?s\u0011�\u0007��{\u0002O\u0003'�D\f��D\u0019���o\u0000[kM�oK0�x��\u0000�Td�_@]\u0017\u0003b r\u0006� �G��\u001a�\u0007��;\u0000����D\f��D\u0018���1�gaR\u000b�\u0003`��'`\u00070\u0011�  \u001a�\u0018\u0010\u0003>\f\\��/���\u001cf\u0010�\u001b�������ŀ\u0018����!fn�\u001dZ�|b����U�.t�\u0014�\u0018\u0010\u0003�\u0018ट���r\u0001�9\u001f�+��\u001e������\t�\u0017\u0003b r\u0006nE�\u000fD\u0015k�=\u0000��8�����!\u0011\u0003b R\u0006�Cl�P\u0003�\u001cE�\u0003`�܌�K�'\u0003~�\u001c@\u0010�\u0018\u0010\u0003\u0001\u0019��}*�!`�@��6\u0000L�\r�;��\t$b@\fD��?#��g�F�\n�\u0016�\u000b\u000eV\u0002\u001c\u0018��\u00011\u0010�\u0001v��\u0003;�Es��Q�\u0001���=ɮ\u0003�4���b@\fT��n��!\u0010��3\u0017q�\u00020^�V��\u0000c\u0000�\u0018\u0010\u0003�1�\u0013ܶ��[���\u0015�M�=\u000e8I��\u0017�\u0018\u0010\u0003�1@�څ@Cu�\u0005\u000f\u001d�\u0001`N�o��\u0000W\u000eJĀ\u0018\b�\u0000W����e��I��\u0000n��N�mீ��\u001cܴ�_\fd��\u0003(�4`E܅I�\u0000�\f�\u0002�\"̵�\u00121 \u0006*3�+\\�E� �\\M�\u0015��)g\tr���\n���\u00188�\u0001>��\u0003p�?vI�\u0000�0\u0003�ǀ~�!\u0011\u0003b������\u0007$'�%\"I����R�\u001d�i�\u00121 \u0006�0�\u000b�?\u0000\u0012S~&��\u0018\u0000�r�\u0005��\u000b��{ n\u001e�_\f���\u0017��L�?��T\u001a\u0006�e��Ǝ�7�C\"\u0006r��OQ~\"qI�\u0000��O\u0000\u001c\u000b8�?$b �\f܋r�#@�_�v\u0017�\u0013J̙��\u0012/�\u0012\u0014\u0003�3�'d�/����W[��\u0007\u0001��o'N�\r�l�\u000b�-\u00062�\u0000���@j�O~��\u00010\u000f���2`\u0000H�@�\u0019؄�\u000f�+����\u0003p\u000bOB�\u0000�uO�\u0018�(\u0003l�S�ԕ���9\b����\u000e~�c\u0007�\u0006:x/�X\fd�\u0001.��\u001e�Ɣ�d\u0000��V�y@F\u0000$H2�\u0000����+M*�i\u0006��l\u00058O@F\u0000$H2�\u0000��\u001b�2�4&\u001a\u0000r�\rPO��֢����7N�Y\u0018S\r\u0000�\u0015�\u0011�\u0016�Y�\u00121`\u001b\u0003\u001c��;�JS3n�\u0001 g[�'��@W@\"\u0006la`32�n?'�HB2p\n�\u001ah\u0014ā\u0005m�mu\u0010 ����\u0010�j@F@\u001c��\u0006V����Z!��\u0002xI���\u0002H�\u0016\u0010y�ѱ)\f�\u0006\u0019�>�\u000f�Z!6\u0019\u0000\u0012�\u0017��a�`�����dDV$9f���\tpM�6�I�!LG:\\LdrwPy�~�P�%��L3\u0006��7�TK��A\u001am�mo|�6��\t3�\u001f�-\u0007�h\u0000J3��?�67 �\u001eyr��\u0001�\"��\u000b�\u000e�g��\u00064.\u0000\u0012$�1���_\u0001\u000f�\u001f[*��&\u0006���S/�d\u0016\u0007q�\u0001����\u001e��\f\fC�\u001e\u0003�h\u0000�3��>�6Ŷ%������\\�#�RZq\u0010�\r�\u000b=lK|ŔX��X�WS�e\u0000j5\u0000/����$���:��v@�\u0001\u0019����\u0013�8��\r�d��1(�z\u00032\u0002~F�)�\u0013��3��͋���l��C�������#���\u0001�=\u0001\u0012�.\\Lt? %\u0017\u0007\u0007�\u000e\u001e\u0000N\u0003$9b�%�:\u0011���2\u0004��u\t �1\u0003|-�\tl\u0007d\b��\u0001���\u0005t\u0000$b��@?���@� �F�c��ρ^�D\f�d�[9�\u001aࠐz\u0004�����:\u001d\nH�@ \u0006��P2\u0004v\u001b\u0000)~���@�\u0018���\u0001z5��\u0018|���\u0013�R�ֵ�\u0019�\u0018�|`#�W\u000339؂��<\u000f�\"-\u0011\u0003�0��\u0013\\\u0005<\u0001�\u0007d\f��u�oGL\u0005z\u0000\u00121�\b\u0003�Gp\u000e�\u0018���e\b�倯d�\u0000.�j\rH�@j\f�F�3��@\u0003 c\u0010\u000f\u0007{\u000es<\u001d��J&\t�@�����b\u0006�\u001d�\u0019�w��\u0000\u000e �� ��\u0001n��\u000e�v��< ��\u0001\u0019���,\u0011M;��*p>p!0\u0018h\u0003H�\u0019�{=�����\u001ex\u0011�\u0012]I�\f�\u0000DLh����<'��\u0001h\u00108�@\u0003V �#��J�\b�\u0006�f\u001c�\u0000I�\f�\u0000�Hn����\u001aW�}\u000b�N�t[u\u0006�$��������\u0000\u0015�\r@� \u00032\u0000\t�]&)�\u0011\f\u0004�\u0000#�3\u0001\u001a���,\t=%�\u0003T���k�&�\u0000 I�\u0001\u0019����I�\u0017�ӳ�\u0017\u0000\u0007\u0012�[8\t�\t�\u0007L�]�\u001c]t�\u0002T�g���6�-@b\u0010\u00032\u0000\u0006U�OV��:\r\u0000\rA?��\r}\u0000\u001a\u000b.i�\u0004|\t�xC���rv�w\u0002\u001f\u0001;\u0000��#�\u0001>�i\u00008\u000f_b8\u00032\u0000�WP�����\u001a\u0000\u001a��\u0000{\u000f'\u0002n��\u0004\u001c�8�z;�Ƥy��s�\u0000��@��\u0002\b�\u0007P��\u0001o\u0003|�S�i\u0004h\u0000$\u00163��@߹\u000ej��\u0000\u0000\u0000\u0000IEND�B`�",
  "src/app/globals.css": "@import \"tailwindcss\";\n\n:root {\n  --background: #ffffff;\n  --foreground: #171717;\n}\n\n@theme inline {\n  --color-background: var(--background);\n  --color-foreground: var(--foreground);\n  --font-sans: var(--font-geist-sans);\n  --font-mono: var(--font-geist-mono);\n}\n\n/* @media (prefers-color-scheme: dark) { */\n  /* :root { */\n    /* --background: #0a0a0a; */\n    /* --foreground: #ededed; */\n  /* } */\n/* } */\n\nbody {\n  background: var(--background);\n  color: var(--foreground);\n  font-family: Arial, Helvetica, sans-serif;\n}\n",
  "src/app/layout.tsx": "// src/app/layout.tsx\nimport { AuthProvider } from '@/contexts/AuthContext';\nimport MainLayout from '@/components/layout/MainLayout';\nimport './globals.css';\n\nexport const metadata = {\n  title: 'HCleanz - Cleaning Services',\n  description: 'Book professional cleaning services on demand',\n}\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <html lang=\"en\">\n      <body>\n        <AuthProvider>\n          <MainLayout>{children}</MainLayout>\n        </AuthProvider>\n      </body>\n    </html>\n  );\n}",
  "src/app/login/page.tsx": "// src/app/login/page.tsx\n'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\nimport Link from 'next/link';\nimport { Mail, Lock } from 'lucide-react';\nimport { useAuth } from '@/contexts/AuthContext';\nimport Input from '@/components/ui/Input';\nimport Button from '@/components/ui/Button';\nimport Card from '@/components/ui/Card';\nimport LoadingOverlay from '@/components/ui/LoadingOverlay';\nimport FancyLoader from '@/components/ui/FancyLoader';\n\nexport default function LoginPage() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState<string | null>(null);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const { login, isLoading } = useAuth();\n  const router = useRouter();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError(null);\n    setIsSubmitting(true);\n\n    // Simple validation\n    if (!email || !password) {\n      setError('Please enter both email and password');\n      setIsSubmitting(false);\n      return;\n    }\n\n    try {\n      await login(email, password);\n      router.push('/');\n    } catch (err: any) {\n      setError(err.response?.data?.message || 'Failed to login. Please check your credentials.');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  useEffect(() => {\n    // Check if there's an auth message to display\n    const authMessage = sessionStorage.getItem('authMessage');\n    if (authMessage) {\n      setError(authMessage);\n      // Clear the message so it doesn't show again on refresh\n      sessionStorage.removeItem('authMessage');\n    }\n  }, []);\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center px-4\">\n      <FancyLoader visible={isLoading} />\n      \n      <Card className=\"w-full max-w-md p-6\">\n        <div className=\"mb-6 text-center\">\n          <h1 className=\"text-2xl font-bold text-text mb-2\">Welcome Back</h1>\n          <p className=\"text-textLight\">Sign in to your account</p>\n        </div>\n        \n        <form onSubmit={handleSubmit}>\n          <Input \n            type=\"email\"\n            label=\"Email\"\n            placeholder=\"Enter your email\"\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n            leftIcon={<Mail size={20} className=\"text-textLight\" />}\n            required\n          />\n          \n          <Input \n            type=\"password\"\n            label=\"Password\"\n            placeholder=\"Enter your password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            leftIcon={<Lock size={20} className=\"text-textLight\" />}\n            required\n          />\n          \n          {error && (\n            <div className=\"mb-4 p-3 bg-error bg-opacity-10 text-error rounded-lg text-sm\">\n              {error}\n            </div>\n          )}\n          \n          <Button \n            title=\"Login\" \n            type=\"submit\" \n            variant=\"primary\" \n            fullWidth \n            loading={isSubmitting}\n            className=\"mb-4\"\n          />\n\n          <div className=\"text-center text-sm text-textLight\">\n            Don&apos;t have an account?{' '}\n            <Link href=\"/register\" className=\"text-primary hover:underline\">\n              Create Account\n            </Link>\n          </div>\n        </form>\n      </Card>\n    </div>\n  );\n}",
  "src/app/page.tsx": "// src/app/page.tsx\nimport ProtectedRoute from '@/components/auth/ProtectedRoute';\nimport Dashboard from '@/components/home/Dashboard';\n\nexport default function Home() {\n  return (\n    <ProtectedRoute>\n      <Dashboard />\n    </ProtectedRoute>\n  );\n}",
  "src/app/profile/addresses/edit/[id]/page.tsx": "// src/app/profile/addresses/edit/[id]/page.tsx\n'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useRouter, useParams } from 'next/navigation';\nimport { addressAPI } from '@/services/api';\nimport { ArrowLeft } from 'lucide-react';\nimport Link from 'next/link';\nimport LoadingOverlay from '@/components/ui/LoadingOverlay';\nimport FancyLoader from '@/components/ui/FancyLoader';\n\nexport default function EditAddressPage() {\n  const params = useParams();\n  const addressId = params.id as string;\n  const router = useRouter();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [formData, setFormData] = useState({\n    name: '',\n    streetAddress: '',\n    city: '',\n    state: '',\n    zipCode: '',\n    squareFootage: 0,\n    notes: '',\n    isDefault: false\n  });\n\n  useEffect(() => {\n    const fetchAddress = async () => {\n      try {\n        setLoading(true);\n        const addresses = await addressAPI.getUserAddresses();\n        const address = addresses.find((a: any) => a._id === addressId);\n        \n        if (!address) {\n          setError('Address not found');\n          return;\n        }\n        \n        setFormData({\n          name: address.name,\n          streetAddress: address.streetAddress,\n          city: address.city,\n          state: address.state,\n          zipCode: address.zipCode,\n          squareFootage: address.squareFootage,\n          notes: address.notes || '',\n          isDefault: address.isDefault || false\n        });\n      } catch (err) {\n        console.error('Error fetching address:', err);\n        setError('Failed to load address details');\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    fetchAddress();\n  }, [addressId]);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value, type } = e.target as HTMLInputElement;\n    \n    setFormData(prev => ({\n      ...prev,\n      [name]: type === 'checkbox' \n        ? (e.target as HTMLInputElement).checked \n        : name === 'squareFootage' \n          ? parseInt(value) || 0 \n          : value\n    }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError(null);\n    \n    try {\n      setLoading(true);\n      await addressAPI.updateAddress(addressId, formData);\n      router.push('/booking/address');\n    } catch (err) {\n      console.error('Error updating address:', err);\n      setError('Failed to update address');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (loading) {\n    return <FancyLoader visible={true} message=\"Loading address...\" />;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-white pb-20\">\n      {/* Header */}\n      <div className=\"border-b border-gray-200\">\n        <div className=\"px-4 py-4 flex items-center\">\n          <Link href=\"/booking/address\" className=\"mr-2\">\n            <ArrowLeft size={20} className=\"text-gray-800\" />\n          </Link>\n          <h1 className=\"text-lg font-semibold\">Edit Address</h1>\n        </div>\n      </div>\n      \n      {/* Content */}\n      <div className=\"px-4 pt-6 max-w-md mx-auto\">\n        <h2 className=\"text-2xl font-bold text-gray-800 mb-6\">\n          Edit Address\n        </h2>\n\n        {error && (\n          <div className=\"mb-4 p-3 bg-red-50 border border-red-200 rounded-lg text-red-600 text-sm\">\n            {error}\n          </div>\n        )}\n        \n        <form onSubmit={handleSubmit}>\n          <div className=\"space-y-4\">\n            {/* Form fields similar to your Add New Address form */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Location Name*\n              </label>\n              <input\n                type=\"text\"\n                name=\"name\"\n                value={formData.name}\n                onChange={handleInputChange}\n                placeholder=\"Home, Office, etc.\"\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                required\n              />\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Street Address*\n              </label>\n              <input\n                type=\"text\"\n                name=\"streetAddress\"\n                value={formData.streetAddress}\n                onChange={handleInputChange}\n                placeholder=\"123 Main St\"\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                required\n              />\n            </div>\n            \n            <div className=\"grid grid-cols-2 gap-3\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  City*\n                </label>\n                <input\n                  type=\"text\"\n                  name=\"city\"\n                  value={formData.city}\n                  onChange={handleInputChange}\n                  placeholder=\"City\"\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  required\n                />\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  State*\n                </label>\n                <input\n                  type=\"text\"\n                  name=\"state\"\n                  value={formData.state}\n                  onChange={handleInputChange}\n                  placeholder=\"State\"\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  required\n                />\n              </div>\n            </div>\n            \n            <div className=\"grid grid-cols-2 gap-3\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  ZIP Code*\n                </label>\n                <input\n                  type=\"text\"\n                  name=\"zipCode\"\n                  value={formData.zipCode}\n                  onChange={handleInputChange}\n                  placeholder=\"12345\"\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  required\n                />\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Square Footage*\n                </label>\n                <input\n                  type=\"number\"\n                  name=\"squareFootage\"\n                  value={formData.squareFootage}\n                  onChange={handleInputChange}\n                  placeholder=\"1000\"\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  required\n                />\n              </div>\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Notes (Optional)\n              </label>\n              <textarea\n                name=\"notes\"\n                value={formData.notes}\n                onChange={handleInputChange}\n                placeholder=\"Any special instructions for finding or accessing this location\"\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 h-24\"\n              />\n            </div>\n            \n            <div className=\"flex items-center\">\n              <input\n                type=\"checkbox\"\n                id=\"isDefault\"\n                name=\"isDefault\"\n                checked={formData.isDefault}\n                onChange={handleInputChange}\n                className=\"w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500\"\n              />\n              <label htmlFor=\"isDefault\" className=\"ml-2 block text-sm text-gray-700\">\n                Set as default address\n              </label>\n            </div>\n            \n            <div className=\"flex space-x-3 pt-4\">\n              <button\n                type=\"button\"\n                onClick={() => router.push('/booking/address')}\n                className=\"flex-1 py-3 border border-gray-300 rounded-lg font-medium text-gray-700 hover:bg-gray-50 cursor-pointer\"\n              >\n                Cancel\n              </button>\n              <button\n                type=\"submit\"\n                className=\"flex-1 py-3 bg-blue-500 text-white rounded-lg font-medium hover:bg-blue-600 cursor-pointer\"\n              >\n                Save Changes\n              </button>\n            </div>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}",
  "src/app/profile/addresses/page.tsx": "// src/app/profile/addresses/page.tsx\n'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { addressAPI } from '@/services/api';\nimport LoadingOverlay from '@/components/ui/LoadingOverlay';\nimport Button from '@/components/ui/Button';\nimport AddressCard from '@/components/ui/AddressCard';\nimport { Plus } from 'lucide-react';\nimport FancyLoader from '@/components/ui/FancyLoader';\n\nexport default function AddressesPage() {\n  const [addresses, setAddresses] = useState<any[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const { isAuthenticated, isLoading } = useAuth();\n  const router = useRouter();\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      router.push('/login');\n      return;\n    }\n\n    const fetchAddresses = async () => {\n      try {\n        const addressesData = await addressAPI.getUserAddresses();\n        setAddresses(addressesData);\n      } catch (err: any) {\n        setError('Failed to load addresses');\n        console.error('Error fetching addresses:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    if (isAuthenticated) {\n      fetchAddresses();\n    }\n  }, [isAuthenticated, isLoading, router]);\n\n  const handleEditAddress = (addressId: string) => {\n    router.push(`/profile/addresses/edit/${addressId}`);\n  };\n\n  const handleDeleteAddress = async (addressId: string) => {\n    if (!window.confirm('Are you sure you want to delete this address?')) {\n      return;\n    }\n\n    try {\n      await addressAPI.deleteAddress(addressId);\n      setAddresses(addresses.filter(address => address._id !== addressId));\n    } catch (err: any) {\n      setError('Failed to delete address');\n      console.error('Error deleting address:', err);\n    }\n  };\n\n  if (isLoading || loading) {\n    return <FancyLoader visible={true} message=\"Loading addresses...\" />;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background px-4 py-6 sm:px-6 lg:px-8\">\n      <div className=\"max-w-3xl mx-auto\">\n        <div className=\"mb-6\">\n          <h1 className=\"text-2xl font-bold text-text mb-2\">My Addresses</h1>\n          <p className=\"text-textLight\">Manage your saved addresses</p>\n        </div>\n\n        <div className=\"mb-6\">\n          <Button\n            title=\"Add New Address\"\n            variant=\"primary\"\n            icon={<Plus size={18} />}\n            iconPosition=\"left\"\n            onClick={() => router.push('/profile/addresses/new')}\n            fullWidth\n          />\n        </div>\n\n        {error && (\n          <div className=\"mb-4 p-3 bg-error bg-opacity-10 text-error rounded-lg text-sm\">\n            {error}\n          </div>\n        )}\n\n        {addresses.length > 0 ? (\n          <div className=\"space-y-4\">\n            {addresses.map(address => (\n              <AddressCard\n                key={address._id}\n                address={address}\n                onEdit={() => handleEditAddress(address._id)}\n                onDelete={() => handleDeleteAddress(address._id)}\n              />\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-center p-6 bg-white rounded-lg shadow\">\n            <p className=\"text-textLight mb-4\">You don't have any saved addresses yet.</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}",
  "src/app/profile/page.tsx": "// src/app/profile/page.tsx\n'use client';\n\nimport { useRouter } from 'next/navigation';\nimport { useAuth } from '@/contexts/AuthContext';\nimport LoadingOverlay from '@/components/ui/LoadingOverlay';\nimport Button from '@/components/ui/Button';\nimport Card from '@/components/ui/Card';\nimport { User, MapPin, CreditCard, Settings, LogOut } from 'lucide-react';\nimport FancyLoader from '@/components/ui/FancyLoader';\n\nexport default function ProfilePage() {\n  const { user, isLoading, isAuthenticated, logout } = useAuth();\n  const router = useRouter();\n\n  if (isLoading) {\n    return <FancyLoader visible={true} message=\"Loading profile...\" />;\n  }\n\n  if (!isAuthenticated) {\n    router.push('/login');\n    return null;\n  }\n\n  const handleLogout = () => {\n    logout();\n    router.push('/login');\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background px-4 py-6 sm:px-6 lg:px-8\">\n      <div className=\"max-w-3xl mx-auto\">\n        <div className=\"mb-6\">\n          <h1 className=\"text-2xl font-bold text-text mb-2\">Profile</h1>\n          <p className=\"text-textLight\">Manage your account</p>\n        </div>\n\n        <Card className=\"mb-6 p-6\">\n          <div className=\"flex items-center mb-4\">\n            <div className=\"w-16 h-16 rounded-full bg-primary bg-opacity-10 flex items-center justify-center mr-4\">\n              <span className=\"text-xl font-bold text-primary\">\n                {user?.firstName?.charAt(0)}{user?.lastName?.charAt(0)}\n              </span>\n            </div>\n            \n            <div>\n              <h2 className=\"text-xl font-semibold text-text\">\n                {user?.firstName} {user?.lastName}\n              </h2>\n              <p className=\"text-textLight\">{user?.email}</p>\n              {user?.phone && <p className=\"text-textLight\">{user?.phone}</p>}\n            </div>\n          </div>\n          \n          <Button\n            title=\"Edit Profile\"\n            variant=\"outline\"\n            icon={<Settings size={16} />}\n            iconPosition=\"left\"\n            onClick={() => router.push('/profile/edit')}\n            fullWidth\n          />\n        </Card>\n\n        <div className=\"space-y-4 mb-6\">\n          <Card \n            className=\"p-4 flex items-center cursor-pointer hover:shadow-md transition-shadow\"\n            onClick={() => router.push('/profile/addresses')}\n          >\n            <div className=\"w-10 h-10 rounded-full bg-primary bg-opacity-10 flex items-center justify-center mr-4\">\n              <MapPin size={20} className=\"text-primary\" />\n            </div>\n            <div>\n              <h3 className=\"font-medium text-text\">My Addresses</h3>\n              <p className=\"text-sm text-textLight\">Manage your addresses</p>\n            </div>\n          </Card>\n          \n          <Card \n            className=\"p-4 flex items-center cursor-pointer hover:shadow-md transition-shadow\"\n            onClick={() => router.push('/profile/payment')}\n          >\n            <div className=\"w-10 h-10 rounded-full bg-primary bg-opacity-10 flex items-center justify-center mr-4\">\n              <CreditCard size={20} className=\"text-primary\" />\n            </div>\n            <div>\n              <h3 className=\"font-medium text-text\">Payment Methods</h3>\n              <p className=\"text-sm text-textLight\">Manage your payment options</p>\n            </div>\n          </Card>\n        </div>\n\n        <Button\n          title=\"Log Out\"\n          variant=\"ghost\"\n          icon={<LogOut size={16} />}\n          iconPosition=\"left\"\n          onClick={handleLogout}\n          fullWidth\n          className=\"text-error hover:text-error\"\n        />\n      </div>\n    </div>\n  );\n}",
  "src/app/register/page.tsx": "// src/app/register/page.tsx\n'use client';\n\nimport { useState } from 'react';\nimport { useRouter } from 'next/navigation';\nimport Link from 'next/link';\nimport { Mail, Lock, User, Phone, Sparkles } from 'lucide-react';\nimport { useAuth } from '@/contexts/AuthContext';\nimport Input from '@/components/ui/Input';\nimport Button from '@/components/ui/Button';\nimport Card from '@/components/ui/Card';\nimport LoadingOverlay from '@/components/ui/LoadingOverlay';\nimport FancyLoader from '@/components/ui/FancyLoader';\n\nexport default function RegisterPage() {\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [email, setEmail] = useState('');\n  const [phone, setPhone] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [role, setRole] = useState<'customer' | 'cleaner'>('customer');\n  const [error, setError] = useState<string | null>(null);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const { register, isLoading } = useAuth();\n  const router = useRouter();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError(null);\n    setIsSubmitting(true);\n\n    // Simple validation\n    if (!firstName || !lastName || !email || !password) {\n      setError('Please fill in all required fields');\n      setIsSubmitting(false);\n      return;\n    }\n\n    if (password !== confirmPassword) {\n      setError('Passwords do not match');\n      setIsSubmitting(false);\n      return;\n    }\n\n    try {\n      await register({ firstName, lastName, email, phone, password, role });\n      router.push('/');\n    } catch (err: any) {\n      setError(err.response?.data?.message || 'Failed to register. Please try again.');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center px-4 py-8\">\n      <FancyLoader visible={isLoading} />\n      \n      <Card className=\"w-full max-w-md p-6\">\n        <div className=\"mb-6 text-center\">\n          <h1 className=\"text-2xl font-bold text-text mb-2\">Create Account</h1>\n          <p className=\"text-textLight\">Sign up to get started</p>\n        </div>\n        \n        <form onSubmit={handleSubmit}>\n          <div className=\"grid grid-cols-2 gap-4\">\n            <Input \n              type=\"text\"\n              label=\"First Name\"\n              placeholder=\"Enter first name\"\n              value={firstName}\n              onChange={(e) => setFirstName(e.target.value)}\n              leftIcon={<User size={20} className=\"text-textLight\" />}\n              required\n            />\n            \n            <Input \n              type=\"text\"\n              label=\"Last Name\"\n              placeholder=\"Enter last name\"\n              value={lastName}\n              onChange={(e) => setLastName(e.target.value)}\n              leftIcon={<User size={20} className=\"text-textLight\" />}\n              required\n            />\n          </div>\n          \n          <Input \n            type=\"email\"\n            label=\"Email\"\n            placeholder=\"Enter your email\"\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n            leftIcon={<Mail size={20} className=\"text-textLight\" />}\n            required\n          />\n          \n          <Input \n            type=\"tel\"\n            label=\"Phone (optional)\"\n            placeholder=\"Enter your phone number\"\n            value={phone}\n            onChange={(e) => setPhone(e.target.value)}\n            leftIcon={<Phone size={20} className=\"text-textLight\" />}\n          />\n          \n          <Input \n            type=\"password\"\n            label=\"Password\"\n            placeholder=\"Create a password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            leftIcon={<Lock size={20} className=\"text-textLight\" />}\n            required\n          />\n          \n          <Input \n            type=\"password\"\n            label=\"Confirm Password\"\n            placeholder=\"Confirm your password\"\n            value={confirmPassword}\n            onChange={(e) => setConfirmPassword(e.target.value)}\n            leftIcon={<Lock size={20} className=\"text-textLight\" />}\n            required\n          />\n          \n          <div className=\"mb-4\">\n            <label className=\"block text-sm font-medium text-text mb-2\">I am a:</label>\n            <div className=\"flex space-x-4\">\n              <div \n                className={`flex-1 p-3 border rounded-lg cursor-pointer transition-colors ${\n                  role === 'customer' \n                    ? 'border-primary bg-primary bg-opacity-5' \n                    : 'border-border'\n                }`}\n                onClick={() => setRole('customer')}\n              >\n                <div className=\"text-center\">\n                  <User size={24} className=\"mx-auto mb-2 text-primary\" />\n                  <span className={role === 'customer' ? 'text-primary font-medium' : 'text-text'}>\n                    Customer\n                  </span>\n                </div>\n              </div>\n              \n              <div \n                className={`flex-1 p-3 border rounded-lg cursor-pointer transition-colors ${\n                  role === 'cleaner' \n                    ? 'border-primary bg-primary bg-opacity-5' \n                    : 'border-border'\n                }`}\n                onClick={() => setRole('cleaner')}\n              >\n                <div className=\"text-center\">\n                  <Sparkles size={24} className=\"mx-auto mb-2 text-primary\" />\n                  <span className={role === 'cleaner' ? 'text-primary font-medium' : 'text-text'}>\n                    Cleaner\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          {error && (\n            <div className=\"mb-4 p-3 bg-error bg-opacity-10 text-error rounded-lg text-sm\">\n              {error}\n            </div>\n          )}\n          \n          <Button \n            title=\"Create Account\" \n            type=\"submit\" \n            variant=\"primary\" \n            fullWidth \n            loading={isSubmitting}\n            className=\"mb-4\"\n          />\n\n          <div className=\"text-center text-sm text-textLight\">\n            Already have an account?{' '}\n            <Link href=\"/login\" className=\"text-primary hover:underline\">\n              Sign In\n            </Link>\n          </div>\n        </form>\n      </Card>\n    </div>\n  );\n}",
  "src/components/auth/ProtectedRoute.tsx": "// src/components/auth/ProtectedRoute.tsx\n'use client';\n\nimport { useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { useAuth } from '@/contexts/AuthContext';\nimport FancyLoader from '@/components/ui/FancyLoader';\n\nexport default function ProtectedRoute({ children }: { children: React.ReactNode }) {\n  const { isAuthenticated, isLoading } = useAuth();\n  const router = useRouter();\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      router.push('/login');\n    }\n  }, [isAuthenticated, isLoading, router]);\n\n  if (isLoading) {\n    return <FancyLoader visible={true} message=\"Loading profile...\" />;\n  }\n\n  if (!isAuthenticated) {\n    return null; // Will redirect in useEffect\n  }\n\n  return <>{children}</>;\n}",
  "src/components/home/Dashboard.tsx": "// src/components/home/Dashboard.tsx\n'use client';\n\nimport { useState, useEffect, useRef } from 'react';\nimport { useRouter } from 'next/navigation';\nimport Link from 'next/link';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { bookingAPI, serviceAPI } from '@/services/api';\nimport { \n  Home, \n  Plus, \n  Sparkles, \n  Briefcase, \n  PartyPopper,\n  ChevronLeft,\n  ChevronRight\n} from 'lucide-react';\nimport Cookies from 'js-cookie';\n\nexport default function Dashboard() {\n  const { isAuthenticated, isLoading, user } = useAuth();\n  const [bookings, setBookings] = useState<any[]>([]);\n  const [services, setServices] = useState<any[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedServiceId, setSelectedServiceId] = useState<string | null>(null);\n  const [autoScrollEnabled, setAutoScrollEnabled] = useState(true);\n  const carouselRef = useRef<HTMLDivElement>(null);\n  const autoScrollTimerRef = useRef<NodeJS.Timeout | null>(null);\n  const router = useRouter();\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      router.push('/login');\n      return;\n    }\n\n    const fetchData = async () => {\n      if (!isAuthenticated) return;\n      \n      setLoading(true);\n      try {\n        // Fetch real bookings from API\n        const bookingsData = await bookingAPI.getUserBookings();\n        setBookings(bookingsData);\n        \n        // Fetch real services from API\n        const servicesData = await serviceAPI.getServices();\n        setServices(servicesData);\n      } catch (err) {\n        console.error('Error fetching data:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    if (isAuthenticated) {\n      fetchData();\n    }\n  }, [isAuthenticated, isLoading, router]);\n\n  // Auto-scrolling functionality\n  useEffect(() => {\n    if (!autoScrollEnabled || !carouselRef.current || services.length <= 2) return;\n\n    const scrollRight = () => {\n      if (!carouselRef.current) return;\n      \n      const { scrollLeft, scrollWidth, clientWidth } = carouselRef.current;\n      const newScrollLeft = scrollLeft + 300;\n      \n      if (scrollLeft + clientWidth >= scrollWidth - 10) {\n        // If we're at the end, scroll back to the beginning\n        carouselRef.current.scrollTo({ left: 0, behavior: 'smooth' });\n      } else {\n        // Otherwise, continue scrolling right\n        carouselRef.current.scrollTo({ left: newScrollLeft, behavior: 'smooth' });\n      }\n    };\n\n    // Set up the auto-scroll timer\n    autoScrollTimerRef.current = setInterval(scrollRight, 3000);\n\n    return () => {\n      if (autoScrollTimerRef.current) {\n        clearInterval(autoScrollTimerRef.current);\n      }\n    };\n  }, [autoScrollEnabled, services.length]);\n\n  // Handle manual scrolling - pause auto-scroll when user interacts\n  const handleManualScroll = () => {\n    setAutoScrollEnabled(false);\n    \n    // Resume auto-scroll after 8 seconds of inactivity\n    if (autoScrollTimerRef.current) {\n      clearTimeout(autoScrollTimerRef.current);\n    }\n    \n    autoScrollTimerRef.current = setTimeout(() => {\n      setAutoScrollEnabled(true);\n    }, 8000);\n  };\n\n  // Scroll control functions\n  const scrollLeft = () => {\n    if (!carouselRef.current) return;\n    const newScrollLeft = carouselRef.current.scrollLeft - 300;\n    carouselRef.current.scrollTo({ left: newScrollLeft, behavior: 'smooth' });\n    handleManualScroll();\n  };\n\n  const scrollRight = () => {\n    if (!carouselRef.current) return;\n    const newScrollLeft = carouselRef.current.scrollLeft + 300;\n    carouselRef.current.scrollTo({ left: newScrollLeft, behavior: 'smooth' });\n    handleManualScroll();\n  };\n\n  // Handle loading state\n  if (isLoading || loading) {\n    return (\n      <div className=\"fixed inset-0 bg-white flex items-center justify-center z-50\">\n        <div className=\"w-12 h-12 border-4 border-primary border-t-transparent rounded-full animate-spin\"></div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null; // Will redirect in useEffect\n  }\n\n  // Filter upcoming bookings\n  const upcomingBookings = bookings.filter(booking => \n    booking.status === 'confirmed' || booking.status === 'pending'\n  );\n\n  // Get service color based on service name or icon property\n  const getServiceColor = (service: any) => {\n    if (service.icon === 'sparkles' || service.name.includes('Deep')) \n      return 'bg-blue-500';\n    if (service.icon === 'briefcase' || service.name.includes('Move')) \n      return 'bg-purple-500';\n    if (service.icon === 'party' || service.name.includes('Party')) \n      return 'bg-pink-500';\n    return 'bg-green-500';\n  };\n\n  // Get icon based on service name or icon property\n  const getServiceIcon = (service: any) => {\n    if (service.icon === 'sparkles' || service.name.includes('Deep')) \n      return <Sparkles size={32} className=\"text-white\" />;\n    if (service.icon === 'briefcase' || service.name.includes('Move')) \n      return <Briefcase size={32} className=\"text-white\" />;\n    if (service.icon === 'party' || service.name.includes('Party')) \n      return <PartyPopper size={32} className=\"text-white\" />;\n    return <Home size={32} className=\"text-white\" />;\n  };\n\n  const handleServiceSelect = (service: any) => {\n    setSelectedServiceId(service._id);\n    \n    // Store the selected service in cookies\n    Cookies.set('bookingService', JSON.stringify({\n      serviceId: service._id,\n      serviceName: service.name,\n      serviceDescription: service.description || '',\n      basePrice: service.basePrice || 120,\n      estimatedPrice: service.basePrice || 120\n    }));\n  };\n\n  const handleContinueToAddress = () => {\n    if (selectedServiceId) {\n      // Navigate to address selection\n      router.push('/booking/address');\n    } else if (services.length > 0) {\n      // If no service selected, select the first one and continue\n      handleServiceSelect(services[0]);\n      router.push('/booking/address');\n    } else {\n      // If no services available, go to service selection page\n      router.push('/booking/services');\n    }\n  };\n\n  return (\n    <div>\n      {/* Header */}\n      <div className=\"border-b\">\n        <div className=\"px-4 py-3\">\n          <h1 className=\"text-lg font-medium\">Home</h1>\n        </div>\n      </div>\n      \n      {/* Welcome Section */}\n      <div className=\"px-4 pt-4 pb-3\">\n        <h2 className=\"text-xl font-bold text-gray-800\">\n          Hello, {user?.firstName || 'test'}!\n        </h2>\n        <p className=\"text-gray-500 mt-1\">Ready to book a cleaning service?</p>\n      </div>\n\n      {/* Book a Cleaning Button - Always enabled */}\n      <div className=\"px-4 pb-6\">\n        <button \n          className=\"w-full bg-[#3498db] text-white rounded-md py-3 px-4 flex items-center justify-center font-medium hover:bg-blue-600 transition-colors cursor-pointer\"\n          onClick={handleContinueToAddress}\n        >\n          <Plus size={20} className=\"mr-2\" />\n          Book a Cleaning Service\n        </button>\n      </div>\n\n      {/* Cleaning Services Carousel Section */}\n      <div className=\"px-4 pb-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-semibold\">Cleaning Services</h3>\n          <div className=\"flex space-x-2\">\n            <button \n              onClick={scrollLeft} \n              className=\"bg-gray-100 hover:bg-gray-200 p-1.5 rounded-full transition-colors\"\n            >\n              <ChevronLeft size={18} />\n            </button>\n            <button \n              onClick={scrollRight} \n              className=\"bg-gray-100 hover:bg-gray-200 p-1.5 rounded-full transition-colors\"\n            >\n              <ChevronRight size={18} />\n            </button>\n          </div>\n        </div>\n        \n        {services.length > 0 ? (\n          <div className=\"relative\">\n            <div \n              ref={carouselRef}\n              className=\"flex overflow-x-auto scrollbar-hide snap-x snap-mandatory py-2 -mx-1 px-1 space-x-4\"\n              style={{ scrollbarWidth: 'none', msOverflowStyle: 'none' }}\n              onScroll={handleManualScroll}\n            >\n              {services.map((service) => (\n                <div \n                  key={service._id}\n                  className={`snap-center flex-shrink-0 w-64 h-36 rounded-xl shadow-md overflow-hidden cursor-pointer transition-transform transform hover:scale-105 ${\n                    selectedServiceId === service._id ? 'ring-3 ring-blue-400' : ''\n                  }`}\n                  onClick={() => handleServiceSelect(service)}\n                >\n                  <div className={`h-full w-full p-4 flex flex-col justify-between ${getServiceColor(service)} text-white`}>\n                    <div className=\"bg-white/20 rounded-full p-2 w-fit\">\n                      {getServiceIcon(service)}\n                    </div>\n                    <div>\n                      <h3 className=\"text-lg font-bold mb-1\">{service.name}</h3>\n                      <p className=\"text-sm opacity-90 line-clamp-2\">{service.description || 'Professional cleaning service'}</p>\n                      <div className=\"mt-1 font-bold\">${service.basePrice || 120}</div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        ) : (\n          <div className=\"py-4 text-center text-gray-500\">\n            Loading services...\n          </div>\n        )}\n        \n        {/* Add this to your global CSS */}\n        <style jsx global>{`\n          .scrollbar-hide::-webkit-scrollbar {\n            display: none;\n          }\n          .scrollbar-hide {\n            -ms-overflow-style: none;\n            scrollbar-width: none;\n          }\n          .line-clamp-2 {\n            display: -webkit-box;\n            -webkit-line-clamp: 2;\n            -webkit-box-orient: vertical;\n            overflow: hidden;\n          }\n        `}</style>\n      </div>\n\n      {/* Upcoming Bookings Section */}\n      <div className=\"px-4 pb-16\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-semibold\">Upcoming Bookings</h3>\n          <Link href=\"/bookings\" className=\"text-sm font-medium text-[#3498db]\">\n            View All\n          </Link>\n        </div>\n\n        {upcomingBookings.length > 0 ? (\n          <div>\n            {/* Render actual bookings here */}\n          </div>\n        ) : (\n          <div className=\"bg-white p-6 rounded-lg border border-gray-100 text-center\">\n            <p className=\"text-gray-500\">\n              You don't have any upcoming bookings.\n            </p>\n            <p className=\"text-gray-500 mt-2\">\n              Book a cleaning service to get started!\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}",
  "src/components/layout/BottomNavigation.tsx": "'use client';\n\nimport { usePathname, useRouter } from 'next/navigation';\nimport Link from 'next/link';\nimport { Home, Calendar, MessageSquare, User } from 'lucide-react';\n\nexport const BottomNavigation = () => {\n  const pathname = usePathname();\n  \n  const isActive = (path: string) => {\n    return pathname === path;\n  };\n\n  const navItems = [\n    {\n      icon: Home,\n      label: 'Home',\n      path: '/',\n    },\n    {\n      icon: Calendar,\n      label: 'Bookings',\n      path: '/bookings',\n    },\n    {\n      icon: MessageSquare,\n      label: 'Messages',\n      path: '/messages',\n    },\n    {\n      icon: User,\n      label: 'Profile',\n      path: '/profile',\n    },\n  ];\n\n  return (\n    <div className=\"fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 sm:hidden z-10\">\n      <div className=\"flex justify-around items-center h-16\">\n        {navItems.map((item) => (\n          <Link\n            key={item.path}\n            href={item.path}\n            className=\"flex flex-col items-center justify-center w-full h-full\"\n          >\n            <item.icon\n              size={24}\n              className={isActive(item.path) ? 'text-primary' : 'text-gray-500'}\n            />\n            <span\n              className={`text-xs mt-1 ${\n                isActive(item.path) ? 'text-primary' : 'text-gray-500'\n              }`}\n            >\n              {item.label}\n            </span>\n          </Link>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default BottomNavigation;",
  "src/components/layout/MainLayout.tsx": "// src/components/layout/MainLayout.tsx\n\"use client\";\nimport { useAuth } from '@/contexts/AuthContext';\nimport BottomNavigation from './BottomNavigation';\nimport { usePathname, useRouter } from 'next/navigation';\n\nconst MainLayout = ({ children }: { children: React.ReactNode }) => {\n  const { isAuthenticated, logout } = useAuth();\n  const pathname = usePathname();\n  const router = useRouter();\n\n  // Do not show the logout button on auth pages\n  const isAuthPage = pathname?.includes('/login') || pathname?.includes('/register');\n\n  const handleLogout = () => {\n    logout();\n    router.push('/login');\n  };\n\n  return (\n    <div className=\"flex flex-col min-h-screen\">\n      {isAuthenticated && !isAuthPage && (\n        <header className=\"flex justify-between items-center p-4 border-b\">\n          <div>\n            <h1 className=\"text-xl font-bold\">HCleanz</h1>\n          </div>\n          <button onClick={handleLogout} className=\"text-red-500 hover:underline\">\n            Logout\n          </button>\n        </header>\n      )}\n      <main className={`flex-grow ${isAuthenticated && !isAuthPage ? 'pt-4' : ''}`}>\n        {children}\n      </main>\n      {isAuthenticated && !isAuthPage && <BottomNavigation />}\n    </div>\n  );\n};\n\nexport default MainLayout;\n",
  "src/components/popups/MembershipPopup.tsx": "import React, { useState, useEffect } from 'react';\nimport { Sparkles } from 'lucide-react';\n\ninterface MembershipPopupProps {\n  isOpen: boolean;\n  onClose: () => void;\n  frequency: 'weekly' | 'biweekly' | 'twice-weekly';\n}\n\nconst MembershipPopup: React.FC<MembershipPopupProps> = ({ isOpen, onClose, frequency }) => {\n  const [isVisible, setIsVisible] = useState(false);\n\n  useEffect(() => {\n    if (isOpen) {\n      setIsVisible(true);\n    } else {\n      const timeout = setTimeout(() => {\n        setIsVisible(false);\n      }, 300);\n      return () => clearTimeout(timeout);\n    }\n  }, [isOpen]);\n\n  if (!isVisible) return null;\n\n  const planTitle = frequency === 'weekly' \n    ? 'Weekly Plan' \n    : frequency === 'biweekly' \n      ? 'Biweekly Plan' \n      : 'Twice Weekly Plan';\n\n  return (\n    <div \n      className={`fixed inset-0 z-50 flex items-center justify-center p-4 backdrop-blur-sm bg-white/30 transition-opacity duration-300 ${isOpen ? 'opacity-100' : 'opacity-0'}`}\n      onClick={onClose}\n    >\n      <div \n        className=\"bg-white w-full max-w-xs rounded-3xl overflow-hidden transform transition-transform duration-300 shadow-xl\"\n        onClick={(e) => e.stopPropagation()}\n      >\n        {/* Header */}\n        <div className=\"bg-blue-500 py-3 px-4 text-white text-center font-medium text-lg\">\n          <div className=\"flex items-center justify-center\">\n            <Sparkles size={24} className=\"mr-2 text-white\" />\n            {planTitle}\n          </div>\n        </div>\n\n        {/* Blue Placeholder Area */}\n        <div className=\"bg-blue-50 py-8 flex justify-center\">\n          <div className=\"w-16 h-16 bg-blue-200 rounded-full\"></div>\n        </div>\n\n        {/* Content */}\n        <div className=\"p-4\">\n          <h3 className=\"text-center text-gray-800 text-sm font-medium mb-3\">\n            Upgrade to our Premium Membership for additional benefits with your recurring cleaning plan!\n          </h3>\n\n          <div className=\"space-y-2 mb-4 text-xs\">\n            <div className=\"flex items-start\">\n              <span className=\"text-green-500 mr-2 flex-shrink-0\">✓</span>\n              <span className=\"text-gray-700\">40% off your first clean</span>\n            </div>\n            <div className=\"flex items-start\">\n              <span className=\"text-green-500 mr-2 flex-shrink-0\">✓</span>\n              <span className=\"text-gray-700\">25% off all subsequent cleans</span>\n            </div>\n            <div className=\"flex items-start\">\n              <span className=\"text-green-500 mr-2 flex-shrink-0\">✓</span>\n              <span className=\"text-gray-700\">Priority booking for your preferred dates and times</span>\n            </div>\n            <div className=\"flex items-start\">\n              <span className=\"text-green-500 mr-2 flex-shrink-0\">✓</span>\n              <span className=\"text-gray-700\">Dedicated customer support for a seamless experience</span>\n            </div>\n            <div className=\"flex items-start\">\n              <span className=\"text-green-500 mr-2 flex-shrink-0\">✓</span>\n              <span className=\"text-gray-700\">Free rescheduling* up to 2 hours before clean</span>\n            </div>\n            <div className=\"flex items-start\">\n              <span className=\"text-green-500 mr-2 flex-shrink-0\">✓</span>\n              <span className=\"text-gray-700\">Additional discounts on event cleaning services</span>\n            </div>\n          </div>\n\n          {/* Price section */}\n          <div className=\"bg-blue-50 rounded-lg p-3 text-center mb-4\">\n            <h4 className=\"text-gray-700 text-sm font-medium\">Premium Membership</h4>\n            <div className=\"text-blue-500 text-xl font-bold\">$19.99/month</div>\n            <div className=\"text-gray-500 text-xs\">Cancel anytime</div>\n          </div>\n\n          {/* Action button */}\n          {frequency !== 'weekly' && (\n            <button \n              className=\"w-full bg-blue-500 text-white py-3 rounded-xl font-medium hover:bg-blue-600 transition-colors text-sm\"\n              onClick={onClose}\n            >\n              Add Premium Membership\n            </button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MembershipPopup;",
  "src/components/ui/AddressCard.tsx": "// src/components/ui/AddressCard.tsx\nimport React from 'react';\nimport { MapPin, Edit, Trash } from 'lucide-react';\nimport Card from './Card';\n\ninterface Address {\n  _id: string;\n  name: string;\n  streetAddress: string;\n  city: string;\n  state: string;\n  zipCode: string;\n  isDefault?: boolean;\n}\n\ninterface AddressCardProps {\n  address: Address;\n  selected?: boolean;\n  onPress?: () => void;\n  onEdit?: () => void;\n  onDelete?: () => void;\n}\n\nexport const AddressCard: React.FC<AddressCardProps> = ({\n  address,\n  selected = false,\n  onPress,\n  onEdit,\n  onDelete,\n}) => {\n  return (\n    <Card\n      className={`${selected ? 'border-2 border-primary' : ''} hover:shadow-md transition-shadow`}\n      onClick={onPress}\n    >\n      <div className=\"p-4\">\n        <div className=\"flex justify-between items-start mb-2\">\n          <div className=\"flex items-center\">\n            <MapPin size={20} className=\"text-primary mr-2\" />\n            <h3 className=\"font-semibold text-lg\">{address.name}</h3>\n          </div>\n          {address.isDefault && (\n            <span className=\"px-2 py-1 bg-primary bg-opacity-10 text-primary text-xs font-medium rounded-full\">\n              Default\n            </span>\n          )}\n        </div>\n        \n        <p className=\"text-sm text-textLight mb-1\">{address.streetAddress}</p>\n        <p className=\"text-sm text-textLight mb-3\">\n          {address.city}, {address.state} {address.zipCode}\n        </p>\n        \n        <div className=\"flex justify-end space-x-2\">\n          {onEdit && (\n            <button \n              onClick={(e) => {\n                e.stopPropagation();\n                onEdit();\n              }}\n              className=\"p-2 text-textLight hover:text-primary\"\n            >\n              <Edit size={18} />\n            </button>\n          )}\n          \n          {onDelete && (\n            <button \n              onClick={(e) => {\n                e.stopPropagation();\n                onDelete();\n              }}\n              className=\"p-2 text-textLight hover:text-error\"\n            >\n              <Trash size={18} />\n            </button>\n          )}\n        </div>\n      </div>\n    </Card>\n  );\n};\n\nexport default AddressCard;",
  "src/components/ui/BookingCard.tsx": "// src/components/ui/BookingCard.tsx\nimport React from 'react';\nimport { Calendar, Clock, MapPin } from 'lucide-react';\nimport Card from './Card';\n\ninterface Booking {\n  _id: string;\n  serviceType: {\n    name: string;\n  };\n  price: number;\n  squareFootage: number;\n  date: string;\n  timeSlot: string;\n  status: string;\n  address?: {\n    streetAddress: string;\n  };\n}\n\ninterface BookingCardProps {\n  booking: Booking;\n  onViewDetails: () => void;\n}\n\nexport const BookingCard: React.FC<BookingCardProps> = ({ booking, onViewDetails }) => {\n  // Format date\n  const formatDate = (dateString: string): string => {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', {\n      weekday: 'short',\n      month: 'short', \n      day: 'numeric'\n    });\n  };\n\n  // Get status color\n  const getStatusColor = (status: string): string => {\n    switch (status.toLowerCase()) {\n      case 'confirmed':\n        return 'bg-primary text-white';\n      case 'pending':\n        return 'bg-warning text-white';\n      case 'completed':\n        return 'bg-success text-white';\n      case 'cancelled':\n        return 'bg-error text-white';\n      default:\n        return 'bg-grayLight text-text';\n    }\n  };\n\n  return (\n    <Card className=\"cursor-pointer hover:shadow-md transition-shadow\" onClick={onViewDetails}>\n      <div className=\"p-4\">\n        <div className=\"flex justify-between items-start mb-3\">\n          <div>\n            <h3 className=\"font-semibold text-text\">{booking.serviceType?.name || 'Cleaning Service'}</h3>\n            <div className=\"text-sm text-textLight\">\n              ${booking.price} • {booking.squareFootage} sq ft\n            </div>\n          </div>\n          <div className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(booking.status)}`}>\n            {booking.status.charAt(0).toUpperCase() + booking.status.slice(1)}\n          </div>\n        </div>\n        \n        <div className=\"space-y-2\">\n          <div className=\"flex items-center\">\n            <Calendar size={16} className=\"text-primary mr-2 flex-shrink-0\" />\n            <span className=\"text-sm text-text\">{formatDate(booking.date)}</span>\n          </div>\n          \n          <div className=\"flex items-center\">\n            <Clock size={16} className=\"text-primary mr-2 flex-shrink-0\" />\n            <span className=\"text-sm text-text\">{booking.timeSlot}</span>\n          </div>\n          \n          <div className=\"flex items-center\">\n            <MapPin size={16} className=\"text-primary mr-2 flex-shrink-0\" />\n            <span className=\"text-sm text-text truncate\">\n              {booking.address?.streetAddress || 'Address not available'}\n            </span>\n          </div>\n        </div>\n      </div>\n    </Card>\n  );\n};\n\nexport default BookingCard;",
  "src/components/ui/Button.tsx": "// src/components/ui/Button.tsx\nimport React from 'react';\n\ntype ButtonVariant = 'primary' | 'secondary' | 'outline' | 'ghost' | 'danger';\ntype ButtonSize = 'small' | 'medium' | 'large';\n\ninterface ButtonProps {\n  title: string;\n  onClick?: () => void; // Make onClick optional\n  variant?: ButtonVariant;\n  size?: ButtonSize;\n  disabled?: boolean;\n  loading?: boolean;\n  icon?: React.ReactNode;\n  iconPosition?: 'left' | 'right';\n  fullWidth?: boolean;\n  className?: string;\n  type?: 'button' | 'submit' | 'reset';\n}\n\nexport const Button: React.FC<ButtonProps> = ({\n  title,\n  onClick,\n  variant = 'primary',\n  size = 'medium',\n  disabled = false,\n  loading = false,\n  icon,\n  iconPosition = 'left',\n  fullWidth = false,\n  className = '',\n  type = 'button',\n}) => {\n  // Variant styles\n  const variantStyles = {\n    primary: 'bg-primary text-white hover:bg-primaryDark',\n    secondary: 'bg-secondary text-white hover:bg-secondaryDark',\n    outline: 'bg-transparent border border-primary text-primary hover:bg-primaryLight hover:bg-opacity-10',\n    ghost: 'bg-transparent text-primary hover:bg-primaryLight hover:bg-opacity-10',\n    danger: 'bg-error text-white hover:bg-red-600',\n  };\n\n  // Size styles\n  const sizeStyles = {\n    small: 'py-2 px-3 text-sm',\n    medium: 'py-3 px-4 text-base',\n    large: 'py-4 px-5 text-lg',\n  };\n\n  // Disabled styles\n  const disabledStyles = 'opacity-50 cursor-not-allowed';\n\n  // Width style\n  const widthStyle = fullWidth ? 'w-full' : '';\n\n  // Base styles\n  const baseStyles = 'rounded-lg font-semibold inline-flex items-center justify-center transition-colors duration-200';\n\n  // Combine styles\n  const buttonStyles = `\n    ${baseStyles}\n    ${variantStyles[variant]}\n    ${sizeStyles[size]}\n    ${disabled ? disabledStyles : ''}\n    ${widthStyle}\n    ${className}\n  `;\n\n  const renderContent = () => {\n    if (loading) {\n      return (\n        <svg className=\"animate-spin -ml-1 mr-3 h-5 w-5 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n          <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n          <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n        </svg>\n      );\n    }\n\n    if (!icon) {\n      return title;\n    }\n\n    return (\n      <>\n        {iconPosition === 'left' && <span className=\"mr-2\">{icon}</span>}\n        {title}\n        {iconPosition === 'right' && <span className=\"ml-2\">{icon}</span>}\n      </>\n    );\n  };\n\n  // Handle click event or pass undefined if no handler provided\n  const handleClick = onClick || undefined;\n\n  return (\n    <button\n      className={buttonStyles}\n      onClick={handleClick}\n      disabled={disabled || loading}\n      type={type}\n    >\n      {renderContent()}\n    </button>\n  );\n};\n\nexport default Button;",
  "src/components/ui/Card.tsx": "// src/components/ui/Card.tsx\nimport React from 'react';\n\ninterface CardProps {\n  children: React.ReactNode;\n  className?: string;\n  elevation?: number;\n  onClick?: () => void;\n}\n\nexport const Card: React.FC<CardProps> = ({ \n  children, \n  className = '', \n  elevation = 1,\n  onClick\n}) => {\n  // Map elevation to Tailwind shadow classes\n  const shadowMap = {\n    1: 'shadow-sm',\n    2: 'shadow',\n    3: 'shadow-md',\n    4: 'shadow-lg',\n    5: 'shadow-xl'\n  };\n  \n  const shadowClass = shadowMap[elevation as keyof typeof shadowMap] || 'shadow';\n  \n  return (\n    <div \n      className={`bg-white rounded-xl p-4 my-2 ${shadowClass} ${className}`}\n      onClick={onClick}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport default Card;",
  "src/components/ui/CleaningSuppliesModal.tsx": "// src/components/ui/CleaningSuppliesModal.tsx\nimport React, { useState, useEffect } from 'react';\nimport { X, CheckCircle } from 'lucide-react';\n\n// List of cleaning supplies\nconst CLEANING_SUPPLIES = [\n  'Bona',\n  'Mop & Bucket',\n  'Duster',\n  'Microfiber cloths/Rags',\n  'Broom & Dustpan',\n  'Garbage Bags',\n  'Clorox Bleach',\n  'Easy-off',\n  'Baking soda',\n  'Glass Cleaner',\n  'Murphy',\n  'Toilet Brush',\n  'Paper Towels',\n  'Sponges',\n  'Abrasive Scrubber',\n  'All-purpose cleaner',\n  'White Vinegar',\n  'Pine-SOL',\n  'Soft Scrub'\n];\n\ninterface CleaningSuppliesModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSave: (suppliesOption: string, selectedSupplies: string[]) => void;\n}\n\nconst CleaningSuppliesModal: React.FC<CleaningSuppliesModalProps> = ({ \n  isOpen, \n  onClose,\n  onSave \n}) => {\n  const [suppliesOption, setSuppliesOption] = useState<string>('bring-everything');\n  const [selectedSupplies, setSelectedSupplies] = useState<string[]>([...CLEANING_SUPPLIES]);\n\n  const toggleSupply = (supply: string) => {\n    if (selectedSupplies.includes(supply)) {\n      setSelectedSupplies(selectedSupplies.filter(item => item !== supply));\n    } else {\n      setSelectedSupplies([...selectedSupplies, supply]);\n    }\n  };\n\n  const selectAll = () => {\n    setSelectedSupplies([...CLEANING_SUPPLIES]);\n  };\n\n  const deselectAll = () => {\n    setSelectedSupplies([]);\n  };\n\n  const handleConfirm = () => {\n    onSave(suppliesOption, selectedSupplies);\n    onClose();\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center p-4 backdrop-blur-sm bg-white/30\">\n      <div className=\"bg-white w-full max-w-xs rounded-lg shadow-lg overflow-hidden\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-3 border-b\">\n          <h2 className=\"text-lg font-semibold text-gray-800\">Cleaning Supplies</h2>\n          <button \n            className=\"text-gray-500 hover:text-gray-700\"\n            onClick={onClose}\n          >\n            <X size={20} />\n          </button>\n        </div>\n\n        <div className=\"p-3\">\n          {/* Options */}\n          <div className=\"space-y-2 mb-3\">\n            {/* Option 1 */}\n            <div \n              className={`flex items-center justify-between p-3 border rounded-lg cursor-pointer ${\n                suppliesOption === 'bring-everything' ? 'border-blue-500 bg-blue-50' : 'border-gray-200'\n              }`}\n              onClick={() => setSuppliesOption('bring-everything')}\n            >\n              <div className=\"flex items-center\">\n                <div className=\"w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center mr-3\">\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 text-blue-500\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                    <path fillRule=\"evenodd\" d=\"M5 3a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2V5a2 2 0 00-2-2H5zm0 2h10v10H5V5z\" clipRule=\"evenodd\" />\n                  </svg>\n                </div>\n                <div>\n                  <h3 className=\"font-medium text-sm text-gray-800\">Bring Everything</h3>\n                  <p className=\"text-gray-600 text-xs\">We'll bring all cleaning supplies</p>\n                  <p className=\"text-gray-700 text-xs\">Standard price</p>\n                </div>\n              </div>\n              <div className={`w-5 h-5 rounded-full border flex items-center justify-center ${\n                suppliesOption === 'bring-everything' ? 'bg-blue-500 border-blue-500' : 'border-gray-300'\n              }`}>\n                {suppliesOption === 'bring-everything' && <div className=\"w-3 h-3 bg-white rounded-full\"></div>}\n              </div>\n            </div>\n\n            {/* Option 2 */}\n            <div \n              className={`flex items-center justify-between p-3 border rounded-lg cursor-pointer ${\n                suppliesOption === 'i-have-vacuum' ? 'border-blue-500 bg-blue-50' : 'border-gray-200'\n              }`}\n              onClick={() => setSuppliesOption('i-have-vacuum')}\n            >\n              <div className=\"flex items-center\">\n                <div className=\"w-10 h-10 bg-green-100 rounded-full flex items-center justify-center mr-3\">\n                  <span className=\"text-green-500 text-lg\">$</span>\n                </div>\n                <div>\n                  <h3 className=\"font-medium text-sm text-gray-800\">I Have a Vacuum</h3>\n                  <p className=\"text-gray-600 text-xs\">We'll bring supplies, you provide vacuum</p>\n                  <p className=\"text-green-500 font-medium text-xs\">Save $20</p>\n                </div>\n              </div>\n              <div className={`w-5 h-5 rounded-full border flex items-center justify-center ${\n                suppliesOption === 'i-have-vacuum' ? 'bg-blue-500 border-blue-500' : 'border-gray-300'\n              }`}>\n                {suppliesOption === 'i-have-vacuum' && <div className=\"w-3 h-3 bg-white rounded-full\"></div>}\n              </div>\n            </div>\n\n            {/* Option 3 */}\n            <div \n              className={`flex items-center justify-between p-3 border rounded-lg cursor-pointer ${\n                suppliesOption === 'i-have-all' ? 'border-blue-500 bg-blue-50' : 'border-gray-200'\n              }`}\n              onClick={() => setSuppliesOption('i-have-all')}\n            >\n              <div className=\"flex items-center\">\n                <div className=\"w-10 h-10 bg-green-100 rounded-full flex items-center justify-center mr-3\">\n                  <span className=\"text-green-500 text-lg\">$</span>\n                </div>\n                <div>\n                  <h3 className=\"font-medium text-sm text-gray-800\">I Have Vacuum & Supplies</h3>\n                  <p className=\"text-gray-600 text-xs\">You provide all supplies & equipment</p>\n                  <p className=\"text-green-500 font-medium text-xs\">Save $50</p>\n                </div>\n              </div>\n              <div className={`w-5 h-5 rounded-full border flex items-center justify-center ${\n                suppliesOption === 'i-have-all' ? 'bg-blue-500 border-blue-500' : 'border-gray-300'\n              }`}>\n                {suppliesOption === 'i-have-all' && <div className=\"w-3 h-3 bg-white rounded-full\"></div>}\n              </div>\n            </div>\n          </div>\n\n          {/* Always show supplies section when option is \"i-have-all\" */}\n          {suppliesOption === 'i-have-all' && (\n            <>\n              <div className=\"flex items-center justify-between mb-3 mt-4\">\n                <h3 className=\"text-gray-800 text-sm font-medium\">Select your supplies:</h3>\n                <div className=\"text-blue-500 text-xs font-medium\">{selectedSupplies.length}/{CLEANING_SUPPLIES.length} selected</div>\n              </div>\n              \n              <div className=\"flex justify-between mb-2\">\n                <button \n                  className=\"bg-blue-50 text-blue-500 px-3 py-1 rounded-md text-xs\"\n                  onClick={selectAll}\n                >\n                  Select All\n                </button>\n                <button \n                  className=\"bg-gray-100 text-gray-600 px-3 py-1 rounded-md text-xs\"\n                  onClick={deselectAll}\n                >\n                  Deselect All\n                </button>\n              </div>\n\n              {/* Supply Checkboxes */}\n              <div className=\"border rounded-lg p-2 mb-3 max-h-56 overflow-y-auto\">\n                <div className=\"grid grid-cols-2 gap-y-2 gap-x-1\">\n                  {CLEANING_SUPPLIES.map((supply, index) => (\n                    <div \n                      key={index} \n                      className={`flex items-center p-1 rounded cursor-pointer ${\n                        selectedSupplies.includes(supply) ? 'bg-blue-50' : 'hover:bg-gray-50'\n                      }`}\n                      onClick={() => toggleSupply(supply)}\n                    >\n                      <div className={`w-4 h-4 border rounded flex items-center justify-center mr-1 ${\n                        selectedSupplies.includes(supply) ? 'bg-blue-500 border-blue-500' : 'border-gray-300'\n                      }`}>\n                        {selectedSupplies.includes(supply) && (\n                          <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-3 w-3 text-white\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                            <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n                          </svg>\n                        )}\n                      </div>\n                      <span className=\"text-xs text-gray-700\">{supply}</span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </>\n          )}\n\n          {/* Confirm Button */}\n          <button \n            className=\"w-full bg-blue-500 text-white py-2 rounded-[36px] text-sm cursor-pointer\"\n            onClick={handleConfirm}\n          >\n            {suppliesOption === 'i-have-all' ? 'Confirm & Continue' : 'Continue'}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CleaningSuppliesModal;",
  "src/components/ui/CleaningTypeBubble.tsx": "// src/components/ui/CleaningTypeBubble.tsx\nimport React from 'react';\nimport { Home, Sparkles, CheckSquare, PartyPopper, Briefcase } from 'lucide-react';\n\ninterface CleaningTypeBubbleProps {\n  type: string;\n  label: string;\n  selected?: boolean;\n  onSelect: () => void;\n}\n\nexport const CleaningTypeBubble: React.FC<CleaningTypeBubbleProps> = ({\n  type,\n  label,\n  selected = false,\n  onSelect,\n}) => {\n  // Function to determine which icon to show\n  const getIcon = () => {\n    switch (type) {\n      case 'standard':\n        return <Home size={24} className={selected ? 'text-white' : 'text-primary'} />;\n      case 'deep':\n        return <Sparkles size={24} className={selected ? 'text-white' : 'text-primary'} />;\n      case 'move':\n        return <Briefcase size={24} className={selected ? 'text-white' : 'text-primary'} />;\n      case 'party':\n        return <PartyPopper size={24} className={selected ? 'text-white' : 'text-primary'} />;\n      case 'checklist':\n        return <CheckSquare size={24} className={selected ? 'text-white' : 'text-primary'} />;\n      default:\n        return <Home size={24} className={selected ? 'text-white' : 'text-primary'} />;\n    }\n  };\n\n  return (\n    <div \n      className=\"cursor-pointer flex flex-col items-center\" \n      onClick={onSelect}\n    >\n      <div \n        className={`w-16 h-16 rounded-full flex items-center justify-center mb-2 transition-colors ${\n          selected ? 'bg-primary' : 'bg-blue-100'\n        }`}\n      >\n        {getIcon()}\n      </div>\n      <span className={`text-sm font-medium text-center ${selected ? 'text-primary' : 'text-text'}`}>\n        {label}\n      </span>\n    </div>\n  );\n};\n\nexport default CleaningTypeBubble;",
  "src/components/ui/CleaningTypeCard.tsx": "// src/components/ui/CleaningTypeCard.tsx\nimport React from 'react';\nimport { Home, Sparkles, CheckSquare, PartyPopper, Briefcase } from 'lucide-react';\nimport Card from './Card';\n\ninterface CleaningTypeCardProps {\n  type: string;\n  title: string;\n  description: string;\n  price: number;\n  selected?: boolean;\n  onSelect: () => void;\n}\n\nexport const CleaningTypeCard: React.FC<CleaningTypeCardProps> = ({\n  type,\n  title,\n  description,\n  price,\n  selected = false,\n  onSelect,\n}) => {\n  // Function to determine which icon to show\n  const getIcon = () => {\n    switch (type) {\n      case 'standard':\n        return <Home size={24} className=\"text-primary\" />;\n      case 'deep':\n        return <Sparkles size={24} className=\"text-primary\" />;\n      case 'move':\n        return <Briefcase size={24} className=\"text-primary\" />;\n      case 'party':\n        return <PartyPopper size={24} className=\"text-primary\" />;\n      case 'checklist':\n        return <CheckSquare size={24} className=\"text-primary\" />;\n      default:\n        return <Home size={24} className=\"text-primary\" />;\n    }\n  };\n\n  return (\n    <Card \n      className={`cursor-pointer ${selected ? 'border-2 border-primary' : ''}`}\n      onClick={onSelect}\n    >\n      <div className=\"p-4\">\n        <div className=\"flex items-start justify-between mb-3\">\n          <div className=\"flex items-center\">\n            <div className=\"w-10 h-10 rounded-full bg-blue-100 flex items-center justify-center mr-3\">\n              {getIcon()}\n            </div>\n            <h3 className=\"font-semibold text-lg text-text\">{title}</h3>\n          </div>\n          <div className={`w-6 h-6 rounded-full border flex items-center justify-center ${\n            selected \n              ? 'bg-primary border-primary' \n              : 'border-gray-300'\n          }`}>\n            {selected && (\n              <CheckSquare size={14} className=\"text-white\" />\n            )}\n          </div>\n        </div>\n        <p className=\"text-sm text-textLight mb-3\">{description}</p>\n        <div className=\"text-primary font-medium\">\n          From ${price}\n        </div>\n      </div>\n    </Card>\n  );\n};\n\nexport default CleaningTypeCard;",
  "src/components/ui/EmptyState.tsx": "// src/components/ui/EmptyState.tsx\nimport React from 'react';\nimport Button from './Button';\n\ninterface EmptyStateProps {\n  icon?: React.ReactNode;\n  title: string;\n  message: string;\n  actionLabel?: string;\n  onAction?: () => void;\n}\n\nexport const EmptyState: React.FC<EmptyStateProps> = ({\n  icon,\n  title,\n  message,\n  actionLabel,\n  onAction,\n}) => {\n  return (\n    <div className=\"flex flex-col items-center justify-center p-6 text-center min-h-[300px]\">\n      {icon && <div className=\"mb-4\">{icon}</div>}\n      <h2 className=\"text-xl font-bold text-text mb-2\">{title}</h2>\n      <p className=\"text-base text-textLight mb-6\">{message}</p>\n      {actionLabel && onAction && (\n        <Button\n          title={actionLabel}\n          onClick={onAction}\n          variant=\"primary\"\n          className=\"min-w-[200px]\"\n        />\n      )}\n    </div>\n  );\n};\n\nexport default EmptyState;",
  "src/components/ui/FancyLoader.tsx": "// src/components/ui/FancyLoader.tsx\n\nimport React from 'react';\n\ninterface FancyLoaderProps {\n  visible: boolean;\n  message?: string;\n}\n\nconst FancyLoader: React.FC<FancyLoaderProps> = ({ visible, message = 'Loading...' }) => {\n  if (!visible) return null;\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex flex-col items-center justify-center bg-white bg-opacity-90\">\n      <div className=\"relative w-24 h-24\">\n        {/* Outer spinning circle */}\n        <div className=\"absolute inset-0 rounded-full border-4 border-transparent border-t-blue-500 border-r-blue-300 animate-spin\"></div>\n        \n        {/* Middle spinning circle - opposite direction */}\n        <div className=\"absolute inset-2 rounded-full border-4 border-transparent border-b-blue-400 border-l-blue-200 animate-spin-slow\"></div>\n        \n        {/* Inner pulsing circle */}\n        <div className=\"absolute inset-5 rounded-full bg-blue-500 animate-pulse\"></div>\n        \n        {/* Center dot */}\n        <div className=\"absolute inset-9 rounded-full bg-white\"></div>\n      </div>\n      \n      {/* Loading message */}\n      <div className=\"mt-6 text-blue-600 font-medium\">{message}</div>\n      \n      {/* Bouncing dots */}\n      <div className=\"flex space-x-2 mt-2\">\n        <div className=\"w-2 h-2 bg-blue-500 rounded-full animate-bounce-delay-1\"></div>\n        <div className=\"w-2 h-2 bg-blue-500 rounded-full animate-bounce-delay-2\"></div>\n        <div className=\"w-2 h-2 bg-blue-500 rounded-full animate-bounce-delay-3\"></div>\n      </div>\n    </div>\n  );\n};\n\nexport default FancyLoader;",
  "src/components/ui/Input.tsx": "// src/components/ui/Input.tsx\nimport React, { useState } from 'react';\nimport { Eye, EyeOff } from 'lucide-react';\n\ninterface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {\n  label?: string;\n  error?: string;\n  leftIcon?: React.ReactNode;\n  rightIcon?: React.ReactNode;\n  onRightIconClick?: () => void;\n  className?: string;\n  containerClassName?: string;\n  multiline?: boolean;\n  rows?: number;\n  textAlignVertical?: 'auto' | 'top' | 'bottom' | 'center';\n}\n\nexport const Input: React.FC<InputProps> = ({\n  label,\n  error,\n  leftIcon,\n  rightIcon,\n  onRightIconClick,\n  className = '',\n  containerClassName = '',\n  type,\n  multiline = false,\n  rows = 4,\n  textAlignVertical,\n  ...rest\n}) => {\n  const [isPasswordVisible, setIsPasswordVisible] = useState(false);\n\n  const togglePasswordVisibility = () => {\n    setIsPasswordVisible(!isPasswordVisible);\n  };\n\n  const containerClasses = `mb-4 w-full ${containerClassName}`;\n  const inputContainerClasses = `flex items-center relative border rounded-lg ${error ? 'border-error' : 'border-border'} bg-white`;\n  \n  // Base classes for input\n  const inputBaseClasses = `\n    flex-1 h-12 text-base text-text outline-none bg-transparent\n    ${leftIcon ? 'pl-10' : 'pl-3'}\n    ${(rightIcon || type === 'password') ? 'pr-10' : 'pr-3'}\n    ${className}\n  `;\n  \n  // Additional classes for textarea\n  const textareaClasses = `\n    resize-none min-h-[100px] py-3 \n    ${textAlignVertical === 'top' ? 'pt-3' : 'pt-3'}\n  `;\n\n  // Password visibility icon\n  const passwordIcon = type === 'password' ? (\n    <button \n      type=\"button\"\n      className=\"absolute right-3 top-1/2 transform -translate-y-1/2\"\n      onClick={togglePasswordVisibility}\n    >\n      {isPasswordVisible ? (\n        <EyeOff size={20} className=\"text-textLight\" />\n      ) : (\n        <Eye size={20} className=\"text-textLight\" />\n      )}\n    </button>\n  ) : null;\n\n  // Custom right icon\n  const rightIconElement = rightIcon ? (\n    <button \n      type=\"button\"\n      className=\"absolute right-3 top-1/2 transform -translate-y-1/2\"\n      onClick={onRightIconClick}\n      disabled={!onRightIconClick}\n    >\n      {rightIcon}\n    </button>\n  ) : null;\n  \n  const inputType = type === 'password' && isPasswordVisible ? 'text' : type;\n\n  return (\n    <div className={containerClasses}>\n      {label && (\n        <label className=\"block text-sm font-medium text-text mb-1.5\">\n          {label}\n        </label>\n      )}\n      \n      <div className={inputContainerClasses}>\n        {leftIcon && (\n          <div className=\"absolute left-3 top-1/2 transform -translate-y-1/2\">\n            {leftIcon}\n          </div>\n        )}\n        \n        {multiline ? (\n          <textarea\n            className={`${inputBaseClasses} ${textareaClasses}`}\n            rows={rows}\n            {...(rest as React.TextareaHTMLAttributes<HTMLTextAreaElement>)}\n          />\n        ) : (\n          <input\n            type={inputType}\n            className={inputBaseClasses}\n            {...rest}\n          />\n        )}\n        \n        {passwordIcon || rightIconElement}\n      </div>\n      \n      {error && (\n        <p className=\"mt-1 text-xs text-error\">{error}</p>\n      )}\n    </div>\n  );\n};\n\nexport default Input;",
  "src/components/ui/LoadingOverlay.tsx": "// src/components/ui/LoadingOverlay.tsx\nimport React from 'react';\n\ninterface LoadingOverlayProps {\n  visible: boolean;\n  message?: string;\n}\n\nexport const LoadingOverlay: React.FC<LoadingOverlayProps> = ({\n  visible,\n  message = 'Loading...',\n}) => {\n  if (!visible) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-40 flex items-center justify-center z-50\">\n      <div className=\"bg-white rounded-xl p-6 flex flex-col items-center shadow-lg min-w-[200px]\">\n        <div className=\"w-10 h-10 border-4 border-primary border-t-transparent rounded-full animate-spin\"></div>\n        <p className=\"mt-4 text-base text-text text-center\">{message}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default LoadingOverlay;",
  "src/components/ui/PaymentMethod.tsx": "// src/components/ui/PaymentMethodCard.tsx\nimport React from 'react';\nimport { CreditCard, CheckCircle2, Trash } from 'lucide-react';\nimport Card from './Card';\n\ninterface PaymentMethod {\n  _id: string;\n  brand: string;\n  last4: string;\n  isDefault: boolean;\n}\n\ninterface PaymentMethodCardProps {\n  paymentMethod: PaymentMethod;\n  onSetDefault?: () => void;\n  onDelete?: () => void;\n}\n\nexport const PaymentMethodCard: React.FC<PaymentMethodCardProps> = ({\n  paymentMethod,\n  onSetDefault,\n  onDelete\n}) => {\n  const getBrandLogo = (brand: string) => {\n    // In a real app, you'd use proper card brand logos\n    switch (brand.toLowerCase()) {\n      case 'visa':\n        return <CreditCard size={24} className=\"text-blue-700\" />;\n      case 'mastercard':\n        return <CreditCard size={24} className=\"text-red-500\" />;\n      case 'amex':\n        return <CreditCard size={24} className=\"text-blue-500\" />;\n      default:\n        return <CreditCard size={24} className=\"text-gray-500\" />;\n    }\n  };\n\n  return (\n    <Card>\n      <div className=\"p-4\">\n        <div className=\"flex justify-between items-center mb-3\">\n          <div className=\"flex items-center\">\n            {getBrandLogo(paymentMethod.brand)}\n            <div className=\"ml-3\">\n              <div className=\"font-medium text-text\">\n                {paymentMethod.brand} •••• {paymentMethod.last4}\n              </div>\n            </div>\n          </div>\n          \n          {paymentMethod.isDefault && (\n            <span className=\"px-2 py-1 bg-primary bg-opacity-10 text-primary text-xs font-medium rounded-full\">\n              Default\n            </span>\n          )}\n        </div>\n        \n        <div className=\"flex justify-end space-x-2\">\n          {!paymentMethod.isDefault && onSetDefault && (\n            <button \n              onClick={onSetDefault}\n              className=\"flex items-center text-sm text-primary hover:underline\"\n            >\n              <CheckCircle2 size={16} className=\"mr-1\" /> \n              Set as Default\n            </button>\n          )}\n          \n          {onDelete && (\n            <button \n              onClick={onDelete}\n              className=\"flex items-center text-sm text-error hover:underline\"\n            >\n              <Trash size={16} className=\"mr-1\" /> \n              Remove\n            </button>\n          )}\n        </div>\n      </div>\n    </Card>\n  );\n};\n\nexport default PaymentMethodCard;",
  "src/components/ui/ServiceCard.tsx": "// src/components/ui/ServiceCard.tsx\nimport React from 'react';\nimport { Home, Sparkles, CheckSquare, Package } from 'lucide-react';\nimport Card from './Card';\n\ninterface ServiceCardProps {\n  service: {\n    _id: string;\n    name: string;\n    description: string;\n    basePrice: number;\n    icon?: string;\n  };\n  onClick: () => void;\n}\n\nexport const ServiceCard: React.FC<ServiceCardProps> = ({ service, onClick }) => {\n  const getIcon = () => {\n    switch (service.icon) {\n      case 'sparkles':\n        return <Sparkles size={24} className=\"text-primary\" />;\n      case 'package':\n        return <Package size={24} className=\"text-primary\" />;\n      case 'check-square':\n        return <CheckSquare size={24} className=\"text-primary\" />;\n      default:\n        return <Home size={24} className=\"text-primary\" />;\n    }\n  };\n\n  return (\n    <Card className=\"cursor-pointer hover:shadow-md transition-shadow\" onClick={onClick}>\n      <div className=\"p-4\">\n        <div className=\"mb-3 w-12 h-12 rounded-full bg-primaryLight bg-opacity-20 flex items-center justify-center\">\n          {getIcon()}\n        </div>\n        <h3 className=\"font-semibold text-lg text-text mb-1\">{service.name}</h3>\n        <p className=\"text-sm text-textLight mb-2 line-clamp-2\">{service.description}</p>\n        <div className=\"flex items-center text-primary font-medium\">\n          <span>From ${service.basePrice}</span>\n        </div>\n      </div>\n    </Card>\n  );\n};\n\nexport default ServiceCard;",
  "src/components/ui/ServiceCardCarousel.tsx": "\"use client\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport { ChevronLeft, ChevronRight, Plus, Sparkles, Box, PartyPopper, Home } from 'lucide-react';\nimport Link from 'next/link';\nimport Cookies from 'js-cookie';\n\ninterface Service {\n  id: string;\n  name: string;\n  description: string;\n  icon: React.ReactNode;\n  color: string;\n  textColor: string;\n  basePrice: number;\n}\n\nconst HomePage: React.FC = () => {\n  // Define the type for activeService or use `Service | null`\n  const [activeService, setActiveService] = useState<Service | null>(null);\n  const [autoScrollEnabled, setAutoScrollEnabled] = useState(true);\n\n  // Type the ref so it’s a div or null\n  const carouselRef = useRef<HTMLDivElement | null>(null);\n\n  // Use ReturnType<typeof setTimeout> so TS knows it’s a browser timer\n  const autoScrollTimerRef = useRef<ReturnType<typeof setTimeout> | null>(null);\n\n  const services: Service[] = [\n    {\n      id: 'deep-clean',\n      name: 'Deep Clean',\n      description: 'A comprehensive cleaning for spaces that need extra attention.',\n      icon: <Sparkles size={32} />,\n      color: 'bg-blue-500',\n      textColor: 'text-white',\n      basePrice: 200\n    },\n    {\n      id: 'move-in-out',\n      name: 'Move In/Out',\n      description: 'Prepare your space for moving in or out with a complete cleaning.',\n      icon: <Box size={32} />,\n      color: 'bg-purple-500',\n      textColor: 'text-white',\n      basePrice: 250\n    },\n    {\n      id: 'party-clean',\n      name: 'Party Clean',\n      description: 'Quick cleanup after events and gatherings.',\n      icon: <PartyPopper size={32} />,\n      color: 'bg-pink-500',\n      textColor: 'text-white',\n      basePrice: 150\n    },\n    {\n      id: 'standard-clean',\n      name: 'Standard Clean',\n      description: 'A thorough cleaning of your space, focusing on regular maintenance.',\n      icon: <Home size={32} />,\n      color: 'bg-green-500',\n      textColor: 'text-white',\n      basePrice: 120\n    }\n  ];\n\n  // Function to handle service selection\n  const handleServiceSelect = (service: Service) => {\n    setActiveService(service);\n    setAutoScrollEnabled(false);\n    \n    // Store the selected service in cookies\n    Cookies.set('bookingService', JSON.stringify({\n      serviceId: service.id,\n      serviceName: service.name,\n      serviceDescription: service.description,\n      basePrice: service.basePrice\n    }));\n  };\n\n  // Auto-scrolling functionality\n  useEffect(() => {\n    if (!autoScrollEnabled || !carouselRef.current) return;\n\n    const scrollRight = () => {\n      // Always check .current\n      if (!carouselRef.current) return;\n\n      const { scrollLeft, scrollWidth, clientWidth } = carouselRef.current;\n      const newScrollLeft = scrollLeft + 300;\n\n      // If we're at the end, scroll back to the beginning\n      if (scrollLeft + clientWidth >= scrollWidth - 10) {\n        carouselRef.current.scrollTo({ left: 0, behavior: 'smooth' });\n      } else {\n        // Otherwise, continue scrolling right\n        carouselRef.current.scrollTo({ left: newScrollLeft, behavior: 'smooth' });\n      }\n    };\n\n    // Set up the auto-scroll timer\n    autoScrollTimerRef.current = setInterval(scrollRight, 3000);\n\n    return () => {\n      // Clear the interval on unmount\n      if (autoScrollTimerRef.current) {\n        clearInterval(autoScrollTimerRef.current);\n      }\n    };\n  }, [autoScrollEnabled]);\n\n  // Handle manual scrolling - pause auto-scroll when user interacts\n  const handleManualScroll = () => {\n    setAutoScrollEnabled(false);\n\n    // Clear the old timer if it exists\n    if (autoScrollTimerRef.current) {\n      clearTimeout(autoScrollTimerRef.current);\n    }\n\n    // Resume auto-scroll after 8 seconds of inactivity\n    autoScrollTimerRef.current = setTimeout(() => {\n      setAutoScrollEnabled(true);\n    }, 8000);\n  };\n\n  // Scroll control functions\n  const scrollLeft = () => {\n    if (!carouselRef.current) return;\n    const newScrollLeft = carouselRef.current.scrollLeft - 300;\n    carouselRef.current.scrollTo({ left: newScrollLeft, behavior: 'smooth' });\n    handleManualScroll();\n  };\n\n  const scrollRight = () => {\n    if (!carouselRef.current) return;\n    const newScrollLeft = carouselRef.current.scrollLeft + 300;\n    carouselRef.current.scrollTo({ left: newScrollLeft, behavior: 'smooth' });\n    handleManualScroll();\n  };\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      <div className=\"max-w-md mx-auto pt-6 px-4\">\n        <header className=\"py-4\">\n          <h1 className=\"text-2xl font-bold text-gray-800\">Home</h1>\n        </header>\n\n        <div className=\"py-6\">\n          <h2 className=\"text-3xl font-bold text-gray-800\">Hello, Test!</h2>\n          <p className=\"text-gray-600 mt-1\">Ready to book a cleaning service?</p>\n\n          <Link href={activeService ? '/booking/address' : '/booking/services'} passHref>\n            <button\n              className=\"w-full bg-blue-400 hover:bg-blue-500 text-white py-4 rounded-lg mt-6 flex items-center justify-center font-medium transition-colors\"\n              onClick={() => {\n                // If no service is selected, remove cookie & go to /booking/services\n                if (!activeService) {\n                  Cookies.remove('bookingService');\n                }\n              }}\n            >\n              <Plus className=\"mr-2\" size={20} /> Book a Cleaning Service\n            </button>\n          </Link>\n        </div>\n\n        <div className=\"mt-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h2 className=\"text-2xl font-bold text-gray-800\">Cleaning Services</h2>\n            <div className=\"flex space-x-2\">\n              <button\n                onClick={scrollLeft}\n                className=\"bg-gray-100 hover:bg-gray-200 p-2 rounded-full transition-colors\"\n              >\n                <ChevronLeft size={20} />\n              </button>\n              <button\n                onClick={scrollRight}\n                className=\"bg-gray-100 hover:bg-gray-200 p-2 rounded-full transition-colors\"\n              >\n                <ChevronRight size={20} />\n              </button>\n            </div>\n          </div>\n\n          <div className=\"relative\">\n            <div\n              ref={carouselRef}\n              className=\"flex overflow-x-auto scrollbar-hide snap-x snap-mandatory py-2 px-1 -mx-1 space-x-4\"\n              style={{ scrollbarWidth: 'none', msOverflowStyle: 'none' }}\n              onScroll={handleManualScroll}\n            >\n              {services.map((service) => (\n                <div\n                  key={service.id}\n                  className={`snap-center flex-shrink-0 w-72 h-48 rounded-xl shadow-lg overflow-hidden cursor-pointer transition-transform transform hover:scale-105 ${\n                    activeService?.id === service.id ? 'ring-4 ring-blue-400' : ''\n                  }`}\n                  onClick={() => handleServiceSelect(service)}\n                >\n                  <div className={`h-full w-full p-6 flex flex-col justify-between ${service.color} ${service.textColor}`}>\n                    <div className=\"bg-white/20 rounded-full p-3 w-fit\">\n                      {service.icon}\n                    </div>\n                    <div>\n                      <h3 className=\"text-xl font-bold mb-1\">{service.name}</h3>\n                      <p className=\"text-sm opacity-90\">{service.description}</p>\n                      <div className=\"mt-2 font-bold\">${service.basePrice}</div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"mt-10\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h2 className=\"text-2xl font-bold text-gray-800\">Upcoming Bookings</h2>\n            <span className=\"text-blue-500\">View All</span>\n          </div>\n          \n          <div className=\"bg-gray-50 rounded-lg p-8 text-center text-gray-500\">\n            No upcoming bookings\n          </div>\n        </div>\n      </div>\n\n      {/* Navigation */}\n      <div className=\"fixed bottom-0 left-0 right-0 h-16 bg-white border-t border-gray-200 flex items-center justify-around px-4\">\n        <div className=\"flex flex-col items-center text-blue-500\">\n          <Home size={20} />\n          <span className=\"text-xs mt-1\">Home</span>\n        </div>\n        <div className=\"flex flex-col items-center text-gray-400\">\n          {/* Bookings Icon */}\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"20\"\n            height=\"20\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\" stroke=\"currentColor\"\n            strokeWidth=\"2\" strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n          >\n            <rect x=\"3\" y=\"4\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect>\n            <line x1=\"16\" y1=\"2\" x2=\"16\" y2=\"6\"></line>\n            <line x1=\"8\" y1=\"2\" x2=\"8\" y2=\"6\"></line>\n            <line x1=\"3\" y1=\"10\" x2=\"21\" y2=\"10\"></line>\n          </svg>\n          <span className=\"text-xs mt-1\">Bookings</span>\n        </div>\n        <div className=\"flex flex-col items-center text-gray-400\">\n          {/* Messages Icon */}\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"20\" height=\"20\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\" stroke=\"currentColor\"\n            strokeWidth=\"2\" strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n          >\n            <path d=\"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z\"></path>\n          </svg>\n          <span className=\"text-xs mt-1\">Messages</span>\n        </div>\n        <div className=\"flex flex-col items-center text-gray-400\">\n          {/* Profile Icon */}\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"20\" height=\"20\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\" stroke=\"currentColor\"\n            strokeWidth=\"2\" strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n          >\n            <path d=\"M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2\"></path>\n            <circle cx=\"12\" cy=\"7\" r=\"4\"></circle>\n          </svg>\n          <span className=\"text-xs mt-1\">Profile</span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default HomePage;\n",
  "src/constants/Colors.ts": "// src/constants/Colors.ts\nexport const Colors = {\n    primary: '#3498db',\n    primaryLight: '#5dade2',\n    primaryDark: '#2980b9',\n    secondary: '#1abc9c',\n    secondaryLight: '#48c9b0',\n    secondaryDark: '#16a085',\n    background: '#f8f9fa',\n    white: '#ffffff',\n    black: '#000000',\n    text: '#2c3e50',\n    textLight: '#7f8c8d',\n    error: '#e74c3c',\n    success: '#2ecc71',\n    warning: '#f39c12',\n    gray: '#bdc3c7',\n    grayLight: '#ecf0f1',\n    grayDark: '#95a5a6',\n    border: '#dfe4ea',\n    shadow: 'rgba(0, 0, 0, 0.1)',\n  };\n  \n  export default Colors;",
  "src/contexts/AuthContext.tsx": "// src/contexts/AuthContext.tsx\n'use client';\n\nimport React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { authAPI } from '@/services/api';\nimport Cookies from 'js-cookie';\n\ninterface User {\n  _id: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  phone?: string;\n  role?: 'customer' | 'cleaner' | 'admin';\n}\n\ninterface AuthContextType {\n  user: User | null;\n  isLoading: boolean;\n  isAuthenticated: boolean;\n  login: (email: string, password: string) => Promise<void>;\n  register: (userData: any) => Promise<void>;\n  logout: () => void;\n  error: string | null;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider = ({ children }: AuthProviderProps) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Check if user is already logged in on initial load\n  useEffect(() => {\n    const checkAuth = async () => {\n      //const token = localStorage.getItem('token');\n        try {\n          const userData = await authAPI.getUserProfile();\n          setUser(userData.user);\n        } catch (err) {\n          // Token might be expired or invalid\n          Cookies.remove('token');\n        } finally {\n          setIsLoading(false);\n        }\n      };\n\n    checkAuth();\n  }, []);\n\n  const login = async (email: string, password: string) => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await authAPI.login(email, password);\n      //localStorage.setItem('token', response.token);\n      setUser({\n        _id: response._id,\n        firstName: response.firstName,\n        lastName: response.lastName,\n        email: response.email,\n        phone: response.phone,\n        role: response.role,\n      });\n    } catch (err: any) {\n      setError(err.response?.data?.message || 'Failed to login');\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const register = async (userData: any) => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await authAPI.register(userData);\n      //localStorage.setItem('token', response.token);\n      setUser({\n        _id: response._id,\n        firstName: response.firstName,\n        lastName: response.lastName,\n        email: response.email,\n        phone: response.phone,\n        role: response.role,\n      });\n    } catch (err: any) {\n      setError(err.response?.data?.message || 'Failed to register');\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const logout = async () => {\n    try {\n      // Call the logout endpoint to clear cookies on the server\n      await authAPI.logout();\n    } catch (err) {\n      console.error(\"Error during logout:\", err);\n    } finally {\n      // Clear any legacy tokens\n      Cookies.remove('token');\n      setUser(null);\n    }\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user,\n        isLoading,\n        isAuthenticated: !!user,\n        login,\n        register,\n        logout,\n        error,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthProvider;",
  "src/middleware.ts": "// Update your src/middleware.ts\nimport { NextResponse } from 'next/server';\nimport type { NextRequest } from 'next/server';\n\nexport function middleware(request: NextRequest) {\n  // Check for token in both cookies and local storage\n  const token = request.cookies.get('token') || \n                // Can't access localStorage in middleware, so we just check cookies\n                null;\n  \n  // Define auth routes\n  const authRoutes = ['/login', '/register'];\n  \n  // Check if current path is an auth route\n  const isAuthRoute = authRoutes.some(route => \n    request.nextUrl.pathname === route || \n    request.nextUrl.pathname.startsWith(route)\n  );\n  \n  // Debug info in headers (you can remove this in production)\n  const response = NextResponse.next();\n  response.headers.set('x-middleware-cache', 'no-cache');\n  \n  // Redirect to login if no token and trying to access non-auth pages\n  if (!token && request.nextUrl.pathname === '/') {\n    return NextResponse.redirect(new URL('/login', request.url));\n  }\n  \n  // Redirect to home if has token and trying to access auth routes\n  if (token && isAuthRoute) {\n    return NextResponse.redirect(new URL('/', request.url));\n  }\n  \n  return response;\n}\n\n// Run middleware on specified routes\nexport const config = {\n  matcher: ['/', '/login', '/register'],\n};",
  "src/services/api.ts": "// src/services/api.ts\nimport axios, { InternalAxiosRequestConfig } from 'axios';\nimport Cookies from 'js-cookie';\n\nconst API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:5001/api';\n\n// Create an axios instance\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  withCredentials: true\n});\n\n// Add a request interceptor to include the auth token in requests\napi.interceptors.request.use(\n  (config: InternalAxiosRequestConfig) => {\n    // Only run in browser environment\n    if (typeof window !== 'undefined') {\n      const token = Cookies.get('token');\n      if (token && config.headers) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n    }\n    return config;\n  },\n  (error: any) => {\n    return Promise.reject(error);\n  }\n);\n\n\n// Add a response interceptor to handle expired tokens\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    // Check if error is 401 Unauthorized\n    if (error.response && error.response.status === 401) {\n      // Clear token\n      Cookies.remove('token');\n      \n      // If we're in the browser, redirect to login page\n      if (typeof window !== 'undefined') {\n        // Set optional message to display on login page\n        sessionStorage.setItem('authMessage', 'Your session has expired. Please log in again.');\n        \n        // Redirect to login\n        //window.location.href = '/login';\n      }\n    }\n    \n    return Promise.reject(error);\n  }\n);\n\n// Define interfaces for the data structures\ninterface UserData {\n  firstName: string;\n  lastName: string;\n  email: string;\n  phone?: string;\n  password: string;\n  role?: string;\n}\n\ninterface AddressData {\n  name: string;\n  streetAddress: string;\n  city: string;\n  state: string;\n  zipCode: string;\n  squareFootage: number;\n  notes?: string;\n  isDefault?: boolean;\n}\n\ninterface BookingData {\n  serviceTypeId: string;\n  addressId: string;\n  date: string;\n  timeSlot: string;\n  squareFootage?: number | null;\n  hasPets?: boolean;\n  messiness?: number;\n  supplies?: 'customer' | 'cleaner';\n  frequency?: 'one-time' | 'weekly' | 'bi-weekly' | 'monthly';\n  notes?: string;\n  preferredDates?: string[];\n  preferredTimeSlots?: string[];\n  flexibleScheduling?: boolean;\n  cleanerId?: string | null;\n}\n\n// Auth API\nexport const authAPI = {\n  register: async (userData: UserData) => {\n    const response = await api.post('/auth/register', userData);\n    return response.data;\n  },\n  login: async (email: string, password: string) => {\n    const response = await api.post('/auth/login', { email, password });\n    return response.data;\n  },\n  logout: async () => {\n    const response = await api.post('/auth/logout');\n    return response.data;\n  },\n  getUserProfile: async () => {\n    const response = await api.get('/users/profile');\n    return response.data;\n  },\n};\n\n// Address API\nexport const addressAPI = {\n  getUserAddresses: async () => {\n    const response = await api.get('/addresses');\n    return response.data;\n  },\n  createAddress: async (addressData: AddressData) => {\n    const response = await api.post('/addresses', addressData);\n    return response.data;\n  },\n  updateAddress: async (id: string, addressData: Partial<AddressData>) => {\n    const response = await api.put(`/addresses/${id}`, addressData);\n    return response.data;\n  },\n  deleteAddress: async (id: string) => {\n    const response = await api.delete(`/addresses/${id}`);\n    return response.data;\n  },\n};\n\n// Service API\nexport const serviceAPI = {\n  getServices: async () => {\n    const response = await api.get('/services');\n    return response.data;\n  },\n  getServiceById: async (id: string) => {\n    const response = await api.get(`/services/${id}`);\n    return response.data;\n  },\n  // Make sure your backend has this endpoint available\n  getServiceByCode: async (code: string) => {\n    const response = await api.get(`/services/code/${code}`);\n    return response.data;\n  }\n};\n\n// Booking API\nexport const bookingAPI = {\n  createBooking: async (bookingData: BookingData) => {\n    const response = await api.post('/bookings', bookingData);\n    return response.data;\n  },\n  getUserBookings: async () => {\n    const response = await api.get('/bookings');\n    return response.data;\n  },\n  getBookingById: async (id: string) => {\n    const response = await api.get(`/bookings/${id}`);\n    return response.data;\n  },\n  cancelBooking: async (id: string) => {\n    const response = await api.delete(`/bookings/${id}`);\n    return response.data;\n  },\n  getAvailableTimeSlots: async (date: string) => {\n    const response = await api.get(`/bookings/slots/${date}`);\n    return response.data;\n  },\n};\n\nexport default api;",
  "src/store/bookingStore.ts": "// src/store/bookingStore.ts\nimport { create } from 'zustand';\nimport { persist, PersistStorage, StorageValue } from 'zustand/middleware';\nimport Cookies from 'js-cookie';\nimport { bookingAPI } from '@/services/api';\n\n// Define interfaces for the data structures\ninterface ServiceData {\n  serviceId: string;\n  serviceName: string;\n  serviceDescription: string;\n  basePrice: number;\n  serviceCode?: string;\n}\n\ninterface AddressData {\n  addressId: string;\n  name: string;\n  streetAddress: string;\n  city: string;\n  state: string;\n  zipCode: string;\n  squareFootage: number;\n  notes?: string;\n}\n\ninterface DateTimeData {\n  date: string;\n  timeSlot: string;\n  preferredDates: string[];\n  preferredTimeSlots: string[];\n  flexibleScheduling: boolean;\n}\n\ninterface BookingDetails {\n  hasPets?: boolean;\n  messiness?: number;\n  supplies?: 'customer' | 'cleaner';\n  frequency?: 'one-time' | 'weekly' | 'bi-weekly' | 'monthly';\n  notes?: string;\n  suppliesOption?: string;\n  selectedSupplies?: string[];\n  suppliesDiscount?: number;\n}\n\nexport interface CurrentBooking {\n  serviceId: string | null;\n  serviceName: string | null;\n  serviceDescription: string | null;\n  basePrice: number | null;\n  \n  addressId: string | null;\n  addressName: string | null;\n  streetAddress: string | null;\n  city: string | null;\n  state: string | null;\n  zipCode: string | null;\n  squareFootage: number | null;\n  \n  date: string | null;\n  timeSlot: string | null;\n  preferredDates: string[];\n  preferredTimeSlots: string[];\n  \n  cleanerId: string | null;\n  \n  hasPets: boolean;\n  messiness: number;\n  supplies: 'customer' | 'cleaner';\n  flexibleScheduling: boolean;\n  frequency: 'one-time' | 'weekly' | 'bi-weekly' | 'monthly';\n  notes: string;\n  \n  estimatedPrice: number | null;\n}\n\ninterface BookingState {\n  currentBooking: CurrentBooking;\n  bookings: any[];\n  isLoading: boolean;\n  error: string | null;\n  \n  setService: (serviceData: ServiceData) => void;\n  setAddress: (addressData: AddressData) => void;\n  setDateTime: (dateTimeData: DateTimeData) => void;\n  setCleaner: (cleanerId: string | null) => void;\n  setDetails: (details: BookingDetails) => void;\n  \n  syncFromCookies: () => void; // New function to sync from individual cookies\n  createBooking: () => Promise<boolean>;\n  getUserBookings: () => Promise<any[]>;\n  resetCurrentBooking: () => void;\n}\n\n// Create a custom storage adapter that uses js-cookie.\nconst cookieStorage: PersistStorage<BookingState> = {\n  getItem: (name: string) => {\n    const value = Cookies.get(name);\n    return value ? JSON.parse(value) : null;\n  },\n  setItem: (name: string, value: StorageValue<BookingState>) => {\n    Cookies.set(name, JSON.stringify(value), { expires: 7 });\n  },\n  removeItem: (name: string) => {\n    Cookies.remove(name);\n  },\n};\n\n// Helper function to parse cookies safely\nconst safelyParseCookie = (cookieName: string) => {\n  try {\n    const cookieValue = Cookies.get(cookieName);\n    return cookieValue ? JSON.parse(cookieValue) : null;\n  } catch (error) {\n    console.error(`Error parsing cookie ${cookieName}:`, error);\n    return null;\n  }\n};\n\nexport const useBookingStore = create<BookingState>()(\n  persist<BookingState>(\n    (set, get) => ({\n      currentBooking: {\n        serviceId: null,\n        serviceName: null,\n        serviceDescription: null,\n        basePrice: null,\n        \n        addressId: null,\n        addressName: null,\n        streetAddress: null,\n        city: null,\n        state: null,\n        zipCode: null,\n        squareFootage: null,\n        \n        date: null,\n        timeSlot: null,\n        preferredDates: [],\n        preferredTimeSlots: [],\n        \n        cleanerId: null,\n        \n        hasPets: false,\n        messiness: 5,\n        supplies: 'cleaner',\n        flexibleScheduling: false,\n        frequency: 'one-time',\n        notes: '',\n        \n        estimatedPrice: null,\n      },\n      \n      bookings: [],\n      isLoading: false,\n      error: null,\n      \n      // Sync all individual cookies into the store\n      syncFromCookies: () => {\n        try {\n          // Try to get service data\n          const serviceData = safelyParseCookie('bookingService');\n          // Try to get address data\n          const addressData = safelyParseCookie('bookingAddress');\n          // Try to get date time data\n          const dateTimeData = safelyParseCookie('bookingDateTime');\n          \n          // Current state\n          const currentState = get().currentBooking;\n          \n          // Build updated state\n          const updatedBooking = {\n            ...currentState,\n          };\n          \n          // Update with service data if available\n          if (serviceData) {\n            updatedBooking.serviceId = serviceData.serviceId || currentState.serviceId;\n            updatedBooking.serviceName = serviceData.serviceName || currentState.serviceName;\n            updatedBooking.serviceDescription = serviceData.serviceDescription || currentState.serviceDescription;\n            updatedBooking.basePrice = serviceData.basePrice || currentState.basePrice;\n            updatedBooking.estimatedPrice = serviceData.basePrice || currentState.estimatedPrice;\n          }\n          \n          // Update with address data if available\n          if (addressData) {\n            updatedBooking.addressId = addressData.addressId || currentState.addressId;\n            updatedBooking.addressName = addressData.name || currentState.addressName;\n            updatedBooking.streetAddress = addressData.streetAddress || currentState.streetAddress;\n            updatedBooking.city = addressData.city || currentState.city;\n            updatedBooking.state = addressData.state || currentState.state;\n            updatedBooking.zipCode = addressData.zipCode || currentState.zipCode;\n            updatedBooking.squareFootage = addressData.squareFootage || currentState.squareFootage;\n          }\n          \n          // Update with date time data if available\n          if (dateTimeData) {\n            updatedBooking.date = dateTimeData.date || currentState.date;\n            updatedBooking.timeSlot = dateTimeData.timeSlot || currentState.timeSlot;\n            updatedBooking.preferredDates = dateTimeData.preferredDates || currentState.preferredDates;\n            updatedBooking.preferredTimeSlots = dateTimeData.preferredTimeSlots || currentState.preferredTimeSlots;\n            updatedBooking.flexibleScheduling = dateTimeData.flexibleScheduling !== undefined ? \n              dateTimeData.flexibleScheduling : currentState.flexibleScheduling;\n          }\n          \n          // Set the updated state\n          set({ currentBooking: updatedBooking });\n          \n        } catch (error) {\n          console.error('Error syncing from cookies:', error);\n        }\n      },\n      \n      setService: (serviceData: ServiceData) => {\n        set((state) => ({\n          currentBooking: {\n            ...state.currentBooking,\n            serviceId: serviceData.serviceId,\n            serviceName: serviceData.serviceName,\n            serviceDescription: serviceData.serviceDescription,\n            basePrice: serviceData.basePrice,\n            estimatedPrice: serviceData.basePrice, // Initially set estimated to base price\n          }\n        }));\n        \n        // Also set the cookie directly for redundancy\n        Cookies.set('bookingService', JSON.stringify(serviceData), { expires: 7 });\n      },\n      \n      setAddress: (addressData: AddressData) => {\n        set((state) => ({\n          currentBooking: {\n            ...state.currentBooking,\n            addressId: addressData.addressId,\n            addressName: addressData.name,\n            streetAddress: addressData.streetAddress,\n            city: addressData.city,\n            state: addressData.state,\n            zipCode: addressData.zipCode,\n            squareFootage: addressData.squareFootage,\n          }\n        }));\n        \n        // Also set the cookie directly for redundancy\n        Cookies.set('bookingAddress', JSON.stringify(addressData), { expires: 7 });\n      },\n      \n      setDateTime: (dateTimeData: DateTimeData) => {\n        set((state) => ({\n          currentBooking: {\n            ...state.currentBooking,\n            date: dateTimeData.date,\n            timeSlot: dateTimeData.timeSlot,\n            preferredDates: dateTimeData.preferredDates || [],\n            preferredTimeSlots: dateTimeData.preferredTimeSlots || [],\n            flexibleScheduling: dateTimeData.flexibleScheduling || false,\n          }\n        }));\n        \n        // Also set the cookie directly for redundancy\n        Cookies.set('bookingDateTime', JSON.stringify(dateTimeData), { expires: 7 });\n      },\n      \n      setCleaner: (cleanerId: string | null) => set((state) => ({\n        currentBooking: {\n          ...state.currentBooking,\n          cleanerId,\n        }\n      })),\n      \n      setDetails: (details: BookingDetails) => set((state) => ({\n        currentBooking: {\n          ...state.currentBooking,\n          hasPets: details.hasPets !== undefined ? details.hasPets : state.currentBooking.hasPets,\n          messiness: details.messiness !== undefined ? details.messiness : state.currentBooking.messiness,\n          supplies: details.supplies || state.currentBooking.supplies,\n          frequency: details.frequency || state.currentBooking.frequency,\n          notes: details.notes !== undefined ? details.notes : state.currentBooking.notes,\n        }\n      })),\n      \n      createBooking: async () => {\n        // First sync from cookies to ensure we have the latest data\n        get().syncFromCookies();\n        \n        const { currentBooking } = get();\n        \n        // Validation\n        if (!currentBooking.serviceId || !currentBooking.addressId || !currentBooking.date || !currentBooking.timeSlot) {\n          console.error('Missing required booking information:', {\n            serviceId: currentBooking.serviceId,\n            addressId: currentBooking.addressId,\n            date: currentBooking.date,\n            timeSlot: currentBooking.timeSlot\n          });\n          set({ error: 'Missing required booking information' });\n          return false;\n        }\n        \n        set({ isLoading: true, error: null });\n        \n        try {\n          const bookingData = {\n            serviceTypeId: currentBooking.serviceId,\n            addressId: currentBooking.addressId,\n            date: currentBooking.date,\n            timeSlot: currentBooking.timeSlot,\n            squareFootage: currentBooking.squareFootage,\n            hasPets: currentBooking.hasPets,\n            messiness: currentBooking.messiness,\n            supplies: currentBooking.supplies,\n            frequency: currentBooking.frequency,\n            notes: currentBooking.notes,\n            preferredDates: currentBooking.preferredDates,\n            preferredTimeSlots: currentBooking.preferredTimeSlots,\n            flexibleScheduling: currentBooking.flexibleScheduling,\n            cleanerId: currentBooking.cleanerId,\n          };\n          \n          console.log('Submitting booking data:', bookingData);\n          await bookingAPI.createBooking(bookingData);\n          return true;\n        } catch (error: any) {\n          console.error('Error creating booking:', error);\n          set({ error: error.response?.data?.message || 'Failed to create booking' });\n          return false;\n        } finally {\n          set({ isLoading: false });\n        }\n      },\n      \n      getUserBookings: async () => {\n        set({ isLoading: true, error: null });\n        \n        try {\n          const bookings = await bookingAPI.getUserBookings();\n          set({ bookings });\n          return bookings;\n        } catch (error: any) {\n          set({ error: error.response?.data?.message || 'Failed to fetch bookings' });\n          return [];\n        } finally {\n          set({ isLoading: false });\n        }\n      },\n      \n      resetCurrentBooking: () => set({\n        currentBooking: {\n          serviceId: null,\n          serviceName: null,\n          serviceDescription: null,\n          basePrice: null,\n          \n          addressId: null,\n          addressName: null,\n          streetAddress: null,\n          city: null,\n          state: null,\n          zipCode: null,\n          squareFootage: null,\n          \n          date: null,\n          timeSlot: null,\n          preferredDates: [],\n          preferredTimeSlots: [],\n          \n          cleanerId: null,\n          \n          hasPets: false,\n          messiness: 5,\n          supplies: 'cleaner',\n          flexibleScheduling: false,\n          frequency: 'one-time',\n          notes: '',\n          \n          estimatedPrice: null,\n        }\n      }),\n    }),\n    {\n      name: 'booking-storage',\n      storage: cookieStorage,\n      partialize: (state: BookingState) => ({ \n        currentBooking: state.currentBooking \n      }) as unknown as BookingState,\n    }\n  )\n);\n\nexport default useBookingStore;",
  "src/store/serviceStore.ts": "// src/store/serviceStore.ts\nimport { create } from 'zustand';\nimport { serviceAPI } from '@/services/api';\n\nexport interface ServiceType {\n  _id: string;        // MongoDB ObjectId\n  code: string;       // Simple string code like \"standard\", \"deep\", etc.\n  name: string;       // Display name\n  description: string;\n  basePrice: number;\n  icon?: string;\n}\n\ninterface ServiceState {\n  serviceTypes: ServiceType[];\n  isLoading: boolean;\n  error: string | null;\n  \n  fetchServiceTypes: () => Promise<ServiceType[]>;\n  getServiceById: (id: string) => ServiceType | undefined;\n  getServiceByCode: (code: string) => ServiceType | undefined;\n}\n\nexport const useServiceStore = create<ServiceState>((set, get) => ({\n  serviceTypes: [],\n  isLoading: false,\n  error: null,\n  \n  fetchServiceTypes: async () => {\n    set({ isLoading: true, error: null });\n    \n    try {\n      const serviceTypes = await serviceAPI.getServices();\n      set({ serviceTypes, isLoading: false });\n      return serviceTypes;\n    } catch (error: any) {\n      const errorMessage = error.response?.data?.message || 'Failed to fetch service types';\n      set({ error: errorMessage, isLoading: false });\n      return [];\n    }\n  },\n  \n  getServiceById: (id: string) => {\n    return get().serviceTypes.find(service => service._id === id);\n  },\n  \n  getServiceByCode: (code: string) => {\n    return get().serviceTypes.find(service => service.code === code);\n  }\n}));\n\nexport default useServiceStore;",
  "tailwind.config.js": "// tailwind.config.js\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n    content: [\n      './src/pages/**/*.{js,ts,jsx,tsx,mdx}',\n      './src/components/**/*.{js,ts,jsx,tsx,mdx}',\n      './src/app/**/*.{js,ts,jsx,tsx,mdx}',\n    ],\n    theme: {\n      extend: {\n        colors: {\n          primary: '#3498db',\n          primaryLight: '#5dade2',\n          primaryDark: '#2980b9',\n          secondary: '#1abc9c',\n          secondaryLight: '#48c9b0',\n          secondaryDark: '#16a085',\n          background: '#f8f9fa',\n          text: '#2c3e50',\n          textLight: '#7f8c8d',\n          error: '#e74c3c',\n          success: '#2ecc71',\n          warning: '#f39c12',\n          gray: '#bdc3c7',\n          grayLight: '#ecf0f1',\n          grayDark: '#95a5a6',\n          border: '#dfe4ea',\n        },\n        boxShadow: {\n          custom: '0 2px 10px 0 rgba(0, 0, 0, 0.1)',\n        },\n        animation: {\n          'spin-slow': 'spin 3s linear infinite reverse',\n          'bounce-delay-1': 'bounce 1s infinite',\n          'bounce-delay-2': 'bounce 1s infinite 0.2s',\n          'bounce-delay-3': 'bounce 1s infinite 0.4s',\n        },\n      },\n    },\n    plugins: [],\n  };",
  "tsconfig.json": "{\n  \"compilerOptions\": {\n    \"target\": \"ES2017\",\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"allowJs\": true,\n    \"skipLibCheck\": true,\n    \"strict\": true,\n    \"noEmit\": true,\n    \"esModuleInterop\": true,\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"bundler\",\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"jsx\": \"preserve\",\n    \"incremental\": true,\n    \"plugins\": [\n      {\n        \"name\": \"next\"\n      }\n    ],\n    \"paths\": {\n      \"@/*\": [\"./src/*\"]\n    }\n  },\n  \"include\": [\"next-env.d.ts\", \"**/*.ts\", \"**/*.tsx\", \".next/types/**/*.ts\"],\n  \"exclude\": [\"node_modules\"]\n}\n"
}